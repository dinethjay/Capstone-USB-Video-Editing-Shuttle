
Casptone_Video_Editing_Shuttle_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000079b4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  08007a74  08007a74  00017a74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b8c  08007b8c  00020158  2**0
                  CONTENTS
  4 .ARM          00000000  08007b8c  08007b8c  00020158  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007b8c  08007b8c  00020158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b8c  08007b8c  00017b8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007b90  08007b90  00017b90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000158  20000000  08007b94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000838  20000158  08007cec  00020158  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000990  08007cec  00020990  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020158  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010355  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c29  00000000  00000000  000304d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009e0  00000000  00000000  00033100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000898  00000000  00000000  00033ae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b525  00000000  00000000  00034378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e25b  00000000  00000000  0004f89d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090f32  00000000  00000000  0005daf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000eea2a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000020a0  00000000  00000000  000eea80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000158 	.word	0x20000158
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08007a5c 	.word	0x08007a5c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000015c 	.word	0x2000015c
 8000104:	08007a5c 	.word	0x08007a5c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <MX_GPIO_Init>:
     PB1   ------> TSC_G3_IO3
     PB10   ------> I2C2_SCL
     PB11   ------> I2C2_SDA
*/
void MX_GPIO_Init(void)
{
 8000220:	b590      	push	{r4, r7, lr}
 8000222:	b08b      	sub	sp, #44	; 0x2c
 8000224:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000226:	2414      	movs	r4, #20
 8000228:	193b      	adds	r3, r7, r4
 800022a:	0018      	movs	r0, r3
 800022c:	2314      	movs	r3, #20
 800022e:	001a      	movs	r2, r3
 8000230:	2100      	movs	r1, #0
 8000232:	f007 fc0b 	bl	8007a4c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000236:	4b6f      	ldr	r3, [pc, #444]	; (80003f4 <MX_GPIO_Init+0x1d4>)
 8000238:	695a      	ldr	r2, [r3, #20]
 800023a:	4b6e      	ldr	r3, [pc, #440]	; (80003f4 <MX_GPIO_Init+0x1d4>)
 800023c:	2180      	movs	r1, #128	; 0x80
 800023e:	03c9      	lsls	r1, r1, #15
 8000240:	430a      	orrs	r2, r1
 8000242:	615a      	str	r2, [r3, #20]
 8000244:	4b6b      	ldr	r3, [pc, #428]	; (80003f4 <MX_GPIO_Init+0x1d4>)
 8000246:	695a      	ldr	r2, [r3, #20]
 8000248:	2380      	movs	r3, #128	; 0x80
 800024a:	03db      	lsls	r3, r3, #15
 800024c:	4013      	ands	r3, r2
 800024e:	613b      	str	r3, [r7, #16]
 8000250:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000252:	4b68      	ldr	r3, [pc, #416]	; (80003f4 <MX_GPIO_Init+0x1d4>)
 8000254:	695a      	ldr	r2, [r3, #20]
 8000256:	4b67      	ldr	r3, [pc, #412]	; (80003f4 <MX_GPIO_Init+0x1d4>)
 8000258:	2180      	movs	r1, #128	; 0x80
 800025a:	0309      	lsls	r1, r1, #12
 800025c:	430a      	orrs	r2, r1
 800025e:	615a      	str	r2, [r3, #20]
 8000260:	4b64      	ldr	r3, [pc, #400]	; (80003f4 <MX_GPIO_Init+0x1d4>)
 8000262:	695a      	ldr	r2, [r3, #20]
 8000264:	2380      	movs	r3, #128	; 0x80
 8000266:	031b      	lsls	r3, r3, #12
 8000268:	4013      	ands	r3, r2
 800026a:	60fb      	str	r3, [r7, #12]
 800026c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800026e:	4b61      	ldr	r3, [pc, #388]	; (80003f4 <MX_GPIO_Init+0x1d4>)
 8000270:	695a      	ldr	r2, [r3, #20]
 8000272:	4b60      	ldr	r3, [pc, #384]	; (80003f4 <MX_GPIO_Init+0x1d4>)
 8000274:	2180      	movs	r1, #128	; 0x80
 8000276:	0289      	lsls	r1, r1, #10
 8000278:	430a      	orrs	r2, r1
 800027a:	615a      	str	r2, [r3, #20]
 800027c:	4b5d      	ldr	r3, [pc, #372]	; (80003f4 <MX_GPIO_Init+0x1d4>)
 800027e:	695a      	ldr	r2, [r3, #20]
 8000280:	2380      	movs	r3, #128	; 0x80
 8000282:	029b      	lsls	r3, r3, #10
 8000284:	4013      	ands	r3, r2
 8000286:	60bb      	str	r3, [r7, #8]
 8000288:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800028a:	4b5a      	ldr	r3, [pc, #360]	; (80003f4 <MX_GPIO_Init+0x1d4>)
 800028c:	695a      	ldr	r2, [r3, #20]
 800028e:	4b59      	ldr	r3, [pc, #356]	; (80003f4 <MX_GPIO_Init+0x1d4>)
 8000290:	2180      	movs	r1, #128	; 0x80
 8000292:	02c9      	lsls	r1, r1, #11
 8000294:	430a      	orrs	r2, r1
 8000296:	615a      	str	r2, [r3, #20]
 8000298:	4b56      	ldr	r3, [pc, #344]	; (80003f4 <MX_GPIO_Init+0x1d4>)
 800029a:	695a      	ldr	r2, [r3, #20]
 800029c:	2380      	movs	r3, #128	; 0x80
 800029e:	02db      	lsls	r3, r3, #11
 80002a0:	4013      	ands	r3, r2
 80002a2:	607b      	str	r3, [r7, #4]
 80002a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|EXT_RESET_Pin|GPIO_PIN_6|LD6_Pin
 80002a6:	4954      	ldr	r1, [pc, #336]	; (80003f8 <MX_GPIO_Init+0x1d8>)
 80002a8:	4b54      	ldr	r3, [pc, #336]	; (80003fc <MX_GPIO_Init+0x1dc>)
 80002aa:	2200      	movs	r2, #0
 80002ac:	0018      	movs	r0, r3
 80002ae:	f000 fefa 	bl	80010a6 <HAL_GPIO_WritePin>
                          |LD4_Pin|LD5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PCPin PCPin PC6 PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|EXT_RESET_Pin|GPIO_PIN_6|LD6_Pin
 80002b2:	193b      	adds	r3, r7, r4
 80002b4:	4a50      	ldr	r2, [pc, #320]	; (80003f8 <MX_GPIO_Init+0x1d8>)
 80002b6:	601a      	str	r2, [r3, #0]
                          |LD4_Pin|LD5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002b8:	193b      	adds	r3, r7, r4
 80002ba:	2201      	movs	r2, #1
 80002bc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002be:	193b      	adds	r3, r7, r4
 80002c0:	2200      	movs	r2, #0
 80002c2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002c4:	193b      	adds	r3, r7, r4
 80002c6:	2200      	movs	r2, #0
 80002c8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80002ca:	193b      	adds	r3, r7, r4
 80002cc:	4a4b      	ldr	r2, [pc, #300]	; (80003fc <MX_GPIO_Init+0x1dc>)
 80002ce:	0019      	movs	r1, r3
 80002d0:	0010      	movs	r0, r2
 80002d2:	f000 fd53 	bl	8000d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin|MEMS_INT2_Pin;
 80002d6:	0021      	movs	r1, r4
 80002d8:	187b      	adds	r3, r7, r1
 80002da:	2206      	movs	r2, #6
 80002dc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80002de:	187b      	adds	r3, r7, r1
 80002e0:	2290      	movs	r2, #144	; 0x90
 80002e2:	0352      	lsls	r2, r2, #13
 80002e4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002e6:	000c      	movs	r4, r1
 80002e8:	193b      	adds	r3, r7, r4
 80002ea:	2200      	movs	r2, #0
 80002ec:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80002ee:	193b      	adds	r3, r7, r4
 80002f0:	4a42      	ldr	r2, [pc, #264]	; (80003fc <MX_GPIO_Init+0x1dc>)
 80002f2:	0019      	movs	r1, r3
 80002f4:	0010      	movs	r0, r2
 80002f6:	f000 fd41 	bl	8000d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80002fa:	193b      	adds	r3, r7, r4
 80002fc:	2201      	movs	r2, #1
 80002fe:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000300:	193b      	adds	r3, r7, r4
 8000302:	2290      	movs	r2, #144	; 0x90
 8000304:	0352      	lsls	r2, r2, #13
 8000306:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000308:	193b      	adds	r3, r7, r4
 800030a:	2200      	movs	r2, #0
 800030c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800030e:	193a      	adds	r2, r7, r4
 8000310:	2390      	movs	r3, #144	; 0x90
 8000312:	05db      	lsls	r3, r3, #23
 8000314:	0011      	movs	r1, r2
 8000316:	0018      	movs	r0, r3
 8000318:	f000 fd30 	bl	8000d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_7;
 800031c:	193b      	adds	r3, r7, r4
 800031e:	22cc      	movs	r2, #204	; 0xcc
 8000320:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000322:	193b      	adds	r3, r7, r4
 8000324:	2202      	movs	r2, #2
 8000326:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000328:	193b      	adds	r3, r7, r4
 800032a:	2200      	movs	r2, #0
 800032c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800032e:	193b      	adds	r3, r7, r4
 8000330:	2200      	movs	r2, #0
 8000332:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8000334:	193b      	adds	r3, r7, r4
 8000336:	2203      	movs	r2, #3
 8000338:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800033a:	193a      	adds	r2, r7, r4
 800033c:	2390      	movs	r3, #144	; 0x90
 800033e:	05db      	lsls	r3, r3, #23
 8000340:	0011      	movs	r1, r2
 8000342:	0018      	movs	r0, r3
 8000344:	f000 fd1a 	bl	8000d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000348:	193b      	adds	r3, r7, r4
 800034a:	2203      	movs	r2, #3
 800034c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800034e:	193b      	adds	r3, r7, r4
 8000350:	2202      	movs	r2, #2
 8000352:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000354:	193b      	adds	r3, r7, r4
 8000356:	2200      	movs	r2, #0
 8000358:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800035a:	193b      	adds	r3, r7, r4
 800035c:	2200      	movs	r2, #0
 800035e:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8000360:	193b      	adds	r3, r7, r4
 8000362:	2203      	movs	r2, #3
 8000364:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000366:	193b      	adds	r3, r7, r4
 8000368:	4a25      	ldr	r2, [pc, #148]	; (8000400 <MX_GPIO_Init+0x1e0>)
 800036a:	0019      	movs	r1, r3
 800036c:	0010      	movs	r0, r2
 800036e:	f000 fd05 	bl	8000d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = I2C2_SCL_Pin|I2C2_SDA_Pin;
 8000372:	0021      	movs	r1, r4
 8000374:	187b      	adds	r3, r7, r1
 8000376:	22c0      	movs	r2, #192	; 0xc0
 8000378:	0112      	lsls	r2, r2, #4
 800037a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800037c:	000c      	movs	r4, r1
 800037e:	193b      	adds	r3, r7, r4
 8000380:	2212      	movs	r2, #18
 8000382:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000384:	193b      	adds	r3, r7, r4
 8000386:	2200      	movs	r2, #0
 8000388:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800038a:	193b      	adds	r3, r7, r4
 800038c:	2203      	movs	r2, #3
 800038e:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF1_I2C2;
 8000390:	193b      	adds	r3, r7, r4
 8000392:	2201      	movs	r2, #1
 8000394:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000396:	193b      	adds	r3, r7, r4
 8000398:	4a19      	ldr	r2, [pc, #100]	; (8000400 <MX_GPIO_Init+0x1e0>)
 800039a:	0019      	movs	r1, r3
 800039c:	0010      	movs	r0, r2
 800039e:	f000 fced 	bl	8000d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80003a2:	0021      	movs	r1, r4
 80003a4:	187b      	adds	r3, r7, r1
 80003a6:	22e0      	movs	r2, #224	; 0xe0
 80003a8:	0212      	lsls	r2, r2, #8
 80003aa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003ac:	000c      	movs	r4, r1
 80003ae:	193b      	adds	r3, r7, r4
 80003b0:	2200      	movs	r2, #0
 80003b2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003b4:	193b      	adds	r3, r7, r4
 80003b6:	2200      	movs	r2, #0
 80003b8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003ba:	193b      	adds	r3, r7, r4
 80003bc:	4a10      	ldr	r2, [pc, #64]	; (8000400 <MX_GPIO_Init+0x1e0>)
 80003be:	0019      	movs	r1, r3
 80003c0:	0010      	movs	r0, r2
 80003c2:	f000 fcdb 	bl	8000d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80003c6:	0021      	movs	r1, r4
 80003c8:	187b      	adds	r3, r7, r1
 80003ca:	22e0      	movs	r2, #224	; 0xe0
 80003cc:	00d2      	lsls	r2, r2, #3
 80003ce:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003d0:	187b      	adds	r3, r7, r1
 80003d2:	2200      	movs	r2, #0
 80003d4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003d6:	187b      	adds	r3, r7, r1
 80003d8:	2200      	movs	r2, #0
 80003da:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003dc:	187a      	adds	r2, r7, r1
 80003de:	2390      	movs	r3, #144	; 0x90
 80003e0:	05db      	lsls	r3, r3, #23
 80003e2:	0011      	movs	r1, r2
 80003e4:	0018      	movs	r0, r3
 80003e6:	f000 fcc9 	bl	8000d7c <HAL_GPIO_Init>

}
 80003ea:	46c0      	nop			; (mov r8, r8)
 80003ec:	46bd      	mov	sp, r7
 80003ee:	b00b      	add	sp, #44	; 0x2c
 80003f0:	bd90      	pop	{r4, r7, pc}
 80003f2:	46c0      	nop			; (mov r8, r8)
 80003f4:	40021000 	.word	0x40021000
 80003f8:	000003e1 	.word	0x000003e1
 80003fc:	48000800 	.word	0x48000800
 8000400:	48000400 	.word	0x48000400

08000404 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b082      	sub	sp, #8
 8000408:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800040a:	f000 fb51 	bl	8000ab0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800040e:	f000 f817 	bl	8000440 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  System_Init(); // Initialize all variables;
 8000412:	f000 f87b 	bl	800050c <System_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000416:	f7ff ff03 	bl	8000220 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800041a:	f006 fe69 	bl	80070f0 <MX_USB_DEVICE_Init>
  InitShuttle(); // Initiailize data structures
 800041e:	f000 f881 	bl	8000524 <InitShuttle>
  /* USER CODE BEGIN 2 */
 extern USBD_HandleTypeDef hUsbDeviceFS;
 uint8_t HID_buffer[8] = {0};
 8000422:	003b      	movs	r3, r7
 8000424:	2200      	movs	r2, #0
 8000426:	601a      	str	r2, [r3, #0]
 8000428:	2200      	movs	r2, #0
 800042a:	605a      	str	r2, [r3, #4]
	  //HID_buffer[2] = 0;
	  //USBD_HID_SendReport(&hUsbDeviceFS, HID_buffer, 8);

	 // HAL_Delay(20);

	 PollUserInput();
 800042c:	f000 f8a8 	bl	8000580 <PollUserInput>
	 WriteOutputToPC(&hUsbDeviceFS);
 8000430:	4b02      	ldr	r3, [pc, #8]	; (800043c <main+0x38>)
 8000432:	0018      	movs	r0, r3
 8000434:	f000 f950 	bl	80006d8 <WriteOutputToPC>
	 PollUserInput();
 8000438:	e7f8      	b.n	800042c <main+0x28>
 800043a:	46c0      	nop			; (mov r8, r8)
 800043c:	200001d8 	.word	0x200001d8

08000440 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000440:	b590      	push	{r4, r7, lr}
 8000442:	b099      	sub	sp, #100	; 0x64
 8000444:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000446:	242c      	movs	r4, #44	; 0x2c
 8000448:	193b      	adds	r3, r7, r4
 800044a:	0018      	movs	r0, r3
 800044c:	2334      	movs	r3, #52	; 0x34
 800044e:	001a      	movs	r2, r3
 8000450:	2100      	movs	r1, #0
 8000452:	f007 fafb 	bl	8007a4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000456:	231c      	movs	r3, #28
 8000458:	18fb      	adds	r3, r7, r3
 800045a:	0018      	movs	r0, r3
 800045c:	2310      	movs	r3, #16
 800045e:	001a      	movs	r2, r3
 8000460:	2100      	movs	r1, #0
 8000462:	f007 faf3 	bl	8007a4c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000466:	003b      	movs	r3, r7
 8000468:	0018      	movs	r0, r3
 800046a:	231c      	movs	r3, #28
 800046c:	001a      	movs	r2, r3
 800046e:	2100      	movs	r1, #0
 8000470:	f007 faec 	bl	8007a4c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8000474:	0021      	movs	r1, r4
 8000476:	187b      	adds	r3, r7, r1
 8000478:	2222      	movs	r2, #34	; 0x22
 800047a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800047c:	187b      	adds	r3, r7, r1
 800047e:	2201      	movs	r2, #1
 8000480:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000482:	187b      	adds	r3, r7, r1
 8000484:	2201      	movs	r2, #1
 8000486:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000488:	187b      	adds	r3, r7, r1
 800048a:	2210      	movs	r2, #16
 800048c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800048e:	187b      	adds	r3, r7, r1
 8000490:	2202      	movs	r2, #2
 8000492:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000494:	187b      	adds	r3, r7, r1
 8000496:	2280      	movs	r2, #128	; 0x80
 8000498:	0212      	lsls	r2, r2, #8
 800049a:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800049c:	187b      	adds	r3, r7, r1
 800049e:	2280      	movs	r2, #128	; 0x80
 80004a0:	0352      	lsls	r2, r2, #13
 80004a2:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80004a4:	187b      	adds	r3, r7, r1
 80004a6:	2200      	movs	r2, #0
 80004a8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004aa:	187b      	adds	r3, r7, r1
 80004ac:	0018      	movs	r0, r3
 80004ae:	f002 fc71 	bl	8002d94 <HAL_RCC_OscConfig>
 80004b2:	1e03      	subs	r3, r0, #0
 80004b4:	d001      	beq.n	80004ba <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80004b6:	f000 f82f 	bl	8000518 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004ba:	211c      	movs	r1, #28
 80004bc:	187b      	adds	r3, r7, r1
 80004be:	2207      	movs	r2, #7
 80004c0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004c2:	187b      	adds	r3, r7, r1
 80004c4:	2202      	movs	r2, #2
 80004c6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004c8:	187b      	adds	r3, r7, r1
 80004ca:	2200      	movs	r2, #0
 80004cc:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004ce:	187b      	adds	r3, r7, r1
 80004d0:	2200      	movs	r2, #0
 80004d2:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80004d4:	187b      	adds	r3, r7, r1
 80004d6:	2101      	movs	r1, #1
 80004d8:	0018      	movs	r0, r3
 80004da:	f002 ffe1 	bl	80034a0 <HAL_RCC_ClockConfig>
 80004de:	1e03      	subs	r3, r0, #0
 80004e0:	d001      	beq.n	80004e6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80004e2:	f000 f819 	bl	8000518 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80004e6:	003b      	movs	r3, r7
 80004e8:	2280      	movs	r2, #128	; 0x80
 80004ea:	0292      	lsls	r2, r2, #10
 80004ec:	601a      	str	r2, [r3, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80004ee:	003b      	movs	r3, r7
 80004f0:	2200      	movs	r2, #0
 80004f2:	619a      	str	r2, [r3, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004f4:	003b      	movs	r3, r7
 80004f6:	0018      	movs	r0, r3
 80004f8:	f003 f92c 	bl	8003754 <HAL_RCCEx_PeriphCLKConfig>
 80004fc:	1e03      	subs	r3, r0, #0
 80004fe:	d001      	beq.n	8000504 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000500:	f000 f80a 	bl	8000518 <Error_Handler>
  }
}
 8000504:	46c0      	nop			; (mov r8, r8)
 8000506:	46bd      	mov	sp, r7
 8000508:	b019      	add	sp, #100	; 0x64
 800050a:	bd90      	pop	{r4, r7, pc}

0800050c <System_Init>:

/* USER CODE BEGIN 4 */
bool			// Returns whether system was initialized successfully
System_Init
(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
	return false;
 8000510:	2300      	movs	r3, #0
}
 8000512:	0018      	movs	r0, r3
 8000514:	46bd      	mov	sp, r7
 8000516:	bd80      	pop	{r7, pc}

08000518 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800051c:	b672      	cpsid	i
}
 800051e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000520:	e7fe      	b.n	8000520 <Error_Handler+0x8>
	...

08000524 <InitShuttle>:
  }
  /* USER CODE END Error_Handler_Debug */
}

void InitShuttle(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
	WriteButtonState(inactive, SET_ALL_BUTTONS); // set all button states to false
 8000528:	4b13      	ldr	r3, [pc, #76]	; (8000578 <InitShuttle+0x54>)
 800052a:	0019      	movs	r1, r3
 800052c:	2001      	movs	r0, #1
 800052e:	f000 f915 	bl	800075c <WriteButtonState>
	globalState.buttonMappings[0].packet.modifier = leftShift;
 8000532:	4b12      	ldr	r3, [pc, #72]	; (800057c <InitShuttle+0x58>)
 8000534:	2202      	movs	r2, #2
 8000536:	701a      	strb	r2, [r3, #0]
	globalState.buttonMappings[0].packet.keycode_1 = command_Comma;
 8000538:	4b10      	ldr	r3, [pc, #64]	; (800057c <InitShuttle+0x58>)
 800053a:	2250      	movs	r2, #80	; 0x50
 800053c:	709a      	strb	r2, [r3, #2]
	globalState.buttonMappings[1].packet.modifier = leftShift;
 800053e:	4b0f      	ldr	r3, [pc, #60]	; (800057c <InitShuttle+0x58>)
 8000540:	2202      	movs	r2, #2
 8000542:	721a      	strb	r2, [r3, #8]
	globalState.buttonMappings[1].packet.keycode_1 = letter_e;
 8000544:	4b0d      	ldr	r3, [pc, #52]	; (800057c <InitShuttle+0x58>)
 8000546:	2208      	movs	r2, #8
 8000548:	729a      	strb	r2, [r3, #10]
	globalState.buttonMappings[2].packet.modifier = leftShift;
 800054a:	4b0c      	ldr	r3, [pc, #48]	; (800057c <InitShuttle+0x58>)
 800054c:	2202      	movs	r2, #2
 800054e:	741a      	strb	r2, [r3, #16]
	globalState.buttonMappings[2].packet.keycode_1 = letter_f;
 8000550:	4b0a      	ldr	r3, [pc, #40]	; (800057c <InitShuttle+0x58>)
 8000552:	2209      	movs	r2, #9
 8000554:	749a      	strb	r2, [r3, #18]
	globalState.buttonMappings[3].packet.modifier = leftShift;
 8000556:	4b09      	ldr	r3, [pc, #36]	; (800057c <InitShuttle+0x58>)
 8000558:	2202      	movs	r2, #2
 800055a:	761a      	strb	r2, [r3, #24]
	globalState.buttonMappings[3].packet.keycode_1 = letter_g;
 800055c:	4b07      	ldr	r3, [pc, #28]	; (800057c <InitShuttle+0x58>)
 800055e:	220a      	movs	r2, #10
 8000560:	769a      	strb	r2, [r3, #26]
	globalState.buttonMappings[4].packet.modifier = leftShift;
 8000562:	4b06      	ldr	r3, [pc, #24]	; (800057c <InitShuttle+0x58>)
 8000564:	2220      	movs	r2, #32
 8000566:	2102      	movs	r1, #2
 8000568:	5499      	strb	r1, [r3, r2]
	globalState.buttonMappings[4].packet.keycode_1 = letter_h;
 800056a:	4b04      	ldr	r3, [pc, #16]	; (800057c <InitShuttle+0x58>)
 800056c:	2222      	movs	r2, #34	; 0x22
 800056e:	210b      	movs	r1, #11
 8000570:	5499      	strb	r1, [r3, r2]


}
 8000572:	46c0      	nop			; (mov r8, r8)
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}
 8000578:	0000ffff 	.word	0x0000ffff
 800057c:	20000190 	.word	0x20000190

08000580 <PollUserInput>:
void PollUserInput(void) // poll for User Input
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
	 	 if(HAL_GPIO_ReadPin(GPIO_BUTTON_1_PORT, GPIO_BUTTON_1_PIN))
 8000584:	2380      	movs	r3, #128	; 0x80
 8000586:	009a      	lsls	r2, r3, #2
 8000588:	2390      	movs	r3, #144	; 0x90
 800058a:	05db      	lsls	r3, r3, #23
 800058c:	0011      	movs	r1, r2
 800058e:	0018      	movs	r0, r3
 8000590:	f000 fd6c 	bl	800106c <HAL_GPIO_ReadPin>
 8000594:	1e03      	subs	r3, r0, #0
 8000596:	d00c      	beq.n	80005b2 <PollUserInput+0x32>
		  { if (ReadButtonState(0) == inactive)
 8000598:	2000      	movs	r0, #0
 800059a:	f000 f9a9 	bl	80008f0 <ReadButtonState>
 800059e:	0003      	movs	r3, r0
 80005a0:	2b01      	cmp	r3, #1
 80005a2:	d10f      	bne.n	80005c4 <PollUserInput+0x44>
			  globalState.buttonPressed.buttonState_1 = active;
 80005a4:	4b4a      	ldr	r3, [pc, #296]	; (80006d0 <PollUserInput+0x150>)
 80005a6:	2240      	movs	r2, #64	; 0x40
 80005a8:	5c99      	ldrb	r1, [r3, r2]
 80005aa:	2003      	movs	r0, #3
 80005ac:	4381      	bics	r1, r0
 80005ae:	5499      	strb	r1, [r3, r2]
 80005b0:	e008      	b.n	80005c4 <PollUserInput+0x44>
		  }
		  else
		  {
			  globalState.buttonPressed.buttonState_1 = inactive;
 80005b2:	4b47      	ldr	r3, [pc, #284]	; (80006d0 <PollUserInput+0x150>)
 80005b4:	2240      	movs	r2, #64	; 0x40
 80005b6:	5c99      	ldrb	r1, [r3, r2]
 80005b8:	2003      	movs	r0, #3
 80005ba:	4381      	bics	r1, r0
 80005bc:	1c08      	adds	r0, r1, #0
 80005be:	2101      	movs	r1, #1
 80005c0:	4301      	orrs	r1, r0
 80005c2:	5499      	strb	r1, [r3, r2]
		  }

		  if(HAL_GPIO_ReadPin(GPIO_BUTTON_2_PORT, GPIO_BUTTON_2_PIN))
 80005c4:	2380      	movs	r3, #128	; 0x80
 80005c6:	005a      	lsls	r2, r3, #1
 80005c8:	2390      	movs	r3, #144	; 0x90
 80005ca:	05db      	lsls	r3, r3, #23
 80005cc:	0011      	movs	r1, r2
 80005ce:	0018      	movs	r0, r3
 80005d0:	f000 fd4c 	bl	800106c <HAL_GPIO_ReadPin>
 80005d4:	1e03      	subs	r3, r0, #0
 80005d6:	d00f      	beq.n	80005f8 <PollUserInput+0x78>
		  {	if (ReadButtonState(1) == inactive)
 80005d8:	2001      	movs	r0, #1
 80005da:	f000 f989 	bl	80008f0 <ReadButtonState>
 80005de:	0003      	movs	r3, r0
 80005e0:	2b01      	cmp	r3, #1
 80005e2:	d112      	bne.n	800060a <PollUserInput+0x8a>
			  //HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
			  globalState.buttonPressed.buttonState_2 = inactive;
 80005e4:	4b3a      	ldr	r3, [pc, #232]	; (80006d0 <PollUserInput+0x150>)
 80005e6:	2240      	movs	r2, #64	; 0x40
 80005e8:	5c99      	ldrb	r1, [r3, r2]
 80005ea:	200c      	movs	r0, #12
 80005ec:	4381      	bics	r1, r0
 80005ee:	1c08      	adds	r0, r1, #0
 80005f0:	2104      	movs	r1, #4
 80005f2:	4301      	orrs	r1, r0
 80005f4:	5499      	strb	r1, [r3, r2]
 80005f6:	e008      	b.n	800060a <PollUserInput+0x8a>
		  }
		  else
		  {
			  globalState.buttonPressed.buttonState_2 = inactive;
 80005f8:	4b35      	ldr	r3, [pc, #212]	; (80006d0 <PollUserInput+0x150>)
 80005fa:	2240      	movs	r2, #64	; 0x40
 80005fc:	5c99      	ldrb	r1, [r3, r2]
 80005fe:	200c      	movs	r0, #12
 8000600:	4381      	bics	r1, r0
 8000602:	1c08      	adds	r0, r1, #0
 8000604:	2104      	movs	r1, #4
 8000606:	4301      	orrs	r1, r0
 8000608:	5499      	strb	r1, [r3, r2]
		  }


		  if(HAL_GPIO_ReadPin(GPIO_BUTTON_3_PORT, GPIO_BUTTON_3_PIN))
 800060a:	2380      	movs	r3, #128	; 0x80
 800060c:	021b      	lsls	r3, r3, #8
 800060e:	4a31      	ldr	r2, [pc, #196]	; (80006d4 <PollUserInput+0x154>)
 8000610:	0019      	movs	r1, r3
 8000612:	0010      	movs	r0, r2
 8000614:	f000 fd2a 	bl	800106c <HAL_GPIO_ReadPin>
 8000618:	1e03      	subs	r3, r0, #0
 800061a:	d00c      	beq.n	8000636 <PollUserInput+0xb6>
		  {
			  if (ReadButtonState(2) == inactive)
 800061c:	2002      	movs	r0, #2
 800061e:	f000 f967 	bl	80008f0 <ReadButtonState>
 8000622:	0003      	movs	r3, r0
 8000624:	2b01      	cmp	r3, #1
 8000626:	d10f      	bne.n	8000648 <PollUserInput+0xc8>
			  globalState.buttonPressed.buttonState_3 = active;
 8000628:	4b29      	ldr	r3, [pc, #164]	; (80006d0 <PollUserInput+0x150>)
 800062a:	2240      	movs	r2, #64	; 0x40
 800062c:	5c99      	ldrb	r1, [r3, r2]
 800062e:	2030      	movs	r0, #48	; 0x30
 8000630:	4381      	bics	r1, r0
 8000632:	5499      	strb	r1, [r3, r2]
 8000634:	e008      	b.n	8000648 <PollUserInput+0xc8>
		  }
		  else
		  {
			  globalState.buttonPressed.buttonState_3 = inactive;
 8000636:	4b26      	ldr	r3, [pc, #152]	; (80006d0 <PollUserInput+0x150>)
 8000638:	2240      	movs	r2, #64	; 0x40
 800063a:	5c99      	ldrb	r1, [r3, r2]
 800063c:	2030      	movs	r0, #48	; 0x30
 800063e:	4381      	bics	r1, r0
 8000640:	1c08      	adds	r0, r1, #0
 8000642:	2110      	movs	r1, #16
 8000644:	4301      	orrs	r1, r0
 8000646:	5499      	strb	r1, [r3, r2]
		  }

		  if(HAL_GPIO_ReadPin(GPIO_BUTTON_4_PORT, GPIO_BUTTON_4_PIN))
 8000648:	2380      	movs	r3, #128	; 0x80
 800064a:	01db      	lsls	r3, r3, #7
 800064c:	4a21      	ldr	r2, [pc, #132]	; (80006d4 <PollUserInput+0x154>)
 800064e:	0019      	movs	r1, r3
 8000650:	0010      	movs	r0, r2
 8000652:	f000 fd0b 	bl	800106c <HAL_GPIO_ReadPin>
 8000656:	1e03      	subs	r3, r0, #0
 8000658:	d00c      	beq.n	8000674 <PollUserInput+0xf4>
		  {
			  if (ReadButtonState(3) == inactive)
 800065a:	2003      	movs	r0, #3
 800065c:	f000 f948 	bl	80008f0 <ReadButtonState>
 8000660:	0003      	movs	r3, r0
 8000662:	2b01      	cmp	r3, #1
 8000664:	d10f      	bne.n	8000686 <PollUserInput+0x106>
			  globalState.buttonPressed.buttonState_4 = active;		  }
 8000666:	4b1a      	ldr	r3, [pc, #104]	; (80006d0 <PollUserInput+0x150>)
 8000668:	2240      	movs	r2, #64	; 0x40
 800066a:	5c99      	ldrb	r1, [r3, r2]
 800066c:	203f      	movs	r0, #63	; 0x3f
 800066e:	4001      	ands	r1, r0
 8000670:	5499      	strb	r1, [r3, r2]
 8000672:	e008      	b.n	8000686 <PollUserInput+0x106>
		  else
		  {
			  globalState.buttonPressed.buttonState_4 = inactive;		  }
 8000674:	4b16      	ldr	r3, [pc, #88]	; (80006d0 <PollUserInput+0x150>)
 8000676:	2240      	movs	r2, #64	; 0x40
 8000678:	5c99      	ldrb	r1, [r3, r2]
 800067a:	203f      	movs	r0, #63	; 0x3f
 800067c:	4001      	ands	r1, r0
 800067e:	1c08      	adds	r0, r1, #0
 8000680:	2140      	movs	r1, #64	; 0x40
 8000682:	4301      	orrs	r1, r0
 8000684:	5499      	strb	r1, [r3, r2]

		  if(HAL_GPIO_ReadPin(GPIO_BUTTON_5_PORT, GPIO_BUTTON_5_PIN))
 8000686:	2380      	movs	r3, #128	; 0x80
 8000688:	019b      	lsls	r3, r3, #6
 800068a:	4a12      	ldr	r2, [pc, #72]	; (80006d4 <PollUserInput+0x154>)
 800068c:	0019      	movs	r1, r3
 800068e:	0010      	movs	r0, r2
 8000690:	f000 fcec 	bl	800106c <HAL_GPIO_ReadPin>
 8000694:	1e03      	subs	r3, r0, #0
 8000696:	d00d      	beq.n	80006b4 <PollUserInput+0x134>
		  {
			  if (ReadButtonState(4) == inactive)
 8000698:	2004      	movs	r0, #4
 800069a:	f000 f929 	bl	80008f0 <ReadButtonState>
 800069e:	0003      	movs	r3, r0
 80006a0:	2b01      	cmp	r3, #1
 80006a2:	d111      	bne.n	80006c8 <PollUserInput+0x148>
			  globalState.buttonPressed.buttonState_5 = active;		  }
 80006a4:	4b0a      	ldr	r3, [pc, #40]	; (80006d0 <PollUserInput+0x150>)
 80006a6:	2240      	movs	r2, #64	; 0x40
 80006a8:	189b      	adds	r3, r3, r2
 80006aa:	785a      	ldrb	r2, [r3, #1]
 80006ac:	2103      	movs	r1, #3
 80006ae:	438a      	bics	r2, r1
 80006b0:	705a      	strb	r2, [r3, #1]
		  else
		  {
			  globalState.buttonPressed.buttonState_5 = inactive;		  }
}
 80006b2:	e009      	b.n	80006c8 <PollUserInput+0x148>
			  globalState.buttonPressed.buttonState_5 = inactive;		  }
 80006b4:	4b06      	ldr	r3, [pc, #24]	; (80006d0 <PollUserInput+0x150>)
 80006b6:	2240      	movs	r2, #64	; 0x40
 80006b8:	189b      	adds	r3, r3, r2
 80006ba:	785a      	ldrb	r2, [r3, #1]
 80006bc:	2103      	movs	r1, #3
 80006be:	438a      	bics	r2, r1
 80006c0:	1c11      	adds	r1, r2, #0
 80006c2:	2201      	movs	r2, #1
 80006c4:	430a      	orrs	r2, r1
 80006c6:	705a      	strb	r2, [r3, #1]
}
 80006c8:	46c0      	nop			; (mov r8, r8)
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	46c0      	nop			; (mov r8, r8)
 80006d0:	20000190 	.word	0x20000190
 80006d4:	48000400 	.word	0x48000400

080006d8 <WriteOutputToPC>:

void WriteOutputToPC(USBD_HandleTypeDef* hUsbDeviceFS)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b086      	sub	sp, #24
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
	for (int i = 0 ; i<NUM_BUTTONS; i++)
 80006e0:	2300      	movs	r3, #0
 80006e2:	617b      	str	r3, [r7, #20]
 80006e4:	e02d      	b.n	8000742 <WriteOutputToPC+0x6a>
	{
		if (ReadButtonState(i) == active)
 80006e6:	697b      	ldr	r3, [r7, #20]
 80006e8:	0018      	movs	r0, r3
 80006ea:	f000 f901 	bl	80008f0 <ReadButtonState>
 80006ee:	1e03      	subs	r3, r0, #0
 80006f0:	d124      	bne.n	800073c <WriteOutputToPC+0x64>
		{
			USBD_HID_SendReport(hUsbDeviceFS, globalState.buttonMappings[i].packetBuffer, PACKET_SIZE);
 80006f2:	697b      	ldr	r3, [r7, #20]
 80006f4:	00da      	lsls	r2, r3, #3
 80006f6:	4b17      	ldr	r3, [pc, #92]	; (8000754 <WriteOutputToPC+0x7c>)
 80006f8:	18d1      	adds	r1, r2, r3
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	2208      	movs	r2, #8
 80006fe:	0018      	movs	r0, r3
 8000700:	f005 fa9c 	bl	8005c3c <USBD_HID_SendReport>
			HAL_Delay(30);
 8000704:	201e      	movs	r0, #30
 8000706:	f000 fa37 	bl	8000b78 <HAL_Delay>
			WriteButtonState(serviced, i);
 800070a:	697b      	ldr	r3, [r7, #20]
 800070c:	0019      	movs	r1, r3
 800070e:	2002      	movs	r0, #2
 8000710:	f000 f824 	bl	800075c <WriteButtonState>
			uint8_t HID_buffer[8] = {0};
 8000714:	210c      	movs	r1, #12
 8000716:	187b      	adds	r3, r7, r1
 8000718:	2200      	movs	r2, #0
 800071a:	601a      	str	r2, [r3, #0]
 800071c:	2200      	movs	r2, #0
 800071e:	605a      	str	r2, [r3, #4]
			USBD_HID_SendReport(hUsbDeviceFS, HID_buffer, PACKET_SIZE); // Send a null packet
 8000720:	1879      	adds	r1, r7, r1
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	2208      	movs	r2, #8
 8000726:	0018      	movs	r0, r3
 8000728:	f005 fa88 	bl	8005c3c <USBD_HID_SendReport>
			HAL_Delay(200);
 800072c:	20c8      	movs	r0, #200	; 0xc8
 800072e:	f000 fa23 	bl	8000b78 <HAL_Delay>
			counter++;
 8000732:	4b09      	ldr	r3, [pc, #36]	; (8000758 <WriteOutputToPC+0x80>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	1c5a      	adds	r2, r3, #1
 8000738:	4b07      	ldr	r3, [pc, #28]	; (8000758 <WriteOutputToPC+0x80>)
 800073a:	601a      	str	r2, [r3, #0]
	for (int i = 0 ; i<NUM_BUTTONS; i++)
 800073c:	697b      	ldr	r3, [r7, #20]
 800073e:	3301      	adds	r3, #1
 8000740:	617b      	str	r3, [r7, #20]
 8000742:	697b      	ldr	r3, [r7, #20]
 8000744:	2b07      	cmp	r3, #7
 8000746:	ddce      	ble.n	80006e6 <WriteOutputToPC+0xe>
	}




}
 8000748:	46c0      	nop			; (mov r8, r8)
 800074a:	46c0      	nop			; (mov r8, r8)
 800074c:	46bd      	mov	sp, r7
 800074e:	b006      	add	sp, #24
 8000750:	bd80      	pop	{r7, pc}
 8000752:	46c0      	nop			; (mov r8, r8)
 8000754:	20000190 	.word	0x20000190
 8000758:	20000174 	.word	0x20000174

0800075c <WriteButtonState>:

void WriteButtonState(state val, int buttonIndex)
{
 800075c:	b590      	push	{r4, r7, lr}
 800075e:	b085      	sub	sp, #20
 8000760:	af00      	add	r7, sp, #0
 8000762:	0002      	movs	r2, r0
 8000764:	6039      	str	r1, [r7, #0]
 8000766:	1dfb      	adds	r3, r7, #7
 8000768:	701a      	strb	r2, [r3, #0]
	switch (buttonIndex)
 800076a:	683b      	ldr	r3, [r7, #0]
 800076c:	2b07      	cmp	r3, #7
 800076e:	dc0d      	bgt.n	800078c <WriteButtonState+0x30>
 8000770:	683b      	ldr	r3, [r7, #0]
 8000772:	2b00      	cmp	r3, #0
 8000774:	da00      	bge.n	8000778 <WriteButtonState+0x1c>
 8000776:	e0b1      	b.n	80008dc <WriteButtonState+0x180>
 8000778:	683b      	ldr	r3, [r7, #0]
 800077a:	2b07      	cmp	r3, #7
 800077c:	d900      	bls.n	8000780 <WriteButtonState+0x24>
 800077e:	e0ad      	b.n	80008dc <WriteButtonState+0x180>
 8000780:	683b      	ldr	r3, [r7, #0]
 8000782:	009a      	lsls	r2, r3, #2
 8000784:	4b57      	ldr	r3, [pc, #348]	; (80008e4 <WriteButtonState+0x188>)
 8000786:	18d3      	adds	r3, r2, r3
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	469f      	mov	pc, r3
 800078c:	683b      	ldr	r3, [r7, #0]
 800078e:	4a56      	ldr	r2, [pc, #344]	; (80008e8 <WriteButtonState+0x18c>)
 8000790:	4293      	cmp	r3, r2
 8000792:	d100      	bne.n	8000796 <WriteButtonState+0x3a>
 8000794:	e090      	b.n	80008b8 <WriteButtonState+0x15c>
			WriteButtonState(val, i);
		}
		break;
	}

	return;
 8000796:	e0a1      	b.n	80008dc <WriteButtonState+0x180>
		globalState.buttonPressed.buttonState_1 = val;
 8000798:	1dfb      	adds	r3, r7, #7
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	2203      	movs	r2, #3
 800079e:	4013      	ands	r3, r2
 80007a0:	b2d9      	uxtb	r1, r3
 80007a2:	4b52      	ldr	r3, [pc, #328]	; (80008ec <WriteButtonState+0x190>)
 80007a4:	2240      	movs	r2, #64	; 0x40
 80007a6:	2003      	movs	r0, #3
 80007a8:	4001      	ands	r1, r0
 80007aa:	000c      	movs	r4, r1
 80007ac:	5c99      	ldrb	r1, [r3, r2]
 80007ae:	2003      	movs	r0, #3
 80007b0:	4381      	bics	r1, r0
 80007b2:	1c08      	adds	r0, r1, #0
 80007b4:	1c21      	adds	r1, r4, #0
 80007b6:	4301      	orrs	r1, r0
 80007b8:	5499      	strb	r1, [r3, r2]
		break;
 80007ba:	e08e      	b.n	80008da <WriteButtonState+0x17e>
		globalState.buttonPressed.buttonState_2 = val;
 80007bc:	1dfb      	adds	r3, r7, #7
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	2203      	movs	r2, #3
 80007c2:	4013      	ands	r3, r2
 80007c4:	b2d9      	uxtb	r1, r3
 80007c6:	4b49      	ldr	r3, [pc, #292]	; (80008ec <WriteButtonState+0x190>)
 80007c8:	2240      	movs	r2, #64	; 0x40
 80007ca:	2003      	movs	r0, #3
 80007cc:	4001      	ands	r1, r0
 80007ce:	008c      	lsls	r4, r1, #2
 80007d0:	5c99      	ldrb	r1, [r3, r2]
 80007d2:	200c      	movs	r0, #12
 80007d4:	4381      	bics	r1, r0
 80007d6:	1c08      	adds	r0, r1, #0
 80007d8:	1c21      	adds	r1, r4, #0
 80007da:	4301      	orrs	r1, r0
 80007dc:	5499      	strb	r1, [r3, r2]
		break;
 80007de:	e07c      	b.n	80008da <WriteButtonState+0x17e>
		globalState.buttonPressed.buttonState_3 = val;
 80007e0:	1dfb      	adds	r3, r7, #7
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	2203      	movs	r2, #3
 80007e6:	4013      	ands	r3, r2
 80007e8:	b2d9      	uxtb	r1, r3
 80007ea:	4b40      	ldr	r3, [pc, #256]	; (80008ec <WriteButtonState+0x190>)
 80007ec:	2240      	movs	r2, #64	; 0x40
 80007ee:	2003      	movs	r0, #3
 80007f0:	4001      	ands	r1, r0
 80007f2:	010c      	lsls	r4, r1, #4
 80007f4:	5c99      	ldrb	r1, [r3, r2]
 80007f6:	2030      	movs	r0, #48	; 0x30
 80007f8:	4381      	bics	r1, r0
 80007fa:	1c08      	adds	r0, r1, #0
 80007fc:	1c21      	adds	r1, r4, #0
 80007fe:	4301      	orrs	r1, r0
 8000800:	5499      	strb	r1, [r3, r2]
		break;
 8000802:	e06a      	b.n	80008da <WriteButtonState+0x17e>
		globalState.buttonPressed.buttonState_4 = val;
 8000804:	1dfb      	adds	r3, r7, #7
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	2203      	movs	r2, #3
 800080a:	4013      	ands	r3, r2
 800080c:	b2d9      	uxtb	r1, r3
 800080e:	4b37      	ldr	r3, [pc, #220]	; (80008ec <WriteButtonState+0x190>)
 8000810:	2240      	movs	r2, #64	; 0x40
 8000812:	018c      	lsls	r4, r1, #6
 8000814:	5c99      	ldrb	r1, [r3, r2]
 8000816:	203f      	movs	r0, #63	; 0x3f
 8000818:	4001      	ands	r1, r0
 800081a:	1c08      	adds	r0, r1, #0
 800081c:	1c21      	adds	r1, r4, #0
 800081e:	4301      	orrs	r1, r0
 8000820:	5499      	strb	r1, [r3, r2]
		break;
 8000822:	e05a      	b.n	80008da <WriteButtonState+0x17e>
		globalState.buttonPressed.buttonState_5 = val;
 8000824:	1dfb      	adds	r3, r7, #7
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	2203      	movs	r2, #3
 800082a:	4013      	ands	r3, r2
 800082c:	b2da      	uxtb	r2, r3
 800082e:	4b2f      	ldr	r3, [pc, #188]	; (80008ec <WriteButtonState+0x190>)
 8000830:	2140      	movs	r1, #64	; 0x40
 8000832:	185b      	adds	r3, r3, r1
 8000834:	2103      	movs	r1, #3
 8000836:	400a      	ands	r2, r1
 8000838:	0010      	movs	r0, r2
 800083a:	785a      	ldrb	r2, [r3, #1]
 800083c:	2103      	movs	r1, #3
 800083e:	438a      	bics	r2, r1
 8000840:	1c11      	adds	r1, r2, #0
 8000842:	1c02      	adds	r2, r0, #0
 8000844:	430a      	orrs	r2, r1
 8000846:	705a      	strb	r2, [r3, #1]
		break;
 8000848:	e047      	b.n	80008da <WriteButtonState+0x17e>
		globalState.buttonPressed.buttonState_6 = val;
 800084a:	1dfb      	adds	r3, r7, #7
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	2203      	movs	r2, #3
 8000850:	4013      	ands	r3, r2
 8000852:	b2da      	uxtb	r2, r3
 8000854:	4b25      	ldr	r3, [pc, #148]	; (80008ec <WriteButtonState+0x190>)
 8000856:	2140      	movs	r1, #64	; 0x40
 8000858:	185b      	adds	r3, r3, r1
 800085a:	2103      	movs	r1, #3
 800085c:	400a      	ands	r2, r1
 800085e:	0090      	lsls	r0, r2, #2
 8000860:	785a      	ldrb	r2, [r3, #1]
 8000862:	210c      	movs	r1, #12
 8000864:	438a      	bics	r2, r1
 8000866:	1c11      	adds	r1, r2, #0
 8000868:	1c02      	adds	r2, r0, #0
 800086a:	430a      	orrs	r2, r1
 800086c:	705a      	strb	r2, [r3, #1]
		break;
 800086e:	e034      	b.n	80008da <WriteButtonState+0x17e>
		globalState.buttonPressed.buttonState_7 = val;
 8000870:	1dfb      	adds	r3, r7, #7
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	2203      	movs	r2, #3
 8000876:	4013      	ands	r3, r2
 8000878:	b2da      	uxtb	r2, r3
 800087a:	4b1c      	ldr	r3, [pc, #112]	; (80008ec <WriteButtonState+0x190>)
 800087c:	2140      	movs	r1, #64	; 0x40
 800087e:	185b      	adds	r3, r3, r1
 8000880:	2103      	movs	r1, #3
 8000882:	400a      	ands	r2, r1
 8000884:	0110      	lsls	r0, r2, #4
 8000886:	785a      	ldrb	r2, [r3, #1]
 8000888:	2130      	movs	r1, #48	; 0x30
 800088a:	438a      	bics	r2, r1
 800088c:	1c11      	adds	r1, r2, #0
 800088e:	1c02      	adds	r2, r0, #0
 8000890:	430a      	orrs	r2, r1
 8000892:	705a      	strb	r2, [r3, #1]
		break;
 8000894:	e021      	b.n	80008da <WriteButtonState+0x17e>
		globalState.buttonPressed.buttonState_8 = val;
 8000896:	1dfb      	adds	r3, r7, #7
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	2203      	movs	r2, #3
 800089c:	4013      	ands	r3, r2
 800089e:	b2da      	uxtb	r2, r3
 80008a0:	4b12      	ldr	r3, [pc, #72]	; (80008ec <WriteButtonState+0x190>)
 80008a2:	2140      	movs	r1, #64	; 0x40
 80008a4:	185b      	adds	r3, r3, r1
 80008a6:	0190      	lsls	r0, r2, #6
 80008a8:	785a      	ldrb	r2, [r3, #1]
 80008aa:	213f      	movs	r1, #63	; 0x3f
 80008ac:	400a      	ands	r2, r1
 80008ae:	1c11      	adds	r1, r2, #0
 80008b0:	1c02      	adds	r2, r0, #0
 80008b2:	430a      	orrs	r2, r1
 80008b4:	705a      	strb	r2, [r3, #1]
		break;
 80008b6:	e010      	b.n	80008da <WriteButtonState+0x17e>
		for (int i = 0 ; i < NUM_BUTTONS ; i++)
 80008b8:	2300      	movs	r3, #0
 80008ba:	60fb      	str	r3, [r7, #12]
 80008bc:	e009      	b.n	80008d2 <WriteButtonState+0x176>
			WriteButtonState(val, i);
 80008be:	68fa      	ldr	r2, [r7, #12]
 80008c0:	1dfb      	adds	r3, r7, #7
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	0011      	movs	r1, r2
 80008c6:	0018      	movs	r0, r3
 80008c8:	f7ff ff48 	bl	800075c <WriteButtonState>
		for (int i = 0 ; i < NUM_BUTTONS ; i++)
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	3301      	adds	r3, #1
 80008d0:	60fb      	str	r3, [r7, #12]
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	2b07      	cmp	r3, #7
 80008d6:	ddf2      	ble.n	80008be <WriteButtonState+0x162>
		break;
 80008d8:	46c0      	nop			; (mov r8, r8)
	return;
 80008da:	46c0      	nop			; (mov r8, r8)
 80008dc:	46c0      	nop			; (mov r8, r8)
}
 80008de:	46bd      	mov	sp, r7
 80008e0:	b005      	add	sp, #20
 80008e2:	bd90      	pop	{r4, r7, pc}
 80008e4:	08007adc 	.word	0x08007adc
 80008e8:	0000ffff 	.word	0x0000ffff
 80008ec:	20000190 	.word	0x20000190

080008f0 <ReadButtonState>:

state ReadButtonState(int buttonIndex)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b084      	sub	sp, #16
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	2b07      	cmp	r3, #7
 80008fc:	d855      	bhi.n	80009aa <ReadButtonState+0xba>
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	009a      	lsls	r2, r3, #2
 8000902:	4b2d      	ldr	r3, [pc, #180]	; (80009b8 <ReadButtonState+0xc8>)
 8000904:	18d3      	adds	r3, r2, r3
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	469f      	mov	pc, r3
	state val;
	switch (buttonIndex)
	{
	case 0:
		val = globalState.buttonPressed.buttonState_1;
 800090a:	4b2c      	ldr	r3, [pc, #176]	; (80009bc <ReadButtonState+0xcc>)
 800090c:	2240      	movs	r2, #64	; 0x40
 800090e:	5c9b      	ldrb	r3, [r3, r2]
 8000910:	079b      	lsls	r3, r3, #30
 8000912:	0f9b      	lsrs	r3, r3, #30
 8000914:	b2da      	uxtb	r2, r3
 8000916:	230f      	movs	r3, #15
 8000918:	18fb      	adds	r3, r7, r3
 800091a:	701a      	strb	r2, [r3, #0]
		break;
 800091c:	e045      	b.n	80009aa <ReadButtonState+0xba>
	case 1:
		val = globalState.buttonPressed.buttonState_2;
 800091e:	4b27      	ldr	r3, [pc, #156]	; (80009bc <ReadButtonState+0xcc>)
 8000920:	2240      	movs	r2, #64	; 0x40
 8000922:	5c9b      	ldrb	r3, [r3, r2]
 8000924:	071b      	lsls	r3, r3, #28
 8000926:	0f9b      	lsrs	r3, r3, #30
 8000928:	b2da      	uxtb	r2, r3
 800092a:	230f      	movs	r3, #15
 800092c:	18fb      	adds	r3, r7, r3
 800092e:	701a      	strb	r2, [r3, #0]
		break;
 8000930:	e03b      	b.n	80009aa <ReadButtonState+0xba>
	case 2:
		val = globalState.buttonPressed.buttonState_3;
 8000932:	4b22      	ldr	r3, [pc, #136]	; (80009bc <ReadButtonState+0xcc>)
 8000934:	2240      	movs	r2, #64	; 0x40
 8000936:	5c9b      	ldrb	r3, [r3, r2]
 8000938:	069b      	lsls	r3, r3, #26
 800093a:	0f9b      	lsrs	r3, r3, #30
 800093c:	b2da      	uxtb	r2, r3
 800093e:	230f      	movs	r3, #15
 8000940:	18fb      	adds	r3, r7, r3
 8000942:	701a      	strb	r2, [r3, #0]
		break;
 8000944:	e031      	b.n	80009aa <ReadButtonState+0xba>
	case 3:
		val = globalState.buttonPressed.buttonState_4;
 8000946:	4b1d      	ldr	r3, [pc, #116]	; (80009bc <ReadButtonState+0xcc>)
 8000948:	2240      	movs	r2, #64	; 0x40
 800094a:	5c9b      	ldrb	r3, [r3, r2]
 800094c:	061b      	lsls	r3, r3, #24
 800094e:	0f9b      	lsrs	r3, r3, #30
 8000950:	b2da      	uxtb	r2, r3
 8000952:	230f      	movs	r3, #15
 8000954:	18fb      	adds	r3, r7, r3
 8000956:	701a      	strb	r2, [r3, #0]
		break;
 8000958:	e027      	b.n	80009aa <ReadButtonState+0xba>
	case 4:
		val = globalState.buttonPressed.buttonState_5;
 800095a:	4b18      	ldr	r3, [pc, #96]	; (80009bc <ReadButtonState+0xcc>)
 800095c:	2241      	movs	r2, #65	; 0x41
 800095e:	5c9b      	ldrb	r3, [r3, r2]
 8000960:	079b      	lsls	r3, r3, #30
 8000962:	0f9b      	lsrs	r3, r3, #30
 8000964:	b2da      	uxtb	r2, r3
 8000966:	230f      	movs	r3, #15
 8000968:	18fb      	adds	r3, r7, r3
 800096a:	701a      	strb	r2, [r3, #0]
		break;
 800096c:	e01d      	b.n	80009aa <ReadButtonState+0xba>
	case 5:
		val = globalState.buttonPressed.buttonState_6;
 800096e:	4b13      	ldr	r3, [pc, #76]	; (80009bc <ReadButtonState+0xcc>)
 8000970:	2241      	movs	r2, #65	; 0x41
 8000972:	5c9b      	ldrb	r3, [r3, r2]
 8000974:	071b      	lsls	r3, r3, #28
 8000976:	0f9b      	lsrs	r3, r3, #30
 8000978:	b2da      	uxtb	r2, r3
 800097a:	230f      	movs	r3, #15
 800097c:	18fb      	adds	r3, r7, r3
 800097e:	701a      	strb	r2, [r3, #0]
		break;
 8000980:	e013      	b.n	80009aa <ReadButtonState+0xba>
	case 6:
		val = globalState.buttonPressed.buttonState_7;
 8000982:	4b0e      	ldr	r3, [pc, #56]	; (80009bc <ReadButtonState+0xcc>)
 8000984:	2241      	movs	r2, #65	; 0x41
 8000986:	5c9b      	ldrb	r3, [r3, r2]
 8000988:	069b      	lsls	r3, r3, #26
 800098a:	0f9b      	lsrs	r3, r3, #30
 800098c:	b2da      	uxtb	r2, r3
 800098e:	230f      	movs	r3, #15
 8000990:	18fb      	adds	r3, r7, r3
 8000992:	701a      	strb	r2, [r3, #0]
		break;
 8000994:	e009      	b.n	80009aa <ReadButtonState+0xba>
	case 7:
		val = globalState.buttonPressed.buttonState_8;
 8000996:	4b09      	ldr	r3, [pc, #36]	; (80009bc <ReadButtonState+0xcc>)
 8000998:	2241      	movs	r2, #65	; 0x41
 800099a:	5c9b      	ldrb	r3, [r3, r2]
 800099c:	061b      	lsls	r3, r3, #24
 800099e:	0f9b      	lsrs	r3, r3, #30
 80009a0:	b2da      	uxtb	r2, r3
 80009a2:	230f      	movs	r3, #15
 80009a4:	18fb      	adds	r3, r7, r3
 80009a6:	701a      	strb	r2, [r3, #0]
		break;
 80009a8:	46c0      	nop			; (mov r8, r8)
	}
	return val;
 80009aa:	230f      	movs	r3, #15
 80009ac:	18fb      	adds	r3, r7, r3
 80009ae:	781b      	ldrb	r3, [r3, #0]
}
 80009b0:	0018      	movs	r0, r3
 80009b2:	46bd      	mov	sp, r7
 80009b4:	b004      	add	sp, #16
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	08007afc 	.word	0x08007afc
 80009bc:	20000190 	.word	0x20000190

080009c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009c6:	4b0f      	ldr	r3, [pc, #60]	; (8000a04 <HAL_MspInit+0x44>)
 80009c8:	699a      	ldr	r2, [r3, #24]
 80009ca:	4b0e      	ldr	r3, [pc, #56]	; (8000a04 <HAL_MspInit+0x44>)
 80009cc:	2101      	movs	r1, #1
 80009ce:	430a      	orrs	r2, r1
 80009d0:	619a      	str	r2, [r3, #24]
 80009d2:	4b0c      	ldr	r3, [pc, #48]	; (8000a04 <HAL_MspInit+0x44>)
 80009d4:	699b      	ldr	r3, [r3, #24]
 80009d6:	2201      	movs	r2, #1
 80009d8:	4013      	ands	r3, r2
 80009da:	607b      	str	r3, [r7, #4]
 80009dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009de:	4b09      	ldr	r3, [pc, #36]	; (8000a04 <HAL_MspInit+0x44>)
 80009e0:	69da      	ldr	r2, [r3, #28]
 80009e2:	4b08      	ldr	r3, [pc, #32]	; (8000a04 <HAL_MspInit+0x44>)
 80009e4:	2180      	movs	r1, #128	; 0x80
 80009e6:	0549      	lsls	r1, r1, #21
 80009e8:	430a      	orrs	r2, r1
 80009ea:	61da      	str	r2, [r3, #28]
 80009ec:	4b05      	ldr	r3, [pc, #20]	; (8000a04 <HAL_MspInit+0x44>)
 80009ee:	69da      	ldr	r2, [r3, #28]
 80009f0:	2380      	movs	r3, #128	; 0x80
 80009f2:	055b      	lsls	r3, r3, #21
 80009f4:	4013      	ands	r3, r2
 80009f6:	603b      	str	r3, [r7, #0]
 80009f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009fa:	46c0      	nop			; (mov r8, r8)
 80009fc:	46bd      	mov	sp, r7
 80009fe:	b002      	add	sp, #8
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	46c0      	nop			; (mov r8, r8)
 8000a04:	40021000 	.word	0x40021000

08000a08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a0c:	e7fe      	b.n	8000a0c <NMI_Handler+0x4>

08000a0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a0e:	b580      	push	{r7, lr}
 8000a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a12:	e7fe      	b.n	8000a12 <HardFault_Handler+0x4>

08000a14 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a18:	46c0      	nop			; (mov r8, r8)
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}

08000a1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a1e:	b580      	push	{r7, lr}
 8000a20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a22:	46c0      	nop			; (mov r8, r8)
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}

08000a28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a2c:	f000 f888 	bl	8000b40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a30:	46c0      	nop			; (mov r8, r8)
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
	...

08000a38 <USB_IRQHandler>:

/**
  * @brief This function handles USB global interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000a3c:	4b03      	ldr	r3, [pc, #12]	; (8000a4c <USB_IRQHandler+0x14>)
 8000a3e:	0018      	movs	r0, r3
 8000a40:	f000 fc84 	bl	800134c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8000a44:	46c0      	nop			; (mov r8, r8)
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	46c0      	nop			; (mov r8, r8)
 8000a4c:	2000069c 	.word	0x2000069c

08000a50 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000a54:	46c0      	nop			; (mov r8, r8)
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
	...

08000a5c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a5c:	480d      	ldr	r0, [pc, #52]	; (8000a94 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a5e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a60:	480d      	ldr	r0, [pc, #52]	; (8000a98 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a62:	490e      	ldr	r1, [pc, #56]	; (8000a9c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a64:	4a0e      	ldr	r2, [pc, #56]	; (8000aa0 <LoopForever+0xe>)
  movs r3, #0
 8000a66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a68:	e002      	b.n	8000a70 <LoopCopyDataInit>

08000a6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a6e:	3304      	adds	r3, #4

08000a70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a74:	d3f9      	bcc.n	8000a6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a76:	4a0b      	ldr	r2, [pc, #44]	; (8000aa4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a78:	4c0b      	ldr	r4, [pc, #44]	; (8000aa8 <LoopForever+0x16>)
  movs r3, #0
 8000a7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a7c:	e001      	b.n	8000a82 <LoopFillZerobss>

08000a7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a80:	3204      	adds	r2, #4

08000a82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a84:	d3fb      	bcc.n	8000a7e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000a86:	f7ff ffe3 	bl	8000a50 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000a8a:	f006 ffbb 	bl	8007a04 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a8e:	f7ff fcb9 	bl	8000404 <main>

08000a92 <LoopForever>:

LoopForever:
    b LoopForever
 8000a92:	e7fe      	b.n	8000a92 <LoopForever>
  ldr   r0, =_estack
 8000a94:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000a98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a9c:	20000158 	.word	0x20000158
  ldr r2, =_sidata
 8000aa0:	08007b94 	.word	0x08007b94
  ldr r2, =_sbss
 8000aa4:	20000158 	.word	0x20000158
  ldr r4, =_ebss
 8000aa8:	20000990 	.word	0x20000990

08000aac <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000aac:	e7fe      	b.n	8000aac <ADC1_COMP_IRQHandler>
	...

08000ab0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ab4:	4b07      	ldr	r3, [pc, #28]	; (8000ad4 <HAL_Init+0x24>)
 8000ab6:	681a      	ldr	r2, [r3, #0]
 8000ab8:	4b06      	ldr	r3, [pc, #24]	; (8000ad4 <HAL_Init+0x24>)
 8000aba:	2110      	movs	r1, #16
 8000abc:	430a      	orrs	r2, r1
 8000abe:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000ac0:	2000      	movs	r0, #0
 8000ac2:	f000 f809 	bl	8000ad8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ac6:	f7ff ff7b 	bl	80009c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000aca:	2300      	movs	r3, #0
}
 8000acc:	0018      	movs	r0, r3
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	46c0      	nop			; (mov r8, r8)
 8000ad4:	40022000 	.word	0x40022000

08000ad8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ad8:	b590      	push	{r4, r7, lr}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ae0:	4b14      	ldr	r3, [pc, #80]	; (8000b34 <HAL_InitTick+0x5c>)
 8000ae2:	681c      	ldr	r4, [r3, #0]
 8000ae4:	4b14      	ldr	r3, [pc, #80]	; (8000b38 <HAL_InitTick+0x60>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	0019      	movs	r1, r3
 8000aea:	23fa      	movs	r3, #250	; 0xfa
 8000aec:	0098      	lsls	r0, r3, #2
 8000aee:	f7ff fb0b 	bl	8000108 <__udivsi3>
 8000af2:	0003      	movs	r3, r0
 8000af4:	0019      	movs	r1, r3
 8000af6:	0020      	movs	r0, r4
 8000af8:	f7ff fb06 	bl	8000108 <__udivsi3>
 8000afc:	0003      	movs	r3, r0
 8000afe:	0018      	movs	r0, r3
 8000b00:	f000 f92f 	bl	8000d62 <HAL_SYSTICK_Config>
 8000b04:	1e03      	subs	r3, r0, #0
 8000b06:	d001      	beq.n	8000b0c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	e00f      	b.n	8000b2c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	2b03      	cmp	r3, #3
 8000b10:	d80b      	bhi.n	8000b2a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b12:	6879      	ldr	r1, [r7, #4]
 8000b14:	2301      	movs	r3, #1
 8000b16:	425b      	negs	r3, r3
 8000b18:	2200      	movs	r2, #0
 8000b1a:	0018      	movs	r0, r3
 8000b1c:	f000 f8fc 	bl	8000d18 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b20:	4b06      	ldr	r3, [pc, #24]	; (8000b3c <HAL_InitTick+0x64>)
 8000b22:	687a      	ldr	r2, [r7, #4]
 8000b24:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000b26:	2300      	movs	r3, #0
 8000b28:	e000      	b.n	8000b2c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000b2a:	2301      	movs	r3, #1
}
 8000b2c:	0018      	movs	r0, r3
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	b003      	add	sp, #12
 8000b32:	bd90      	pop	{r4, r7, pc}
 8000b34:	20000000 	.word	0x20000000
 8000b38:	20000008 	.word	0x20000008
 8000b3c:	20000004 	.word	0x20000004

08000b40 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b44:	4b05      	ldr	r3, [pc, #20]	; (8000b5c <HAL_IncTick+0x1c>)
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	001a      	movs	r2, r3
 8000b4a:	4b05      	ldr	r3, [pc, #20]	; (8000b60 <HAL_IncTick+0x20>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	18d2      	adds	r2, r2, r3
 8000b50:	4b03      	ldr	r3, [pc, #12]	; (8000b60 <HAL_IncTick+0x20>)
 8000b52:	601a      	str	r2, [r3, #0]
}
 8000b54:	46c0      	nop			; (mov r8, r8)
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	46c0      	nop			; (mov r8, r8)
 8000b5c:	20000008 	.word	0x20000008
 8000b60:	200001d4 	.word	0x200001d4

08000b64 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  return uwTick;
 8000b68:	4b02      	ldr	r3, [pc, #8]	; (8000b74 <HAL_GetTick+0x10>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
}
 8000b6c:	0018      	movs	r0, r3
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	46c0      	nop			; (mov r8, r8)
 8000b74:	200001d4 	.word	0x200001d4

08000b78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b084      	sub	sp, #16
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b80:	f7ff fff0 	bl	8000b64 <HAL_GetTick>
 8000b84:	0003      	movs	r3, r0
 8000b86:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	3301      	adds	r3, #1
 8000b90:	d005      	beq.n	8000b9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b92:	4b0a      	ldr	r3, [pc, #40]	; (8000bbc <HAL_Delay+0x44>)
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	001a      	movs	r2, r3
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	189b      	adds	r3, r3, r2
 8000b9c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000b9e:	46c0      	nop			; (mov r8, r8)
 8000ba0:	f7ff ffe0 	bl	8000b64 <HAL_GetTick>
 8000ba4:	0002      	movs	r2, r0
 8000ba6:	68bb      	ldr	r3, [r7, #8]
 8000ba8:	1ad3      	subs	r3, r2, r3
 8000baa:	68fa      	ldr	r2, [r7, #12]
 8000bac:	429a      	cmp	r2, r3
 8000bae:	d8f7      	bhi.n	8000ba0 <HAL_Delay+0x28>
  {
  }
}
 8000bb0:	46c0      	nop			; (mov r8, r8)
 8000bb2:	46c0      	nop			; (mov r8, r8)
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	b004      	add	sp, #16
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	46c0      	nop			; (mov r8, r8)
 8000bbc:	20000008 	.word	0x20000008

08000bc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	0002      	movs	r2, r0
 8000bc8:	1dfb      	adds	r3, r7, #7
 8000bca:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000bcc:	1dfb      	adds	r3, r7, #7
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	2b7f      	cmp	r3, #127	; 0x7f
 8000bd2:	d809      	bhi.n	8000be8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bd4:	1dfb      	adds	r3, r7, #7
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	001a      	movs	r2, r3
 8000bda:	231f      	movs	r3, #31
 8000bdc:	401a      	ands	r2, r3
 8000bde:	4b04      	ldr	r3, [pc, #16]	; (8000bf0 <__NVIC_EnableIRQ+0x30>)
 8000be0:	2101      	movs	r1, #1
 8000be2:	4091      	lsls	r1, r2
 8000be4:	000a      	movs	r2, r1
 8000be6:	601a      	str	r2, [r3, #0]
  }
}
 8000be8:	46c0      	nop			; (mov r8, r8)
 8000bea:	46bd      	mov	sp, r7
 8000bec:	b002      	add	sp, #8
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	e000e100 	.word	0xe000e100

08000bf4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bf4:	b590      	push	{r4, r7, lr}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	0002      	movs	r2, r0
 8000bfc:	6039      	str	r1, [r7, #0]
 8000bfe:	1dfb      	adds	r3, r7, #7
 8000c00:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000c02:	1dfb      	adds	r3, r7, #7
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	2b7f      	cmp	r3, #127	; 0x7f
 8000c08:	d828      	bhi.n	8000c5c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c0a:	4a2f      	ldr	r2, [pc, #188]	; (8000cc8 <__NVIC_SetPriority+0xd4>)
 8000c0c:	1dfb      	adds	r3, r7, #7
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	b25b      	sxtb	r3, r3
 8000c12:	089b      	lsrs	r3, r3, #2
 8000c14:	33c0      	adds	r3, #192	; 0xc0
 8000c16:	009b      	lsls	r3, r3, #2
 8000c18:	589b      	ldr	r3, [r3, r2]
 8000c1a:	1dfa      	adds	r2, r7, #7
 8000c1c:	7812      	ldrb	r2, [r2, #0]
 8000c1e:	0011      	movs	r1, r2
 8000c20:	2203      	movs	r2, #3
 8000c22:	400a      	ands	r2, r1
 8000c24:	00d2      	lsls	r2, r2, #3
 8000c26:	21ff      	movs	r1, #255	; 0xff
 8000c28:	4091      	lsls	r1, r2
 8000c2a:	000a      	movs	r2, r1
 8000c2c:	43d2      	mvns	r2, r2
 8000c2e:	401a      	ands	r2, r3
 8000c30:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	019b      	lsls	r3, r3, #6
 8000c36:	22ff      	movs	r2, #255	; 0xff
 8000c38:	401a      	ands	r2, r3
 8000c3a:	1dfb      	adds	r3, r7, #7
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	0018      	movs	r0, r3
 8000c40:	2303      	movs	r3, #3
 8000c42:	4003      	ands	r3, r0
 8000c44:	00db      	lsls	r3, r3, #3
 8000c46:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c48:	481f      	ldr	r0, [pc, #124]	; (8000cc8 <__NVIC_SetPriority+0xd4>)
 8000c4a:	1dfb      	adds	r3, r7, #7
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	b25b      	sxtb	r3, r3
 8000c50:	089b      	lsrs	r3, r3, #2
 8000c52:	430a      	orrs	r2, r1
 8000c54:	33c0      	adds	r3, #192	; 0xc0
 8000c56:	009b      	lsls	r3, r3, #2
 8000c58:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000c5a:	e031      	b.n	8000cc0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c5c:	4a1b      	ldr	r2, [pc, #108]	; (8000ccc <__NVIC_SetPriority+0xd8>)
 8000c5e:	1dfb      	adds	r3, r7, #7
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	0019      	movs	r1, r3
 8000c64:	230f      	movs	r3, #15
 8000c66:	400b      	ands	r3, r1
 8000c68:	3b08      	subs	r3, #8
 8000c6a:	089b      	lsrs	r3, r3, #2
 8000c6c:	3306      	adds	r3, #6
 8000c6e:	009b      	lsls	r3, r3, #2
 8000c70:	18d3      	adds	r3, r2, r3
 8000c72:	3304      	adds	r3, #4
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	1dfa      	adds	r2, r7, #7
 8000c78:	7812      	ldrb	r2, [r2, #0]
 8000c7a:	0011      	movs	r1, r2
 8000c7c:	2203      	movs	r2, #3
 8000c7e:	400a      	ands	r2, r1
 8000c80:	00d2      	lsls	r2, r2, #3
 8000c82:	21ff      	movs	r1, #255	; 0xff
 8000c84:	4091      	lsls	r1, r2
 8000c86:	000a      	movs	r2, r1
 8000c88:	43d2      	mvns	r2, r2
 8000c8a:	401a      	ands	r2, r3
 8000c8c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	019b      	lsls	r3, r3, #6
 8000c92:	22ff      	movs	r2, #255	; 0xff
 8000c94:	401a      	ands	r2, r3
 8000c96:	1dfb      	adds	r3, r7, #7
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	0018      	movs	r0, r3
 8000c9c:	2303      	movs	r3, #3
 8000c9e:	4003      	ands	r3, r0
 8000ca0:	00db      	lsls	r3, r3, #3
 8000ca2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ca4:	4809      	ldr	r0, [pc, #36]	; (8000ccc <__NVIC_SetPriority+0xd8>)
 8000ca6:	1dfb      	adds	r3, r7, #7
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	001c      	movs	r4, r3
 8000cac:	230f      	movs	r3, #15
 8000cae:	4023      	ands	r3, r4
 8000cb0:	3b08      	subs	r3, #8
 8000cb2:	089b      	lsrs	r3, r3, #2
 8000cb4:	430a      	orrs	r2, r1
 8000cb6:	3306      	adds	r3, #6
 8000cb8:	009b      	lsls	r3, r3, #2
 8000cba:	18c3      	adds	r3, r0, r3
 8000cbc:	3304      	adds	r3, #4
 8000cbe:	601a      	str	r2, [r3, #0]
}
 8000cc0:	46c0      	nop			; (mov r8, r8)
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	b003      	add	sp, #12
 8000cc6:	bd90      	pop	{r4, r7, pc}
 8000cc8:	e000e100 	.word	0xe000e100
 8000ccc:	e000ed00 	.word	0xe000ed00

08000cd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	1e5a      	subs	r2, r3, #1
 8000cdc:	2380      	movs	r3, #128	; 0x80
 8000cde:	045b      	lsls	r3, r3, #17
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	d301      	bcc.n	8000ce8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	e010      	b.n	8000d0a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ce8:	4b0a      	ldr	r3, [pc, #40]	; (8000d14 <SysTick_Config+0x44>)
 8000cea:	687a      	ldr	r2, [r7, #4]
 8000cec:	3a01      	subs	r2, #1
 8000cee:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	425b      	negs	r3, r3
 8000cf4:	2103      	movs	r1, #3
 8000cf6:	0018      	movs	r0, r3
 8000cf8:	f7ff ff7c 	bl	8000bf4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cfc:	4b05      	ldr	r3, [pc, #20]	; (8000d14 <SysTick_Config+0x44>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d02:	4b04      	ldr	r3, [pc, #16]	; (8000d14 <SysTick_Config+0x44>)
 8000d04:	2207      	movs	r2, #7
 8000d06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d08:	2300      	movs	r3, #0
}
 8000d0a:	0018      	movs	r0, r3
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	b002      	add	sp, #8
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	46c0      	nop			; (mov r8, r8)
 8000d14:	e000e010 	.word	0xe000e010

08000d18 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b084      	sub	sp, #16
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	60b9      	str	r1, [r7, #8]
 8000d20:	607a      	str	r2, [r7, #4]
 8000d22:	210f      	movs	r1, #15
 8000d24:	187b      	adds	r3, r7, r1
 8000d26:	1c02      	adds	r2, r0, #0
 8000d28:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000d2a:	68ba      	ldr	r2, [r7, #8]
 8000d2c:	187b      	adds	r3, r7, r1
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	b25b      	sxtb	r3, r3
 8000d32:	0011      	movs	r1, r2
 8000d34:	0018      	movs	r0, r3
 8000d36:	f7ff ff5d 	bl	8000bf4 <__NVIC_SetPriority>
}
 8000d3a:	46c0      	nop			; (mov r8, r8)
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	b004      	add	sp, #16
 8000d40:	bd80      	pop	{r7, pc}

08000d42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d42:	b580      	push	{r7, lr}
 8000d44:	b082      	sub	sp, #8
 8000d46:	af00      	add	r7, sp, #0
 8000d48:	0002      	movs	r2, r0
 8000d4a:	1dfb      	adds	r3, r7, #7
 8000d4c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d4e:	1dfb      	adds	r3, r7, #7
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	b25b      	sxtb	r3, r3
 8000d54:	0018      	movs	r0, r3
 8000d56:	f7ff ff33 	bl	8000bc0 <__NVIC_EnableIRQ>
}
 8000d5a:	46c0      	nop			; (mov r8, r8)
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	b002      	add	sp, #8
 8000d60:	bd80      	pop	{r7, pc}

08000d62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d62:	b580      	push	{r7, lr}
 8000d64:	b082      	sub	sp, #8
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	0018      	movs	r0, r3
 8000d6e:	f7ff ffaf 	bl	8000cd0 <SysTick_Config>
 8000d72:	0003      	movs	r3, r0
}
 8000d74:	0018      	movs	r0, r3
 8000d76:	46bd      	mov	sp, r7
 8000d78:	b002      	add	sp, #8
 8000d7a:	bd80      	pop	{r7, pc}

08000d7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b086      	sub	sp, #24
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
 8000d84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d86:	2300      	movs	r3, #0
 8000d88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d8a:	e155      	b.n	8001038 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	2101      	movs	r1, #1
 8000d92:	697a      	ldr	r2, [r7, #20]
 8000d94:	4091      	lsls	r1, r2
 8000d96:	000a      	movs	r2, r1
 8000d98:	4013      	ands	r3, r2
 8000d9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d100      	bne.n	8000da4 <HAL_GPIO_Init+0x28>
 8000da2:	e146      	b.n	8001032 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	2203      	movs	r2, #3
 8000daa:	4013      	ands	r3, r2
 8000dac:	2b01      	cmp	r3, #1
 8000dae:	d005      	beq.n	8000dbc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	2203      	movs	r2, #3
 8000db6:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000db8:	2b02      	cmp	r3, #2
 8000dba:	d130      	bne.n	8000e1e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	689b      	ldr	r3, [r3, #8]
 8000dc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	005b      	lsls	r3, r3, #1
 8000dc6:	2203      	movs	r2, #3
 8000dc8:	409a      	lsls	r2, r3
 8000dca:	0013      	movs	r3, r2
 8000dcc:	43da      	mvns	r2, r3
 8000dce:	693b      	ldr	r3, [r7, #16]
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	68da      	ldr	r2, [r3, #12]
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	005b      	lsls	r3, r3, #1
 8000ddc:	409a      	lsls	r2, r3
 8000dde:	0013      	movs	r3, r2
 8000de0:	693a      	ldr	r2, [r7, #16]
 8000de2:	4313      	orrs	r3, r2
 8000de4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	693a      	ldr	r2, [r7, #16]
 8000dea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000df2:	2201      	movs	r2, #1
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	409a      	lsls	r2, r3
 8000df8:	0013      	movs	r3, r2
 8000dfa:	43da      	mvns	r2, r3
 8000dfc:	693b      	ldr	r3, [r7, #16]
 8000dfe:	4013      	ands	r3, r2
 8000e00:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	091b      	lsrs	r3, r3, #4
 8000e08:	2201      	movs	r2, #1
 8000e0a:	401a      	ands	r2, r3
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	409a      	lsls	r2, r3
 8000e10:	0013      	movs	r3, r2
 8000e12:	693a      	ldr	r2, [r7, #16]
 8000e14:	4313      	orrs	r3, r2
 8000e16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	693a      	ldr	r2, [r7, #16]
 8000e1c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	2203      	movs	r2, #3
 8000e24:	4013      	ands	r3, r2
 8000e26:	2b03      	cmp	r3, #3
 8000e28:	d017      	beq.n	8000e5a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	68db      	ldr	r3, [r3, #12]
 8000e2e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	005b      	lsls	r3, r3, #1
 8000e34:	2203      	movs	r2, #3
 8000e36:	409a      	lsls	r2, r3
 8000e38:	0013      	movs	r3, r2
 8000e3a:	43da      	mvns	r2, r3
 8000e3c:	693b      	ldr	r3, [r7, #16]
 8000e3e:	4013      	ands	r3, r2
 8000e40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	689a      	ldr	r2, [r3, #8]
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	005b      	lsls	r3, r3, #1
 8000e4a:	409a      	lsls	r2, r3
 8000e4c:	0013      	movs	r3, r2
 8000e4e:	693a      	ldr	r2, [r7, #16]
 8000e50:	4313      	orrs	r3, r2
 8000e52:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	693a      	ldr	r2, [r7, #16]
 8000e58:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	2203      	movs	r2, #3
 8000e60:	4013      	ands	r3, r2
 8000e62:	2b02      	cmp	r3, #2
 8000e64:	d123      	bne.n	8000eae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	08da      	lsrs	r2, r3, #3
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	3208      	adds	r2, #8
 8000e6e:	0092      	lsls	r2, r2, #2
 8000e70:	58d3      	ldr	r3, [r2, r3]
 8000e72:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	2207      	movs	r2, #7
 8000e78:	4013      	ands	r3, r2
 8000e7a:	009b      	lsls	r3, r3, #2
 8000e7c:	220f      	movs	r2, #15
 8000e7e:	409a      	lsls	r2, r3
 8000e80:	0013      	movs	r3, r2
 8000e82:	43da      	mvns	r2, r3
 8000e84:	693b      	ldr	r3, [r7, #16]
 8000e86:	4013      	ands	r3, r2
 8000e88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	691a      	ldr	r2, [r3, #16]
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	2107      	movs	r1, #7
 8000e92:	400b      	ands	r3, r1
 8000e94:	009b      	lsls	r3, r3, #2
 8000e96:	409a      	lsls	r2, r3
 8000e98:	0013      	movs	r3, r2
 8000e9a:	693a      	ldr	r2, [r7, #16]
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	08da      	lsrs	r2, r3, #3
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	3208      	adds	r2, #8
 8000ea8:	0092      	lsls	r2, r2, #2
 8000eaa:	6939      	ldr	r1, [r7, #16]
 8000eac:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	005b      	lsls	r3, r3, #1
 8000eb8:	2203      	movs	r2, #3
 8000eba:	409a      	lsls	r2, r3
 8000ebc:	0013      	movs	r3, r2
 8000ebe:	43da      	mvns	r2, r3
 8000ec0:	693b      	ldr	r3, [r7, #16]
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	2203      	movs	r2, #3
 8000ecc:	401a      	ands	r2, r3
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	005b      	lsls	r3, r3, #1
 8000ed2:	409a      	lsls	r2, r3
 8000ed4:	0013      	movs	r3, r2
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	693a      	ldr	r2, [r7, #16]
 8000ee0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	685a      	ldr	r2, [r3, #4]
 8000ee6:	23c0      	movs	r3, #192	; 0xc0
 8000ee8:	029b      	lsls	r3, r3, #10
 8000eea:	4013      	ands	r3, r2
 8000eec:	d100      	bne.n	8000ef0 <HAL_GPIO_Init+0x174>
 8000eee:	e0a0      	b.n	8001032 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ef0:	4b57      	ldr	r3, [pc, #348]	; (8001050 <HAL_GPIO_Init+0x2d4>)
 8000ef2:	699a      	ldr	r2, [r3, #24]
 8000ef4:	4b56      	ldr	r3, [pc, #344]	; (8001050 <HAL_GPIO_Init+0x2d4>)
 8000ef6:	2101      	movs	r1, #1
 8000ef8:	430a      	orrs	r2, r1
 8000efa:	619a      	str	r2, [r3, #24]
 8000efc:	4b54      	ldr	r3, [pc, #336]	; (8001050 <HAL_GPIO_Init+0x2d4>)
 8000efe:	699b      	ldr	r3, [r3, #24]
 8000f00:	2201      	movs	r2, #1
 8000f02:	4013      	ands	r3, r2
 8000f04:	60bb      	str	r3, [r7, #8]
 8000f06:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f08:	4a52      	ldr	r2, [pc, #328]	; (8001054 <HAL_GPIO_Init+0x2d8>)
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	089b      	lsrs	r3, r3, #2
 8000f0e:	3302      	adds	r3, #2
 8000f10:	009b      	lsls	r3, r3, #2
 8000f12:	589b      	ldr	r3, [r3, r2]
 8000f14:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	2203      	movs	r2, #3
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	009b      	lsls	r3, r3, #2
 8000f1e:	220f      	movs	r2, #15
 8000f20:	409a      	lsls	r2, r3
 8000f22:	0013      	movs	r3, r2
 8000f24:	43da      	mvns	r2, r3
 8000f26:	693b      	ldr	r3, [r7, #16]
 8000f28:	4013      	ands	r3, r2
 8000f2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f2c:	687a      	ldr	r2, [r7, #4]
 8000f2e:	2390      	movs	r3, #144	; 0x90
 8000f30:	05db      	lsls	r3, r3, #23
 8000f32:	429a      	cmp	r2, r3
 8000f34:	d019      	beq.n	8000f6a <HAL_GPIO_Init+0x1ee>
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	4a47      	ldr	r2, [pc, #284]	; (8001058 <HAL_GPIO_Init+0x2dc>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d013      	beq.n	8000f66 <HAL_GPIO_Init+0x1ea>
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4a46      	ldr	r2, [pc, #280]	; (800105c <HAL_GPIO_Init+0x2e0>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d00d      	beq.n	8000f62 <HAL_GPIO_Init+0x1e6>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4a45      	ldr	r2, [pc, #276]	; (8001060 <HAL_GPIO_Init+0x2e4>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d007      	beq.n	8000f5e <HAL_GPIO_Init+0x1e2>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4a44      	ldr	r2, [pc, #272]	; (8001064 <HAL_GPIO_Init+0x2e8>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d101      	bne.n	8000f5a <HAL_GPIO_Init+0x1de>
 8000f56:	2304      	movs	r3, #4
 8000f58:	e008      	b.n	8000f6c <HAL_GPIO_Init+0x1f0>
 8000f5a:	2305      	movs	r3, #5
 8000f5c:	e006      	b.n	8000f6c <HAL_GPIO_Init+0x1f0>
 8000f5e:	2303      	movs	r3, #3
 8000f60:	e004      	b.n	8000f6c <HAL_GPIO_Init+0x1f0>
 8000f62:	2302      	movs	r3, #2
 8000f64:	e002      	b.n	8000f6c <HAL_GPIO_Init+0x1f0>
 8000f66:	2301      	movs	r3, #1
 8000f68:	e000      	b.n	8000f6c <HAL_GPIO_Init+0x1f0>
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	697a      	ldr	r2, [r7, #20]
 8000f6e:	2103      	movs	r1, #3
 8000f70:	400a      	ands	r2, r1
 8000f72:	0092      	lsls	r2, r2, #2
 8000f74:	4093      	lsls	r3, r2
 8000f76:	693a      	ldr	r2, [r7, #16]
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f7c:	4935      	ldr	r1, [pc, #212]	; (8001054 <HAL_GPIO_Init+0x2d8>)
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	089b      	lsrs	r3, r3, #2
 8000f82:	3302      	adds	r3, #2
 8000f84:	009b      	lsls	r3, r3, #2
 8000f86:	693a      	ldr	r2, [r7, #16]
 8000f88:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f8a:	4b37      	ldr	r3, [pc, #220]	; (8001068 <HAL_GPIO_Init+0x2ec>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	43da      	mvns	r2, r3
 8000f94:	693b      	ldr	r3, [r7, #16]
 8000f96:	4013      	ands	r3, r2
 8000f98:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	685a      	ldr	r2, [r3, #4]
 8000f9e:	2380      	movs	r3, #128	; 0x80
 8000fa0:	025b      	lsls	r3, r3, #9
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	d003      	beq.n	8000fae <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	4313      	orrs	r3, r2
 8000fac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000fae:	4b2e      	ldr	r3, [pc, #184]	; (8001068 <HAL_GPIO_Init+0x2ec>)
 8000fb0:	693a      	ldr	r2, [r7, #16]
 8000fb2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000fb4:	4b2c      	ldr	r3, [pc, #176]	; (8001068 <HAL_GPIO_Init+0x2ec>)
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	43da      	mvns	r2, r3
 8000fbe:	693b      	ldr	r3, [r7, #16]
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685a      	ldr	r2, [r3, #4]
 8000fc8:	2380      	movs	r3, #128	; 0x80
 8000fca:	029b      	lsls	r3, r3, #10
 8000fcc:	4013      	ands	r3, r2
 8000fce:	d003      	beq.n	8000fd8 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8000fd0:	693a      	ldr	r2, [r7, #16]
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000fd8:	4b23      	ldr	r3, [pc, #140]	; (8001068 <HAL_GPIO_Init+0x2ec>)
 8000fda:	693a      	ldr	r2, [r7, #16]
 8000fdc:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fde:	4b22      	ldr	r3, [pc, #136]	; (8001068 <HAL_GPIO_Init+0x2ec>)
 8000fe0:	689b      	ldr	r3, [r3, #8]
 8000fe2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	43da      	mvns	r2, r3
 8000fe8:	693b      	ldr	r3, [r7, #16]
 8000fea:	4013      	ands	r3, r2
 8000fec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	685a      	ldr	r2, [r3, #4]
 8000ff2:	2380      	movs	r3, #128	; 0x80
 8000ff4:	035b      	lsls	r3, r3, #13
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	d003      	beq.n	8001002 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000ffa:	693a      	ldr	r2, [r7, #16]
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	4313      	orrs	r3, r2
 8001000:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001002:	4b19      	ldr	r3, [pc, #100]	; (8001068 <HAL_GPIO_Init+0x2ec>)
 8001004:	693a      	ldr	r2, [r7, #16]
 8001006:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001008:	4b17      	ldr	r3, [pc, #92]	; (8001068 <HAL_GPIO_Init+0x2ec>)
 800100a:	68db      	ldr	r3, [r3, #12]
 800100c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	43da      	mvns	r2, r3
 8001012:	693b      	ldr	r3, [r7, #16]
 8001014:	4013      	ands	r3, r2
 8001016:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	685a      	ldr	r2, [r3, #4]
 800101c:	2380      	movs	r3, #128	; 0x80
 800101e:	039b      	lsls	r3, r3, #14
 8001020:	4013      	ands	r3, r2
 8001022:	d003      	beq.n	800102c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001024:	693a      	ldr	r2, [r7, #16]
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	4313      	orrs	r3, r2
 800102a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800102c:	4b0e      	ldr	r3, [pc, #56]	; (8001068 <HAL_GPIO_Init+0x2ec>)
 800102e:	693a      	ldr	r2, [r7, #16]
 8001030:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	3301      	adds	r3, #1
 8001036:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	40da      	lsrs	r2, r3
 8001040:	1e13      	subs	r3, r2, #0
 8001042:	d000      	beq.n	8001046 <HAL_GPIO_Init+0x2ca>
 8001044:	e6a2      	b.n	8000d8c <HAL_GPIO_Init+0x10>
  } 
}
 8001046:	46c0      	nop			; (mov r8, r8)
 8001048:	46c0      	nop			; (mov r8, r8)
 800104a:	46bd      	mov	sp, r7
 800104c:	b006      	add	sp, #24
 800104e:	bd80      	pop	{r7, pc}
 8001050:	40021000 	.word	0x40021000
 8001054:	40010000 	.word	0x40010000
 8001058:	48000400 	.word	0x48000400
 800105c:	48000800 	.word	0x48000800
 8001060:	48000c00 	.word	0x48000c00
 8001064:	48001000 	.word	0x48001000
 8001068:	40010400 	.word	0x40010400

0800106c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	000a      	movs	r2, r1
 8001076:	1cbb      	adds	r3, r7, #2
 8001078:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	691b      	ldr	r3, [r3, #16]
 800107e:	1cba      	adds	r2, r7, #2
 8001080:	8812      	ldrh	r2, [r2, #0]
 8001082:	4013      	ands	r3, r2
 8001084:	d004      	beq.n	8001090 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001086:	230f      	movs	r3, #15
 8001088:	18fb      	adds	r3, r7, r3
 800108a:	2201      	movs	r2, #1
 800108c:	701a      	strb	r2, [r3, #0]
 800108e:	e003      	b.n	8001098 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001090:	230f      	movs	r3, #15
 8001092:	18fb      	adds	r3, r7, r3
 8001094:	2200      	movs	r2, #0
 8001096:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001098:	230f      	movs	r3, #15
 800109a:	18fb      	adds	r3, r7, r3
 800109c:	781b      	ldrb	r3, [r3, #0]
  }
 800109e:	0018      	movs	r0, r3
 80010a0:	46bd      	mov	sp, r7
 80010a2:	b004      	add	sp, #16
 80010a4:	bd80      	pop	{r7, pc}

080010a6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010a6:	b580      	push	{r7, lr}
 80010a8:	b082      	sub	sp, #8
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	6078      	str	r0, [r7, #4]
 80010ae:	0008      	movs	r0, r1
 80010b0:	0011      	movs	r1, r2
 80010b2:	1cbb      	adds	r3, r7, #2
 80010b4:	1c02      	adds	r2, r0, #0
 80010b6:	801a      	strh	r2, [r3, #0]
 80010b8:	1c7b      	adds	r3, r7, #1
 80010ba:	1c0a      	adds	r2, r1, #0
 80010bc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010be:	1c7b      	adds	r3, r7, #1
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d004      	beq.n	80010d0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010c6:	1cbb      	adds	r3, r7, #2
 80010c8:	881a      	ldrh	r2, [r3, #0]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80010ce:	e003      	b.n	80010d8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010d0:	1cbb      	adds	r3, r7, #2
 80010d2:	881a      	ldrh	r2, [r3, #0]
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80010d8:	46c0      	nop			; (mov r8, r8)
 80010da:	46bd      	mov	sp, r7
 80010dc:	b002      	add	sp, #8
 80010de:	bd80      	pop	{r7, pc}

080010e0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80010e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010e2:	b08b      	sub	sp, #44	; 0x2c
 80010e4:	af06      	add	r7, sp, #24
 80010e6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d101      	bne.n	80010f2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
 80010f0:	e0ff      	b.n	80012f2 <HAL_PCD_Init+0x212>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4a81      	ldr	r2, [pc, #516]	; (80012fc <HAL_PCD_Init+0x21c>)
 80010f6:	5c9b      	ldrb	r3, [r3, r2]
 80010f8:	b2db      	uxtb	r3, r3
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d108      	bne.n	8001110 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80010fe:	687a      	ldr	r2, [r7, #4]
 8001100:	23aa      	movs	r3, #170	; 0xaa
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	2100      	movs	r1, #0
 8001106:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	0018      	movs	r0, r3
 800110c:	f006 f946 	bl	800739c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	4a7a      	ldr	r2, [pc, #488]	; (80012fc <HAL_PCD_Init+0x21c>)
 8001114:	2103      	movs	r1, #3
 8001116:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	0018      	movs	r0, r3
 800111e:	f002 fc2d 	bl	800397c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001122:	230f      	movs	r3, #15
 8001124:	18fb      	adds	r3, r7, r3
 8001126:	2200      	movs	r2, #0
 8001128:	701a      	strb	r2, [r3, #0]
 800112a:	e058      	b.n	80011de <HAL_PCD_Init+0xfe>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800112c:	200f      	movs	r0, #15
 800112e:	183b      	adds	r3, r7, r0
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	6879      	ldr	r1, [r7, #4]
 8001134:	1c5a      	adds	r2, r3, #1
 8001136:	0013      	movs	r3, r2
 8001138:	009b      	lsls	r3, r3, #2
 800113a:	189b      	adds	r3, r3, r2
 800113c:	00db      	lsls	r3, r3, #3
 800113e:	18cb      	adds	r3, r1, r3
 8001140:	3301      	adds	r3, #1
 8001142:	2201      	movs	r2, #1
 8001144:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001146:	183b      	adds	r3, r7, r0
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	6879      	ldr	r1, [r7, #4]
 800114c:	1c5a      	adds	r2, r3, #1
 800114e:	0013      	movs	r3, r2
 8001150:	009b      	lsls	r3, r3, #2
 8001152:	189b      	adds	r3, r3, r2
 8001154:	00db      	lsls	r3, r3, #3
 8001156:	183a      	adds	r2, r7, r0
 8001158:	7812      	ldrb	r2, [r2, #0]
 800115a:	545a      	strb	r2, [r3, r1]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800115c:	0004      	movs	r4, r0
 800115e:	183b      	adds	r3, r7, r0
 8001160:	781a      	ldrb	r2, [r3, #0]
 8001162:	193b      	adds	r3, r7, r4
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	b298      	uxth	r0, r3
 8001168:	6879      	ldr	r1, [r7, #4]
 800116a:	0013      	movs	r3, r2
 800116c:	009b      	lsls	r3, r3, #2
 800116e:	189b      	adds	r3, r3, r2
 8001170:	00db      	lsls	r3, r3, #3
 8001172:	18cb      	adds	r3, r1, r3
 8001174:	3336      	adds	r3, #54	; 0x36
 8001176:	1c02      	adds	r2, r0, #0
 8001178:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800117a:	193b      	adds	r3, r7, r4
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	6879      	ldr	r1, [r7, #4]
 8001180:	1c5a      	adds	r2, r3, #1
 8001182:	0013      	movs	r3, r2
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	189b      	adds	r3, r3, r2
 8001188:	00db      	lsls	r3, r3, #3
 800118a:	18cb      	adds	r3, r1, r3
 800118c:	3303      	adds	r3, #3
 800118e:	2200      	movs	r2, #0
 8001190:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001192:	193b      	adds	r3, r7, r4
 8001194:	781a      	ldrb	r2, [r3, #0]
 8001196:	6879      	ldr	r1, [r7, #4]
 8001198:	0013      	movs	r3, r2
 800119a:	009b      	lsls	r3, r3, #2
 800119c:	189b      	adds	r3, r3, r2
 800119e:	00db      	lsls	r3, r3, #3
 80011a0:	18cb      	adds	r3, r1, r3
 80011a2:	3338      	adds	r3, #56	; 0x38
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80011a8:	193b      	adds	r3, r7, r4
 80011aa:	781a      	ldrb	r2, [r3, #0]
 80011ac:	6879      	ldr	r1, [r7, #4]
 80011ae:	0013      	movs	r3, r2
 80011b0:	009b      	lsls	r3, r3, #2
 80011b2:	189b      	adds	r3, r3, r2
 80011b4:	00db      	lsls	r3, r3, #3
 80011b6:	18cb      	adds	r3, r1, r3
 80011b8:	333c      	adds	r3, #60	; 0x3c
 80011ba:	2200      	movs	r2, #0
 80011bc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80011be:	193b      	adds	r3, r7, r4
 80011c0:	781a      	ldrb	r2, [r3, #0]
 80011c2:	6879      	ldr	r1, [r7, #4]
 80011c4:	0013      	movs	r3, r2
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	189b      	adds	r3, r3, r2
 80011ca:	00db      	lsls	r3, r3, #3
 80011cc:	18cb      	adds	r3, r1, r3
 80011ce:	3340      	adds	r3, #64	; 0x40
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011d4:	193b      	adds	r3, r7, r4
 80011d6:	781a      	ldrb	r2, [r3, #0]
 80011d8:	193b      	adds	r3, r7, r4
 80011da:	3201      	adds	r2, #1
 80011dc:	701a      	strb	r2, [r3, #0]
 80011de:	210f      	movs	r1, #15
 80011e0:	187b      	adds	r3, r7, r1
 80011e2:	781a      	ldrb	r2, [r3, #0]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	429a      	cmp	r2, r3
 80011ea:	d39f      	bcc.n	800112c <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011ec:	187b      	adds	r3, r7, r1
 80011ee:	2200      	movs	r2, #0
 80011f0:	701a      	strb	r2, [r3, #0]
 80011f2:	e056      	b.n	80012a2 <HAL_PCD_Init+0x1c2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80011f4:	240f      	movs	r4, #15
 80011f6:	193b      	adds	r3, r7, r4
 80011f8:	781a      	ldrb	r2, [r3, #0]
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	236a      	movs	r3, #106	; 0x6a
 80011fe:	33ff      	adds	r3, #255	; 0xff
 8001200:	0019      	movs	r1, r3
 8001202:	0013      	movs	r3, r2
 8001204:	009b      	lsls	r3, r3, #2
 8001206:	189b      	adds	r3, r3, r2
 8001208:	00db      	lsls	r3, r3, #3
 800120a:	18c3      	adds	r3, r0, r3
 800120c:	185b      	adds	r3, r3, r1
 800120e:	2200      	movs	r2, #0
 8001210:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001212:	193b      	adds	r3, r7, r4
 8001214:	781a      	ldrb	r2, [r3, #0]
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	23b4      	movs	r3, #180	; 0xb4
 800121a:	0059      	lsls	r1, r3, #1
 800121c:	0013      	movs	r3, r2
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	189b      	adds	r3, r3, r2
 8001222:	00db      	lsls	r3, r3, #3
 8001224:	18c3      	adds	r3, r0, r3
 8001226:	185b      	adds	r3, r3, r1
 8001228:	193a      	adds	r2, r7, r4
 800122a:	7812      	ldrb	r2, [r2, #0]
 800122c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800122e:	193b      	adds	r3, r7, r4
 8001230:	781a      	ldrb	r2, [r3, #0]
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	236c      	movs	r3, #108	; 0x6c
 8001236:	33ff      	adds	r3, #255	; 0xff
 8001238:	0019      	movs	r1, r3
 800123a:	0013      	movs	r3, r2
 800123c:	009b      	lsls	r3, r3, #2
 800123e:	189b      	adds	r3, r3, r2
 8001240:	00db      	lsls	r3, r3, #3
 8001242:	18c3      	adds	r3, r0, r3
 8001244:	185b      	adds	r3, r3, r1
 8001246:	2200      	movs	r2, #0
 8001248:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800124a:	193b      	adds	r3, r7, r4
 800124c:	781a      	ldrb	r2, [r3, #0]
 800124e:	6878      	ldr	r0, [r7, #4]
 8001250:	23bc      	movs	r3, #188	; 0xbc
 8001252:	0059      	lsls	r1, r3, #1
 8001254:	0013      	movs	r3, r2
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	189b      	adds	r3, r3, r2
 800125a:	00db      	lsls	r3, r3, #3
 800125c:	18c3      	adds	r3, r0, r3
 800125e:	185b      	adds	r3, r3, r1
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001264:	193b      	adds	r3, r7, r4
 8001266:	781a      	ldrb	r2, [r3, #0]
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	23be      	movs	r3, #190	; 0xbe
 800126c:	0059      	lsls	r1, r3, #1
 800126e:	0013      	movs	r3, r2
 8001270:	009b      	lsls	r3, r3, #2
 8001272:	189b      	adds	r3, r3, r2
 8001274:	00db      	lsls	r3, r3, #3
 8001276:	18c3      	adds	r3, r0, r3
 8001278:	185b      	adds	r3, r3, r1
 800127a:	2200      	movs	r2, #0
 800127c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800127e:	193b      	adds	r3, r7, r4
 8001280:	781a      	ldrb	r2, [r3, #0]
 8001282:	6878      	ldr	r0, [r7, #4]
 8001284:	23c0      	movs	r3, #192	; 0xc0
 8001286:	0059      	lsls	r1, r3, #1
 8001288:	0013      	movs	r3, r2
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	189b      	adds	r3, r3, r2
 800128e:	00db      	lsls	r3, r3, #3
 8001290:	18c3      	adds	r3, r0, r3
 8001292:	185b      	adds	r3, r3, r1
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001298:	193b      	adds	r3, r7, r4
 800129a:	781a      	ldrb	r2, [r3, #0]
 800129c:	193b      	adds	r3, r7, r4
 800129e:	3201      	adds	r2, #1
 80012a0:	701a      	strb	r2, [r3, #0]
 80012a2:	230f      	movs	r3, #15
 80012a4:	18fb      	adds	r3, r7, r3
 80012a6:	781a      	ldrb	r2, [r3, #0]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	429a      	cmp	r2, r3
 80012ae:	d3a1      	bcc.n	80011f4 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6818      	ldr	r0, [r3, #0]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	466a      	mov	r2, sp
 80012b8:	0011      	movs	r1, r2
 80012ba:	001a      	movs	r2, r3
 80012bc:	3210      	adds	r2, #16
 80012be:	ca70      	ldmia	r2!, {r4, r5, r6}
 80012c0:	c170      	stmia	r1!, {r4, r5, r6}
 80012c2:	ca30      	ldmia	r2!, {r4, r5}
 80012c4:	c130      	stmia	r1!, {r4, r5}
 80012c6:	6859      	ldr	r1, [r3, #4]
 80012c8:	689a      	ldr	r2, [r3, #8]
 80012ca:	68db      	ldr	r3, [r3, #12]
 80012cc:	f002 fb70 	bl	80039b0 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2224      	movs	r2, #36	; 0x24
 80012d4:	2100      	movs	r1, #0
 80012d6:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	4a08      	ldr	r2, [pc, #32]	; (80012fc <HAL_PCD_Init+0x21c>)
 80012dc:	2101      	movs	r1, #1
 80012de:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	69db      	ldr	r3, [r3, #28]
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d103      	bne.n	80012f0 <HAL_PCD_Init+0x210>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	0018      	movs	r0, r3
 80012ec:	f001 fd1c 	bl	8002d28 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80012f0:	2300      	movs	r3, #0
}
 80012f2:	0018      	movs	r0, r3
 80012f4:	46bd      	mov	sp, r7
 80012f6:	b005      	add	sp, #20
 80012f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012fa:	46c0      	nop			; (mov r8, r8)
 80012fc:	000002a9 	.word	0x000002a9

08001300 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001308:	687a      	ldr	r2, [r7, #4]
 800130a:	23aa      	movs	r3, #170	; 0xaa
 800130c:	009b      	lsls	r3, r3, #2
 800130e:	5cd3      	ldrb	r3, [r2, r3]
 8001310:	2b01      	cmp	r3, #1
 8001312:	d101      	bne.n	8001318 <HAL_PCD_Start+0x18>
 8001314:	2302      	movs	r3, #2
 8001316:	e014      	b.n	8001342 <HAL_PCD_Start+0x42>
 8001318:	687a      	ldr	r2, [r7, #4]
 800131a:	23aa      	movs	r3, #170	; 0xaa
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	2101      	movs	r1, #1
 8001320:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	0018      	movs	r0, r3
 8001328:	f002 fb12 	bl	8003950 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	0018      	movs	r0, r3
 8001332:	f004 fa6d 	bl	8005810 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001336:	687a      	ldr	r2, [r7, #4]
 8001338:	23aa      	movs	r3, #170	; 0xaa
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	2100      	movs	r1, #0
 800133e:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8001340:	2300      	movs	r3, #0
}
 8001342:	0018      	movs	r0, r3
 8001344:	46bd      	mov	sp, r7
 8001346:	b002      	add	sp, #8
 8001348:	bd80      	pop	{r7, pc}
	...

0800134c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	0018      	movs	r0, r3
 800135a:	f004 fa6f 	bl	800583c <USB_ReadInterrupts>
 800135e:	0002      	movs	r2, r0
 8001360:	2380      	movs	r3, #128	; 0x80
 8001362:	021b      	lsls	r3, r3, #8
 8001364:	401a      	ands	r2, r3
 8001366:	2380      	movs	r3, #128	; 0x80
 8001368:	021b      	lsls	r3, r3, #8
 800136a:	429a      	cmp	r2, r3
 800136c:	d103      	bne.n	8001376 <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	0018      	movs	r0, r3
 8001372:	f000 fba3 	bl	8001abc <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	0018      	movs	r0, r3
 800137c:	f004 fa5e 	bl	800583c <USB_ReadInterrupts>
 8001380:	0002      	movs	r2, r0
 8001382:	2380      	movs	r3, #128	; 0x80
 8001384:	00db      	lsls	r3, r3, #3
 8001386:	401a      	ands	r2, r3
 8001388:	2380      	movs	r3, #128	; 0x80
 800138a:	00db      	lsls	r3, r3, #3
 800138c:	429a      	cmp	r2, r3
 800138e:	d114      	bne.n	80013ba <HAL_PCD_IRQHandler+0x6e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	2244      	movs	r2, #68	; 0x44
 8001396:	5a9b      	ldrh	r3, [r3, r2]
 8001398:	b29a      	uxth	r2, r3
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	49a2      	ldr	r1, [pc, #648]	; (8001628 <HAL_PCD_IRQHandler+0x2dc>)
 80013a0:	400a      	ands	r2, r1
 80013a2:	b291      	uxth	r1, r2
 80013a4:	2244      	movs	r2, #68	; 0x44
 80013a6:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	0018      	movs	r0, r3
 80013ac:	f006 f881 	bl	80074b2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2100      	movs	r1, #0
 80013b4:	0018      	movs	r0, r3
 80013b6:	f000 f945 	bl	8001644 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	0018      	movs	r0, r3
 80013c0:	f004 fa3c 	bl	800583c <USB_ReadInterrupts>
 80013c4:	0002      	movs	r2, r0
 80013c6:	2380      	movs	r3, #128	; 0x80
 80013c8:	01db      	lsls	r3, r3, #7
 80013ca:	401a      	ands	r2, r3
 80013cc:	2380      	movs	r3, #128	; 0x80
 80013ce:	01db      	lsls	r3, r3, #7
 80013d0:	429a      	cmp	r2, r3
 80013d2:	d10b      	bne.n	80013ec <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	2244      	movs	r2, #68	; 0x44
 80013da:	5a9b      	ldrh	r3, [r3, r2]
 80013dc:	b29a      	uxth	r2, r3
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4992      	ldr	r1, [pc, #584]	; (800162c <HAL_PCD_IRQHandler+0x2e0>)
 80013e4:	400a      	ands	r2, r1
 80013e6:	b291      	uxth	r1, r2
 80013e8:	2244      	movs	r2, #68	; 0x44
 80013ea:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	0018      	movs	r0, r3
 80013f2:	f004 fa23 	bl	800583c <USB_ReadInterrupts>
 80013f6:	0002      	movs	r2, r0
 80013f8:	2380      	movs	r3, #128	; 0x80
 80013fa:	019b      	lsls	r3, r3, #6
 80013fc:	401a      	ands	r2, r3
 80013fe:	2380      	movs	r3, #128	; 0x80
 8001400:	019b      	lsls	r3, r3, #6
 8001402:	429a      	cmp	r2, r3
 8001404:	d10b      	bne.n	800141e <HAL_PCD_IRQHandler+0xd2>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	2244      	movs	r2, #68	; 0x44
 800140c:	5a9b      	ldrh	r3, [r3, r2]
 800140e:	b29a      	uxth	r2, r3
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4986      	ldr	r1, [pc, #536]	; (8001630 <HAL_PCD_IRQHandler+0x2e4>)
 8001416:	400a      	ands	r2, r1
 8001418:	b291      	uxth	r1, r2
 800141a:	2244      	movs	r2, #68	; 0x44
 800141c:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	0018      	movs	r0, r3
 8001424:	f004 fa0a 	bl	800583c <USB_ReadInterrupts>
 8001428:	0002      	movs	r2, r0
 800142a:	2380      	movs	r3, #128	; 0x80
 800142c:	015b      	lsls	r3, r3, #5
 800142e:	401a      	ands	r2, r3
 8001430:	2380      	movs	r3, #128	; 0x80
 8001432:	015b      	lsls	r3, r3, #5
 8001434:	429a      	cmp	r2, r3
 8001436:	d137      	bne.n	80014a8 <HAL_PCD_IRQHandler+0x15c>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	2240      	movs	r2, #64	; 0x40
 800143e:	5a9b      	ldrh	r3, [r3, r2]
 8001440:	b29a      	uxth	r2, r3
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	2104      	movs	r1, #4
 8001448:	438a      	bics	r2, r1
 800144a:	b291      	uxth	r1, r2
 800144c:	2240      	movs	r2, #64	; 0x40
 800144e:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	2240      	movs	r2, #64	; 0x40
 8001456:	5a9b      	ldrh	r3, [r3, r2]
 8001458:	b29a      	uxth	r2, r3
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	2108      	movs	r1, #8
 8001460:	438a      	bics	r2, r1
 8001462:	b291      	uxth	r1, r2
 8001464:	2240      	movs	r2, #64	; 0x40
 8001466:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 8001468:	687a      	ldr	r2, [r7, #4]
 800146a:	23b8      	movs	r3, #184	; 0xb8
 800146c:	009b      	lsls	r3, r3, #2
 800146e:	5cd3      	ldrb	r3, [r2, r3]
 8001470:	2b01      	cmp	r3, #1
 8001472:	d109      	bne.n	8001488 <HAL_PCD_IRQHandler+0x13c>
    {
      hpcd->LPM_State = LPM_L0;
 8001474:	687a      	ldr	r2, [r7, #4]
 8001476:	23b8      	movs	r3, #184	; 0xb8
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	2100      	movs	r1, #0
 800147c:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2100      	movs	r1, #0
 8001482:	0018      	movs	r0, r3
 8001484:	f001 fc7a 	bl	8002d7c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	0018      	movs	r0, r3
 800148c:	f006 f852 	bl	8007534 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	2244      	movs	r2, #68	; 0x44
 8001496:	5a9b      	ldrh	r3, [r3, r2]
 8001498:	b29a      	uxth	r2, r3
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4965      	ldr	r1, [pc, #404]	; (8001634 <HAL_PCD_IRQHandler+0x2e8>)
 80014a0:	400a      	ands	r2, r1
 80014a2:	b291      	uxth	r1, r2
 80014a4:	2244      	movs	r2, #68	; 0x44
 80014a6:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	0018      	movs	r0, r3
 80014ae:	f004 f9c5 	bl	800583c <USB_ReadInterrupts>
 80014b2:	0002      	movs	r2, r0
 80014b4:	2380      	movs	r3, #128	; 0x80
 80014b6:	011b      	lsls	r3, r3, #4
 80014b8:	401a      	ands	r2, r3
 80014ba:	2380      	movs	r3, #128	; 0x80
 80014bc:	011b      	lsls	r3, r3, #4
 80014be:	429a      	cmp	r2, r3
 80014c0:	d127      	bne.n	8001512 <HAL_PCD_IRQHandler+0x1c6>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	2240      	movs	r2, #64	; 0x40
 80014c8:	5a9b      	ldrh	r3, [r3, r2]
 80014ca:	b29a      	uxth	r2, r3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	2108      	movs	r1, #8
 80014d2:	430a      	orrs	r2, r1
 80014d4:	b291      	uxth	r1, r2
 80014d6:	2240      	movs	r2, #64	; 0x40
 80014d8:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	2244      	movs	r2, #68	; 0x44
 80014e0:	5a9b      	ldrh	r3, [r3, r2]
 80014e2:	b29a      	uxth	r2, r3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4953      	ldr	r1, [pc, #332]	; (8001638 <HAL_PCD_IRQHandler+0x2ec>)
 80014ea:	400a      	ands	r2, r1
 80014ec:	b291      	uxth	r1, r2
 80014ee:	2244      	movs	r2, #68	; 0x44
 80014f0:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	2240      	movs	r2, #64	; 0x40
 80014f8:	5a9b      	ldrh	r3, [r3, r2]
 80014fa:	b29a      	uxth	r2, r3
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	2104      	movs	r1, #4
 8001502:	430a      	orrs	r2, r1
 8001504:	b291      	uxth	r1, r2
 8001506:	2240      	movs	r2, #64	; 0x40
 8001508:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	0018      	movs	r0, r3
 800150e:	f005 fff5 	bl	80074fc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	0018      	movs	r0, r3
 8001518:	f004 f990 	bl	800583c <USB_ReadInterrupts>
 800151c:	0003      	movs	r3, r0
 800151e:	2280      	movs	r2, #128	; 0x80
 8001520:	4013      	ands	r3, r2
 8001522:	2b80      	cmp	r3, #128	; 0x80
 8001524:	d145      	bne.n	80015b2 <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	2244      	movs	r2, #68	; 0x44
 800152c:	5a9b      	ldrh	r3, [r3, r2]
 800152e:	b29a      	uxth	r2, r3
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	2180      	movs	r1, #128	; 0x80
 8001536:	438a      	bics	r2, r1
 8001538:	b291      	uxth	r1, r2
 800153a:	2244      	movs	r2, #68	; 0x44
 800153c:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 800153e:	687a      	ldr	r2, [r7, #4]
 8001540:	23b8      	movs	r3, #184	; 0xb8
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	5cd3      	ldrb	r3, [r2, r3]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d12f      	bne.n	80015aa <HAL_PCD_IRQHandler+0x25e>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	2240      	movs	r2, #64	; 0x40
 8001550:	5a9b      	ldrh	r3, [r3, r2]
 8001552:	b29a      	uxth	r2, r3
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	2104      	movs	r1, #4
 800155a:	430a      	orrs	r2, r1
 800155c:	b291      	uxth	r1, r2
 800155e:	2240      	movs	r2, #64	; 0x40
 8001560:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	2240      	movs	r2, #64	; 0x40
 8001568:	5a9b      	ldrh	r3, [r3, r2]
 800156a:	b29a      	uxth	r2, r3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	2108      	movs	r1, #8
 8001572:	430a      	orrs	r2, r1
 8001574:	b291      	uxth	r1, r2
 8001576:	2240      	movs	r2, #64	; 0x40
 8001578:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 800157a:	687a      	ldr	r2, [r7, #4]
 800157c:	23b8      	movs	r3, #184	; 0xb8
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	2101      	movs	r1, #1
 8001582:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	2254      	movs	r2, #84	; 0x54
 800158a:	5a9b      	ldrh	r3, [r3, r2]
 800158c:	b29b      	uxth	r3, r3
 800158e:	089b      	lsrs	r3, r3, #2
 8001590:	223c      	movs	r2, #60	; 0x3c
 8001592:	4013      	ands	r3, r2
 8001594:	0019      	movs	r1, r3
 8001596:	687a      	ldr	r2, [r7, #4]
 8001598:	23b9      	movs	r3, #185	; 0xb9
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2101      	movs	r1, #1
 80015a2:	0018      	movs	r0, r3
 80015a4:	f001 fbea 	bl	8002d7c <HAL_PCDEx_LPM_Callback>
 80015a8:	e003      	b.n	80015b2 <HAL_PCD_IRQHandler+0x266>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	0018      	movs	r0, r3
 80015ae:	f005 ffa5 	bl	80074fc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	0018      	movs	r0, r3
 80015b8:	f004 f940 	bl	800583c <USB_ReadInterrupts>
 80015bc:	0002      	movs	r2, r0
 80015be:	2380      	movs	r3, #128	; 0x80
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	401a      	ands	r2, r3
 80015c4:	2380      	movs	r3, #128	; 0x80
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d10f      	bne.n	80015ec <HAL_PCD_IRQHandler+0x2a0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	2244      	movs	r2, #68	; 0x44
 80015d2:	5a9b      	ldrh	r3, [r3, r2]
 80015d4:	b29a      	uxth	r2, r3
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4918      	ldr	r1, [pc, #96]	; (800163c <HAL_PCD_IRQHandler+0x2f0>)
 80015dc:	400a      	ands	r2, r1
 80015de:	b291      	uxth	r1, r2
 80015e0:	2244      	movs	r2, #68	; 0x44
 80015e2:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	0018      	movs	r0, r3
 80015e8:	f005 ff54 	bl	8007494 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	0018      	movs	r0, r3
 80015f2:	f004 f923 	bl	800583c <USB_ReadInterrupts>
 80015f6:	0002      	movs	r2, r0
 80015f8:	2380      	movs	r3, #128	; 0x80
 80015fa:	005b      	lsls	r3, r3, #1
 80015fc:	401a      	ands	r2, r3
 80015fe:	2380      	movs	r3, #128	; 0x80
 8001600:	005b      	lsls	r3, r3, #1
 8001602:	429a      	cmp	r2, r3
 8001604:	d10b      	bne.n	800161e <HAL_PCD_IRQHandler+0x2d2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	2244      	movs	r2, #68	; 0x44
 800160c:	5a9b      	ldrh	r3, [r3, r2]
 800160e:	b29a      	uxth	r2, r3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	490a      	ldr	r1, [pc, #40]	; (8001640 <HAL_PCD_IRQHandler+0x2f4>)
 8001616:	400a      	ands	r2, r1
 8001618:	b291      	uxth	r1, r2
 800161a:	2244      	movs	r2, #68	; 0x44
 800161c:	5299      	strh	r1, [r3, r2]
  }
}
 800161e:	46c0      	nop			; (mov r8, r8)
 8001620:	46bd      	mov	sp, r7
 8001622:	b002      	add	sp, #8
 8001624:	bd80      	pop	{r7, pc}
 8001626:	46c0      	nop			; (mov r8, r8)
 8001628:	fffffbff 	.word	0xfffffbff
 800162c:	ffffbfff 	.word	0xffffbfff
 8001630:	ffffdfff 	.word	0xffffdfff
 8001634:	ffffefff 	.word	0xffffefff
 8001638:	fffff7ff 	.word	0xfffff7ff
 800163c:	fffffdff 	.word	0xfffffdff
 8001640:	fffffeff 	.word	0xfffffeff

08001644 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
 800164c:	000a      	movs	r2, r1
 800164e:	1cfb      	adds	r3, r7, #3
 8001650:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8001652:	687a      	ldr	r2, [r7, #4]
 8001654:	23aa      	movs	r3, #170	; 0xaa
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	5cd3      	ldrb	r3, [r2, r3]
 800165a:	2b01      	cmp	r3, #1
 800165c:	d101      	bne.n	8001662 <HAL_PCD_SetAddress+0x1e>
 800165e:	2302      	movs	r3, #2
 8001660:	e017      	b.n	8001692 <HAL_PCD_SetAddress+0x4e>
 8001662:	687a      	ldr	r2, [r7, #4]
 8001664:	23aa      	movs	r3, #170	; 0xaa
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	2101      	movs	r1, #1
 800166a:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	1cfa      	adds	r2, r7, #3
 8001670:	2124      	movs	r1, #36	; 0x24
 8001672:	7812      	ldrb	r2, [r2, #0]
 8001674:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	1cfb      	adds	r3, r7, #3
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	0019      	movs	r1, r3
 8001680:	0010      	movs	r0, r2
 8001682:	f004 f8b1 	bl	80057e8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001686:	687a      	ldr	r2, [r7, #4]
 8001688:	23aa      	movs	r3, #170	; 0xaa
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	2100      	movs	r1, #0
 800168e:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8001690:	2300      	movs	r3, #0
}
 8001692:	0018      	movs	r0, r3
 8001694:	46bd      	mov	sp, r7
 8001696:	b002      	add	sp, #8
 8001698:	bd80      	pop	{r7, pc}

0800169a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800169a:	b590      	push	{r4, r7, lr}
 800169c:	b085      	sub	sp, #20
 800169e:	af00      	add	r7, sp, #0
 80016a0:	6078      	str	r0, [r7, #4]
 80016a2:	000c      	movs	r4, r1
 80016a4:	0010      	movs	r0, r2
 80016a6:	0019      	movs	r1, r3
 80016a8:	1cfb      	adds	r3, r7, #3
 80016aa:	1c22      	adds	r2, r4, #0
 80016ac:	701a      	strb	r2, [r3, #0]
 80016ae:	003b      	movs	r3, r7
 80016b0:	1c02      	adds	r2, r0, #0
 80016b2:	801a      	strh	r2, [r3, #0]
 80016b4:	1cbb      	adds	r3, r7, #2
 80016b6:	1c0a      	adds	r2, r1, #0
 80016b8:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 80016ba:	230b      	movs	r3, #11
 80016bc:	18fb      	adds	r3, r7, r3
 80016be:	2200      	movs	r2, #0
 80016c0:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80016c2:	1cfb      	adds	r3, r7, #3
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	b25b      	sxtb	r3, r3
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	da0f      	bge.n	80016ec <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80016cc:	1cfb      	adds	r3, r7, #3
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	2207      	movs	r2, #7
 80016d2:	4013      	ands	r3, r2
 80016d4:	1c5a      	adds	r2, r3, #1
 80016d6:	0013      	movs	r3, r2
 80016d8:	009b      	lsls	r3, r3, #2
 80016da:	189b      	adds	r3, r3, r2
 80016dc:	00db      	lsls	r3, r3, #3
 80016de:	687a      	ldr	r2, [r7, #4]
 80016e0:	18d3      	adds	r3, r2, r3
 80016e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	2201      	movs	r2, #1
 80016e8:	705a      	strb	r2, [r3, #1]
 80016ea:	e00f      	b.n	800170c <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80016ec:	1cfb      	adds	r3, r7, #3
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	2207      	movs	r2, #7
 80016f2:	401a      	ands	r2, r3
 80016f4:	0013      	movs	r3, r2
 80016f6:	009b      	lsls	r3, r3, #2
 80016f8:	189b      	adds	r3, r3, r2
 80016fa:	00db      	lsls	r3, r3, #3
 80016fc:	3369      	adds	r3, #105	; 0x69
 80016fe:	33ff      	adds	r3, #255	; 0xff
 8001700:	687a      	ldr	r2, [r7, #4]
 8001702:	18d3      	adds	r3, r2, r3
 8001704:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	2200      	movs	r2, #0
 800170a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800170c:	1cfb      	adds	r3, r7, #3
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	2207      	movs	r2, #7
 8001712:	4013      	ands	r3, r2
 8001714:	b2da      	uxtb	r2, r3
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800171a:	003b      	movs	r3, r7
 800171c:	881a      	ldrh	r2, [r3, #0]
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	1cba      	adds	r2, r7, #2
 8001726:	7812      	ldrb	r2, [r2, #0]
 8001728:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	785b      	ldrb	r3, [r3, #1]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d004      	beq.n	800173c <HAL_PCD_EP_Open+0xa2>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	b29a      	uxth	r2, r3
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800173c:	1cbb      	adds	r3, r7, #2
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	2b02      	cmp	r3, #2
 8001742:	d102      	bne.n	800174a <HAL_PCD_EP_Open+0xb0>
  {
    ep->data_pid_start = 0U;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	2200      	movs	r2, #0
 8001748:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800174a:	687a      	ldr	r2, [r7, #4]
 800174c:	23aa      	movs	r3, #170	; 0xaa
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	5cd3      	ldrb	r3, [r2, r3]
 8001752:	2b01      	cmp	r3, #1
 8001754:	d101      	bne.n	800175a <HAL_PCD_EP_Open+0xc0>
 8001756:	2302      	movs	r3, #2
 8001758:	e013      	b.n	8001782 <HAL_PCD_EP_Open+0xe8>
 800175a:	687a      	ldr	r2, [r7, #4]
 800175c:	23aa      	movs	r3, #170	; 0xaa
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	2101      	movs	r1, #1
 8001762:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	68fa      	ldr	r2, [r7, #12]
 800176a:	0011      	movs	r1, r2
 800176c:	0018      	movs	r0, r3
 800176e:	f002 f94b 	bl	8003a08 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001772:	687a      	ldr	r2, [r7, #4]
 8001774:	23aa      	movs	r3, #170	; 0xaa
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	2100      	movs	r1, #0
 800177a:	54d1      	strb	r1, [r2, r3]

  return ret;
 800177c:	230b      	movs	r3, #11
 800177e:	18fb      	adds	r3, r7, r3
 8001780:	781b      	ldrb	r3, [r3, #0]
}
 8001782:	0018      	movs	r0, r3
 8001784:	46bd      	mov	sp, r7
 8001786:	b005      	add	sp, #20
 8001788:	bd90      	pop	{r4, r7, pc}

0800178a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800178a:	b580      	push	{r7, lr}
 800178c:	b084      	sub	sp, #16
 800178e:	af00      	add	r7, sp, #0
 8001790:	6078      	str	r0, [r7, #4]
 8001792:	000a      	movs	r2, r1
 8001794:	1cfb      	adds	r3, r7, #3
 8001796:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001798:	1cfb      	adds	r3, r7, #3
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	b25b      	sxtb	r3, r3
 800179e:	2b00      	cmp	r3, #0
 80017a0:	da0f      	bge.n	80017c2 <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80017a2:	1cfb      	adds	r3, r7, #3
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	2207      	movs	r2, #7
 80017a8:	4013      	ands	r3, r2
 80017aa:	1c5a      	adds	r2, r3, #1
 80017ac:	0013      	movs	r3, r2
 80017ae:	009b      	lsls	r3, r3, #2
 80017b0:	189b      	adds	r3, r3, r2
 80017b2:	00db      	lsls	r3, r3, #3
 80017b4:	687a      	ldr	r2, [r7, #4]
 80017b6:	18d3      	adds	r3, r2, r3
 80017b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	2201      	movs	r2, #1
 80017be:	705a      	strb	r2, [r3, #1]
 80017c0:	e00f      	b.n	80017e2 <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80017c2:	1cfb      	adds	r3, r7, #3
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	2207      	movs	r2, #7
 80017c8:	401a      	ands	r2, r3
 80017ca:	0013      	movs	r3, r2
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	189b      	adds	r3, r3, r2
 80017d0:	00db      	lsls	r3, r3, #3
 80017d2:	3369      	adds	r3, #105	; 0x69
 80017d4:	33ff      	adds	r3, #255	; 0xff
 80017d6:	687a      	ldr	r2, [r7, #4]
 80017d8:	18d3      	adds	r3, r2, r3
 80017da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	2200      	movs	r2, #0
 80017e0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80017e2:	1cfb      	adds	r3, r7, #3
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	2207      	movs	r2, #7
 80017e8:	4013      	ands	r3, r2
 80017ea:	b2da      	uxtb	r2, r3
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80017f0:	687a      	ldr	r2, [r7, #4]
 80017f2:	23aa      	movs	r3, #170	; 0xaa
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	5cd3      	ldrb	r3, [r2, r3]
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d101      	bne.n	8001800 <HAL_PCD_EP_Close+0x76>
 80017fc:	2302      	movs	r3, #2
 80017fe:	e011      	b.n	8001824 <HAL_PCD_EP_Close+0x9a>
 8001800:	687a      	ldr	r2, [r7, #4]
 8001802:	23aa      	movs	r3, #170	; 0xaa
 8001804:	009b      	lsls	r3, r3, #2
 8001806:	2101      	movs	r1, #1
 8001808:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	68fa      	ldr	r2, [r7, #12]
 8001810:	0011      	movs	r1, r2
 8001812:	0018      	movs	r0, r3
 8001814:	f002 fc6c 	bl	80040f0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001818:	687a      	ldr	r2, [r7, #4]
 800181a:	23aa      	movs	r3, #170	; 0xaa
 800181c:	009b      	lsls	r3, r3, #2
 800181e:	2100      	movs	r1, #0
 8001820:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8001822:	2300      	movs	r3, #0
}
 8001824:	0018      	movs	r0, r3
 8001826:	46bd      	mov	sp, r7
 8001828:	b004      	add	sp, #16
 800182a:	bd80      	pop	{r7, pc}

0800182c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b086      	sub	sp, #24
 8001830:	af00      	add	r7, sp, #0
 8001832:	60f8      	str	r0, [r7, #12]
 8001834:	607a      	str	r2, [r7, #4]
 8001836:	603b      	str	r3, [r7, #0]
 8001838:	200b      	movs	r0, #11
 800183a:	183b      	adds	r3, r7, r0
 800183c:	1c0a      	adds	r2, r1, #0
 800183e:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001840:	0001      	movs	r1, r0
 8001842:	187b      	adds	r3, r7, r1
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	2207      	movs	r2, #7
 8001848:	401a      	ands	r2, r3
 800184a:	0013      	movs	r3, r2
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	189b      	adds	r3, r3, r2
 8001850:	00db      	lsls	r3, r3, #3
 8001852:	3369      	adds	r3, #105	; 0x69
 8001854:	33ff      	adds	r3, #255	; 0xff
 8001856:	68fa      	ldr	r2, [r7, #12]
 8001858:	18d3      	adds	r3, r2, r3
 800185a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	687a      	ldr	r2, [r7, #4]
 8001860:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	683a      	ldr	r2, [r7, #0]
 8001866:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	2200      	movs	r2, #0
 800186c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	2200      	movs	r2, #0
 8001872:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001874:	187b      	adds	r3, r7, r1
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	2207      	movs	r2, #7
 800187a:	4013      	ands	r3, r2
 800187c:	b2da      	uxtb	r2, r3
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001882:	187b      	adds	r3, r7, r1
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	2207      	movs	r2, #7
 8001888:	4013      	ands	r3, r2
 800188a:	d107      	bne.n	800189c <HAL_PCD_EP_Receive+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	697a      	ldr	r2, [r7, #20]
 8001892:	0011      	movs	r1, r2
 8001894:	0018      	movs	r0, r3
 8001896:	f002 fdeb 	bl	8004470 <USB_EPStartXfer>
 800189a:	e006      	b.n	80018aa <HAL_PCD_EP_Receive+0x7e>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	697a      	ldr	r2, [r7, #20]
 80018a2:	0011      	movs	r1, r2
 80018a4:	0018      	movs	r0, r3
 80018a6:	f002 fde3 	bl	8004470 <USB_EPStartXfer>
  }

  return HAL_OK;
 80018aa:	2300      	movs	r3, #0
}
 80018ac:	0018      	movs	r0, r3
 80018ae:	46bd      	mov	sp, r7
 80018b0:	b006      	add	sp, #24
 80018b2:	bd80      	pop	{r7, pc}

080018b4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b086      	sub	sp, #24
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	60f8      	str	r0, [r7, #12]
 80018bc:	607a      	str	r2, [r7, #4]
 80018be:	603b      	str	r3, [r7, #0]
 80018c0:	200b      	movs	r0, #11
 80018c2:	183b      	adds	r3, r7, r0
 80018c4:	1c0a      	adds	r2, r1, #0
 80018c6:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018c8:	183b      	adds	r3, r7, r0
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	2207      	movs	r2, #7
 80018ce:	4013      	ands	r3, r2
 80018d0:	1c5a      	adds	r2, r3, #1
 80018d2:	0013      	movs	r3, r2
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	189b      	adds	r3, r3, r2
 80018d8:	00db      	lsls	r3, r3, #3
 80018da:	68fa      	ldr	r2, [r7, #12]
 80018dc:	18d3      	adds	r3, r2, r3
 80018de:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	687a      	ldr	r2, [r7, #4]
 80018e4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	683a      	ldr	r2, [r7, #0]
 80018ea:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	2224      	movs	r2, #36	; 0x24
 80018f0:	2101      	movs	r1, #1
 80018f2:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	683a      	ldr	r2, [r7, #0]
 80018f8:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	2200      	movs	r2, #0
 80018fe:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	2201      	movs	r2, #1
 8001904:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001906:	183b      	adds	r3, r7, r0
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	2207      	movs	r2, #7
 800190c:	4013      	ands	r3, r2
 800190e:	b2da      	uxtb	r2, r3
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001914:	183b      	adds	r3, r7, r0
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	2207      	movs	r2, #7
 800191a:	4013      	ands	r3, r2
 800191c:	d107      	bne.n	800192e <HAL_PCD_EP_Transmit+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	697a      	ldr	r2, [r7, #20]
 8001924:	0011      	movs	r1, r2
 8001926:	0018      	movs	r0, r3
 8001928:	f002 fda2 	bl	8004470 <USB_EPStartXfer>
 800192c:	e006      	b.n	800193c <HAL_PCD_EP_Transmit+0x88>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	697a      	ldr	r2, [r7, #20]
 8001934:	0011      	movs	r1, r2
 8001936:	0018      	movs	r0, r3
 8001938:	f002 fd9a 	bl	8004470 <USB_EPStartXfer>
  }

  return HAL_OK;
 800193c:	2300      	movs	r3, #0
}
 800193e:	0018      	movs	r0, r3
 8001940:	46bd      	mov	sp, r7
 8001942:	b006      	add	sp, #24
 8001944:	bd80      	pop	{r7, pc}

08001946 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001946:	b580      	push	{r7, lr}
 8001948:	b084      	sub	sp, #16
 800194a:	af00      	add	r7, sp, #0
 800194c:	6078      	str	r0, [r7, #4]
 800194e:	000a      	movs	r2, r1
 8001950:	1cfb      	adds	r3, r7, #3
 8001952:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001954:	1cfb      	adds	r3, r7, #3
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	2207      	movs	r2, #7
 800195a:	401a      	ands	r2, r3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	429a      	cmp	r2, r3
 8001962:	d901      	bls.n	8001968 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	e046      	b.n	80019f6 <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001968:	1cfb      	adds	r3, r7, #3
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	b25b      	sxtb	r3, r3
 800196e:	2b00      	cmp	r3, #0
 8001970:	da0f      	bge.n	8001992 <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001972:	1cfb      	adds	r3, r7, #3
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	2207      	movs	r2, #7
 8001978:	4013      	ands	r3, r2
 800197a:	1c5a      	adds	r2, r3, #1
 800197c:	0013      	movs	r3, r2
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	189b      	adds	r3, r3, r2
 8001982:	00db      	lsls	r3, r3, #3
 8001984:	687a      	ldr	r2, [r7, #4]
 8001986:	18d3      	adds	r3, r2, r3
 8001988:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	2201      	movs	r2, #1
 800198e:	705a      	strb	r2, [r3, #1]
 8001990:	e00d      	b.n	80019ae <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001992:	1cfb      	adds	r3, r7, #3
 8001994:	781a      	ldrb	r2, [r3, #0]
 8001996:	0013      	movs	r3, r2
 8001998:	009b      	lsls	r3, r3, #2
 800199a:	189b      	adds	r3, r3, r2
 800199c:	00db      	lsls	r3, r3, #3
 800199e:	3369      	adds	r3, #105	; 0x69
 80019a0:	33ff      	adds	r3, #255	; 0xff
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	18d3      	adds	r3, r2, r3
 80019a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	2200      	movs	r2, #0
 80019ac:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	2201      	movs	r2, #1
 80019b2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80019b4:	1cfb      	adds	r3, r7, #3
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	2207      	movs	r2, #7
 80019ba:	4013      	ands	r3, r2
 80019bc:	b2da      	uxtb	r2, r3
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	23aa      	movs	r3, #170	; 0xaa
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	5cd3      	ldrb	r3, [r2, r3]
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d101      	bne.n	80019d2 <HAL_PCD_EP_SetStall+0x8c>
 80019ce:	2302      	movs	r3, #2
 80019d0:	e011      	b.n	80019f6 <HAL_PCD_EP_SetStall+0xb0>
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	23aa      	movs	r3, #170	; 0xaa
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	2101      	movs	r1, #1
 80019da:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	68fa      	ldr	r2, [r7, #12]
 80019e2:	0011      	movs	r1, r2
 80019e4:	0018      	movs	r0, r3
 80019e6:	f003 fdfd 	bl	80055e4 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	23aa      	movs	r3, #170	; 0xaa
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	2100      	movs	r1, #0
 80019f2:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80019f4:	2300      	movs	r3, #0
}
 80019f6:	0018      	movs	r0, r3
 80019f8:	46bd      	mov	sp, r7
 80019fa:	b004      	add	sp, #16
 80019fc:	bd80      	pop	{r7, pc}

080019fe <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80019fe:	b580      	push	{r7, lr}
 8001a00:	b084      	sub	sp, #16
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	6078      	str	r0, [r7, #4]
 8001a06:	000a      	movs	r2, r1
 8001a08:	1cfb      	adds	r3, r7, #3
 8001a0a:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001a0c:	1cfb      	adds	r3, r7, #3
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	220f      	movs	r2, #15
 8001a12:	401a      	ands	r2, r3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d901      	bls.n	8001a20 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e048      	b.n	8001ab2 <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001a20:	1cfb      	adds	r3, r7, #3
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	b25b      	sxtb	r3, r3
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	da0f      	bge.n	8001a4a <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a2a:	1cfb      	adds	r3, r7, #3
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	2207      	movs	r2, #7
 8001a30:	4013      	ands	r3, r2
 8001a32:	1c5a      	adds	r2, r3, #1
 8001a34:	0013      	movs	r3, r2
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	189b      	adds	r3, r3, r2
 8001a3a:	00db      	lsls	r3, r3, #3
 8001a3c:	687a      	ldr	r2, [r7, #4]
 8001a3e:	18d3      	adds	r3, r2, r3
 8001a40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	2201      	movs	r2, #1
 8001a46:	705a      	strb	r2, [r3, #1]
 8001a48:	e00f      	b.n	8001a6a <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a4a:	1cfb      	adds	r3, r7, #3
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	2207      	movs	r2, #7
 8001a50:	401a      	ands	r2, r3
 8001a52:	0013      	movs	r3, r2
 8001a54:	009b      	lsls	r3, r3, #2
 8001a56:	189b      	adds	r3, r3, r2
 8001a58:	00db      	lsls	r3, r3, #3
 8001a5a:	3369      	adds	r3, #105	; 0x69
 8001a5c:	33ff      	adds	r3, #255	; 0xff
 8001a5e:	687a      	ldr	r2, [r7, #4]
 8001a60:	18d3      	adds	r3, r2, r3
 8001a62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	2200      	movs	r2, #0
 8001a68:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a70:	1cfb      	adds	r3, r7, #3
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	2207      	movs	r2, #7
 8001a76:	4013      	ands	r3, r2
 8001a78:	b2da      	uxtb	r2, r3
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001a7e:	687a      	ldr	r2, [r7, #4]
 8001a80:	23aa      	movs	r3, #170	; 0xaa
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	5cd3      	ldrb	r3, [r2, r3]
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d101      	bne.n	8001a8e <HAL_PCD_EP_ClrStall+0x90>
 8001a8a:	2302      	movs	r3, #2
 8001a8c:	e011      	b.n	8001ab2 <HAL_PCD_EP_ClrStall+0xb4>
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	23aa      	movs	r3, #170	; 0xaa
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	2101      	movs	r1, #1
 8001a96:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	68fa      	ldr	r2, [r7, #12]
 8001a9e:	0011      	movs	r1, r2
 8001aa0:	0018      	movs	r0, r3
 8001aa2:	f003 fdef 	bl	8005684 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001aa6:	687a      	ldr	r2, [r7, #4]
 8001aa8:	23aa      	movs	r3, #170	; 0xaa
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	2100      	movs	r1, #0
 8001aae:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8001ab0:	2300      	movs	r3, #0
}
 8001ab2:	0018      	movs	r0, r3
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	b004      	add	sp, #16
 8001ab8:	bd80      	pop	{r7, pc}
	...

08001abc <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001abc:	b5b0      	push	{r4, r5, r7, lr}
 8001abe:	b096      	sub	sp, #88	; 0x58
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001ac4:	f000 fbd8 	bl	8002278 <PCD_EP_ISR_Handler+0x7bc>
  {
    wIstr = hpcd->Instance->ISTR;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	2056      	movs	r0, #86	; 0x56
 8001ace:	183b      	adds	r3, r7, r0
 8001ad0:	2144      	movs	r1, #68	; 0x44
 8001ad2:	5a52      	ldrh	r2, [r2, r1]
 8001ad4:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001ad6:	183b      	adds	r3, r7, r0
 8001ad8:	881b      	ldrh	r3, [r3, #0]
 8001ada:	b2da      	uxtb	r2, r3
 8001adc:	2455      	movs	r4, #85	; 0x55
 8001ade:	193b      	adds	r3, r7, r4
 8001ae0:	210f      	movs	r1, #15
 8001ae2:	400a      	ands	r2, r1
 8001ae4:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 8001ae6:	193b      	adds	r3, r7, r4
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d000      	beq.n	8001af0 <PCD_EP_ISR_Handler+0x34>
 8001aee:	e179      	b.n	8001de4 <PCD_EP_ISR_Handler+0x328>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001af0:	183b      	adds	r3, r7, r0
 8001af2:	881b      	ldrh	r3, [r3, #0]
 8001af4:	2210      	movs	r2, #16
 8001af6:	4013      	ands	r3, r2
 8001af8:	d154      	bne.n	8001ba4 <PCD_EP_ISR_Handler+0xe8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	881b      	ldrh	r3, [r3, #0]
 8001b00:	b29a      	uxth	r2, r3
 8001b02:	200e      	movs	r0, #14
 8001b04:	183b      	adds	r3, r7, r0
 8001b06:	49af      	ldr	r1, [pc, #700]	; (8001dc4 <PCD_EP_ISR_Handler+0x308>)
 8001b08:	400a      	ands	r2, r1
 8001b0a:	801a      	strh	r2, [r3, #0]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	183a      	adds	r2, r7, r0
 8001b12:	8812      	ldrh	r2, [r2, #0]
 8001b14:	49ac      	ldr	r1, [pc, #688]	; (8001dc8 <PCD_EP_ISR_Handler+0x30c>)
 8001b16:	430a      	orrs	r2, r1
 8001b18:	b292      	uxth	r2, r2
 8001b1a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	3328      	adds	r3, #40	; 0x28
 8001b20:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	2250      	movs	r2, #80	; 0x50
 8001b28:	5a9b      	ldrh	r3, [r3, r2]
 8001b2a:	b29b      	uxth	r3, r3
 8001b2c:	001a      	movs	r2, r3
 8001b2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	00db      	lsls	r3, r3, #3
 8001b34:	18d2      	adds	r2, r2, r3
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	18d3      	adds	r3, r2, r3
 8001b3c:	4aa3      	ldr	r2, [pc, #652]	; (8001dcc <PCD_EP_ISR_Handler+0x310>)
 8001b3e:	4694      	mov	ip, r2
 8001b40:	4463      	add	r3, ip
 8001b42:	881b      	ldrh	r3, [r3, #0]
 8001b44:	059b      	lsls	r3, r3, #22
 8001b46:	0d9a      	lsrs	r2, r3, #22
 8001b48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b4a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001b4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b4e:	695a      	ldr	r2, [r3, #20]
 8001b50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b52:	69db      	ldr	r3, [r3, #28]
 8001b54:	18d2      	adds	r2, r2, r3
 8001b56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b58:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2100      	movs	r1, #0
 8001b5e:	0018      	movs	r0, r3
 8001b60:	f005 fc7a 	bl	8007458 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2224      	movs	r2, #36	; 0x24
 8001b68:	5c9b      	ldrb	r3, [r3, r2]
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d101      	bne.n	8001b74 <PCD_EP_ISR_Handler+0xb8>
 8001b70:	f000 fb82 	bl	8002278 <PCD_EP_ISR_Handler+0x7bc>
 8001b74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b76:	699b      	ldr	r3, [r3, #24]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d001      	beq.n	8001b80 <PCD_EP_ISR_Handler+0xc4>
 8001b7c:	f000 fb7c 	bl	8002278 <PCD_EP_ISR_Handler+0x7bc>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2224      	movs	r2, #36	; 0x24
 8001b84:	5c9b      	ldrb	r3, [r3, r2]
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	2280      	movs	r2, #128	; 0x80
 8001b8a:	4252      	negs	r2, r2
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	b2da      	uxtb	r2, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	b291      	uxth	r1, r2
 8001b96:	224c      	movs	r2, #76	; 0x4c
 8001b98:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2224      	movs	r2, #36	; 0x24
 8001b9e:	2100      	movs	r1, #0
 8001ba0:	5499      	strb	r1, [r3, r2]
 8001ba2:	e369      	b.n	8002278 <PCD_EP_ISR_Handler+0x7bc>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	3369      	adds	r3, #105	; 0x69
 8001ba8:	33ff      	adds	r3, #255	; 0xff
 8001baa:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	2152      	movs	r1, #82	; 0x52
 8001bb2:	187b      	adds	r3, r7, r1
 8001bb4:	8812      	ldrh	r2, [r2, #0]
 8001bb6:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001bb8:	187b      	adds	r3, r7, r1
 8001bba:	881a      	ldrh	r2, [r3, #0]
 8001bbc:	2380      	movs	r3, #128	; 0x80
 8001bbe:	011b      	lsls	r3, r3, #4
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	d037      	beq.n	8001c34 <PCD_EP_ISR_Handler+0x178>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2250      	movs	r2, #80	; 0x50
 8001bca:	5a9b      	ldrh	r3, [r3, r2]
 8001bcc:	b29b      	uxth	r3, r3
 8001bce:	001a      	movs	r2, r3
 8001bd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	00db      	lsls	r3, r3, #3
 8001bd6:	18d2      	adds	r2, r2, r3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	18d3      	adds	r3, r2, r3
 8001bde:	4a7c      	ldr	r2, [pc, #496]	; (8001dd0 <PCD_EP_ISR_Handler+0x314>)
 8001be0:	4694      	mov	ip, r2
 8001be2:	4463      	add	r3, ip
 8001be4:	881b      	ldrh	r3, [r3, #0]
 8001be6:	059b      	lsls	r3, r3, #22
 8001be8:	0d9a      	lsrs	r2, r3, #22
 8001bea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001bec:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6818      	ldr	r0, [r3, #0]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	22ac      	movs	r2, #172	; 0xac
 8001bf6:	0092      	lsls	r2, r2, #2
 8001bf8:	1899      	adds	r1, r3, r2
 8001bfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001bfc:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001bfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c00:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001c02:	b29b      	uxth	r3, r3
 8001c04:	f003 fe6c 	bl	80058e0 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	881b      	ldrh	r3, [r3, #0]
 8001c0e:	b29a      	uxth	r2, r3
 8001c10:	2010      	movs	r0, #16
 8001c12:	183b      	adds	r3, r7, r0
 8001c14:	496f      	ldr	r1, [pc, #444]	; (8001dd4 <PCD_EP_ISR_Handler+0x318>)
 8001c16:	400a      	ands	r2, r1
 8001c18:	801a      	strh	r2, [r3, #0]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	183a      	adds	r2, r7, r0
 8001c20:	8812      	ldrh	r2, [r2, #0]
 8001c22:	2180      	movs	r1, #128	; 0x80
 8001c24:	430a      	orrs	r2, r1
 8001c26:	b292      	uxth	r2, r2
 8001c28:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	0018      	movs	r0, r3
 8001c2e:	f005 fbdd 	bl	80073ec <HAL_PCD_SetupStageCallback>
 8001c32:	e321      	b.n	8002278 <PCD_EP_ISR_Handler+0x7bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001c34:	2352      	movs	r3, #82	; 0x52
 8001c36:	18fb      	adds	r3, r7, r3
 8001c38:	2200      	movs	r2, #0
 8001c3a:	5e9b      	ldrsh	r3, [r3, r2]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	db00      	blt.n	8001c42 <PCD_EP_ISR_Handler+0x186>
 8001c40:	e31a      	b.n	8002278 <PCD_EP_ISR_Handler+0x7bc>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	881b      	ldrh	r3, [r3, #0]
 8001c48:	b29a      	uxth	r2, r3
 8001c4a:	201e      	movs	r0, #30
 8001c4c:	183b      	adds	r3, r7, r0
 8001c4e:	4961      	ldr	r1, [pc, #388]	; (8001dd4 <PCD_EP_ISR_Handler+0x318>)
 8001c50:	400a      	ands	r2, r1
 8001c52:	801a      	strh	r2, [r3, #0]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	183a      	adds	r2, r7, r0
 8001c5a:	8812      	ldrh	r2, [r2, #0]
 8001c5c:	2180      	movs	r1, #128	; 0x80
 8001c5e:	430a      	orrs	r2, r1
 8001c60:	b292      	uxth	r2, r2
 8001c62:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	2250      	movs	r2, #80	; 0x50
 8001c6a:	5a9b      	ldrh	r3, [r3, r2]
 8001c6c:	b29b      	uxth	r3, r3
 8001c6e:	001a      	movs	r2, r3
 8001c70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	00db      	lsls	r3, r3, #3
 8001c76:	18d2      	adds	r2, r2, r3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	18d3      	adds	r3, r2, r3
 8001c7e:	4a54      	ldr	r2, [pc, #336]	; (8001dd0 <PCD_EP_ISR_Handler+0x314>)
 8001c80:	4694      	mov	ip, r2
 8001c82:	4463      	add	r3, ip
 8001c84:	881b      	ldrh	r3, [r3, #0]
 8001c86:	059b      	lsls	r3, r3, #22
 8001c88:	0d9a      	lsrs	r2, r3, #22
 8001c8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c8c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001c8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c90:	69db      	ldr	r3, [r3, #28]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d01a      	beq.n	8001ccc <PCD_EP_ISR_Handler+0x210>
 8001c96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c98:	695b      	ldr	r3, [r3, #20]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d016      	beq.n	8001ccc <PCD_EP_ISR_Handler+0x210>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6818      	ldr	r0, [r3, #0]
 8001ca2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ca4:	6959      	ldr	r1, [r3, #20]
 8001ca6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ca8:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001caa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001cac:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001cae:	b29b      	uxth	r3, r3
 8001cb0:	f003 fe16 	bl	80058e0 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001cb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001cb6:	695a      	ldr	r2, [r3, #20]
 8001cb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001cba:	69db      	ldr	r3, [r3, #28]
 8001cbc:	18d2      	adds	r2, r2, r3
 8001cbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001cc0:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2100      	movs	r1, #0
 8001cc6:	0018      	movs	r0, r3
 8001cc8:	f005 fba5 	bl	8007416 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	881b      	ldrh	r3, [r3, #0]
 8001cd2:	b29b      	uxth	r3, r3
 8001cd4:	001a      	movs	r2, r3
 8001cd6:	2380      	movs	r3, #128	; 0x80
 8001cd8:	011b      	lsls	r3, r3, #4
 8001cda:	4013      	ands	r3, r2
 8001cdc:	d000      	beq.n	8001ce0 <PCD_EP_ISR_Handler+0x224>
 8001cde:	e2cb      	b.n	8002278 <PCD_EP_ISR_Handler+0x7bc>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	61bb      	str	r3, [r7, #24]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	2250      	movs	r2, #80	; 0x50
 8001cec:	5a9b      	ldrh	r3, [r3, r2]
 8001cee:	b29b      	uxth	r3, r3
 8001cf0:	001a      	movs	r2, r3
 8001cf2:	69bb      	ldr	r3, [r7, #24]
 8001cf4:	189b      	adds	r3, r3, r2
 8001cf6:	61bb      	str	r3, [r7, #24]
 8001cf8:	69bb      	ldr	r3, [r7, #24]
 8001cfa:	4a35      	ldr	r2, [pc, #212]	; (8001dd0 <PCD_EP_ISR_Handler+0x314>)
 8001cfc:	4694      	mov	ip, r2
 8001cfe:	4463      	add	r3, ip
 8001d00:	617b      	str	r3, [r7, #20]
 8001d02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d04:	691b      	ldr	r3, [r3, #16]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d110      	bne.n	8001d2c <PCD_EP_ISR_Handler+0x270>
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	881b      	ldrh	r3, [r3, #0]
 8001d0e:	b29b      	uxth	r3, r3
 8001d10:	4a31      	ldr	r2, [pc, #196]	; (8001dd8 <PCD_EP_ISR_Handler+0x31c>)
 8001d12:	4013      	ands	r3, r2
 8001d14:	b29a      	uxth	r2, r3
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	801a      	strh	r2, [r3, #0]
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	881b      	ldrh	r3, [r3, #0]
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	4a29      	ldr	r2, [pc, #164]	; (8001dc8 <PCD_EP_ISR_Handler+0x30c>)
 8001d22:	4313      	orrs	r3, r2
 8001d24:	b29a      	uxth	r2, r3
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	801a      	strh	r2, [r3, #0]
 8001d2a:	e02b      	b.n	8001d84 <PCD_EP_ISR_Handler+0x2c8>
 8001d2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d2e:	691b      	ldr	r3, [r3, #16]
 8001d30:	2b3e      	cmp	r3, #62	; 0x3e
 8001d32:	d812      	bhi.n	8001d5a <PCD_EP_ISR_Handler+0x29e>
 8001d34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d36:	691b      	ldr	r3, [r3, #16]
 8001d38:	085b      	lsrs	r3, r3, #1
 8001d3a:	647b      	str	r3, [r7, #68]	; 0x44
 8001d3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d3e:	691b      	ldr	r3, [r3, #16]
 8001d40:	2201      	movs	r2, #1
 8001d42:	4013      	ands	r3, r2
 8001d44:	d002      	beq.n	8001d4c <PCD_EP_ISR_Handler+0x290>
 8001d46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d48:	3301      	adds	r3, #1
 8001d4a:	647b      	str	r3, [r7, #68]	; 0x44
 8001d4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d4e:	b29b      	uxth	r3, r3
 8001d50:	029b      	lsls	r3, r3, #10
 8001d52:	b29a      	uxth	r2, r3
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	801a      	strh	r2, [r3, #0]
 8001d58:	e014      	b.n	8001d84 <PCD_EP_ISR_Handler+0x2c8>
 8001d5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d5c:	691b      	ldr	r3, [r3, #16]
 8001d5e:	095b      	lsrs	r3, r3, #5
 8001d60:	647b      	str	r3, [r7, #68]	; 0x44
 8001d62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d64:	691b      	ldr	r3, [r3, #16]
 8001d66:	221f      	movs	r2, #31
 8001d68:	4013      	ands	r3, r2
 8001d6a:	d102      	bne.n	8001d72 <PCD_EP_ISR_Handler+0x2b6>
 8001d6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d6e:	3b01      	subs	r3, #1
 8001d70:	647b      	str	r3, [r7, #68]	; 0x44
 8001d72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d74:	b29b      	uxth	r3, r3
 8001d76:	029b      	lsls	r3, r3, #10
 8001d78:	b29b      	uxth	r3, r3
 8001d7a:	4a13      	ldr	r2, [pc, #76]	; (8001dc8 <PCD_EP_ISR_Handler+0x30c>)
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	b29a      	uxth	r2, r3
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	881b      	ldrh	r3, [r3, #0]
 8001d8a:	b29a      	uxth	r2, r3
 8001d8c:	2012      	movs	r0, #18
 8001d8e:	183b      	adds	r3, r7, r0
 8001d90:	4912      	ldr	r1, [pc, #72]	; (8001ddc <PCD_EP_ISR_Handler+0x320>)
 8001d92:	400a      	ands	r2, r1
 8001d94:	801a      	strh	r2, [r3, #0]
 8001d96:	183b      	adds	r3, r7, r0
 8001d98:	183a      	adds	r2, r7, r0
 8001d9a:	8812      	ldrh	r2, [r2, #0]
 8001d9c:	2180      	movs	r1, #128	; 0x80
 8001d9e:	0149      	lsls	r1, r1, #5
 8001da0:	404a      	eors	r2, r1
 8001da2:	801a      	strh	r2, [r3, #0]
 8001da4:	183b      	adds	r3, r7, r0
 8001da6:	183a      	adds	r2, r7, r0
 8001da8:	8812      	ldrh	r2, [r2, #0]
 8001daa:	2180      	movs	r1, #128	; 0x80
 8001dac:	0189      	lsls	r1, r1, #6
 8001dae:	404a      	eors	r2, r1
 8001db0:	801a      	strh	r2, [r3, #0]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	183a      	adds	r2, r7, r0
 8001db8:	8812      	ldrh	r2, [r2, #0]
 8001dba:	4909      	ldr	r1, [pc, #36]	; (8001de0 <PCD_EP_ISR_Handler+0x324>)
 8001dbc:	430a      	orrs	r2, r1
 8001dbe:	b292      	uxth	r2, r2
 8001dc0:	801a      	strh	r2, [r3, #0]
 8001dc2:	e259      	b.n	8002278 <PCD_EP_ISR_Handler+0x7bc>
 8001dc4:	ffff8f0f 	.word	0xffff8f0f
 8001dc8:	ffff8000 	.word	0xffff8000
 8001dcc:	00000402 	.word	0x00000402
 8001dd0:	00000406 	.word	0x00000406
 8001dd4:	00000f8f 	.word	0x00000f8f
 8001dd8:	ffff83ff 	.word	0xffff83ff
 8001ddc:	ffffbf8f 	.word	0xffffbf8f
 8001de0:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	001a      	movs	r2, r3
 8001dea:	2055      	movs	r0, #85	; 0x55
 8001dec:	183b      	adds	r3, r7, r0
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	009b      	lsls	r3, r3, #2
 8001df2:	18d2      	adds	r2, r2, r3
 8001df4:	2152      	movs	r1, #82	; 0x52
 8001df6:	187b      	adds	r3, r7, r1
 8001df8:	8812      	ldrh	r2, [r2, #0]
 8001dfa:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001dfc:	187b      	adds	r3, r7, r1
 8001dfe:	2200      	movs	r2, #0
 8001e00:	5e9b      	ldrsh	r3, [r3, r2]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	db00      	blt.n	8001e08 <PCD_EP_ISR_Handler+0x34c>
 8001e06:	e0fa      	b.n	8001ffe <PCD_EP_ISR_Handler+0x542>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	001a      	movs	r2, r3
 8001e0e:	183b      	adds	r3, r7, r0
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	18d3      	adds	r3, r2, r3
 8001e16:	881b      	ldrh	r3, [r3, #0]
 8001e18:	b29a      	uxth	r2, r3
 8001e1a:	2450      	movs	r4, #80	; 0x50
 8001e1c:	193b      	adds	r3, r7, r4
 8001e1e:	49cf      	ldr	r1, [pc, #828]	; (800215c <PCD_EP_ISR_Handler+0x6a0>)
 8001e20:	400a      	ands	r2, r1
 8001e22:	801a      	strh	r2, [r3, #0]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	001a      	movs	r2, r3
 8001e2a:	183b      	adds	r3, r7, r0
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	18d3      	adds	r3, r2, r3
 8001e32:	193a      	adds	r2, r7, r4
 8001e34:	8812      	ldrh	r2, [r2, #0]
 8001e36:	2180      	movs	r1, #128	; 0x80
 8001e38:	430a      	orrs	r2, r1
 8001e3a:	b292      	uxth	r2, r2
 8001e3c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001e3e:	183b      	adds	r3, r7, r0
 8001e40:	781a      	ldrb	r2, [r3, #0]
 8001e42:	0013      	movs	r3, r2
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	189b      	adds	r3, r3, r2
 8001e48:	00db      	lsls	r3, r3, #3
 8001e4a:	3369      	adds	r3, #105	; 0x69
 8001e4c:	33ff      	adds	r3, #255	; 0xff
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	18d3      	adds	r3, r2, r3
 8001e52:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001e54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e56:	7b1b      	ldrb	r3, [r3, #12]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d125      	bne.n	8001ea8 <PCD_EP_ISR_Handler+0x3ec>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	2250      	movs	r2, #80	; 0x50
 8001e62:	5a9b      	ldrh	r3, [r3, r2]
 8001e64:	b29b      	uxth	r3, r3
 8001e66:	001a      	movs	r2, r3
 8001e68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	00db      	lsls	r3, r3, #3
 8001e6e:	18d2      	adds	r2, r2, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	18d3      	adds	r3, r2, r3
 8001e76:	4aba      	ldr	r2, [pc, #744]	; (8002160 <PCD_EP_ISR_Handler+0x6a4>)
 8001e78:	4694      	mov	ip, r2
 8001e7a:	4463      	add	r3, ip
 8001e7c:	881a      	ldrh	r2, [r3, #0]
 8001e7e:	2448      	movs	r4, #72	; 0x48
 8001e80:	193b      	adds	r3, r7, r4
 8001e82:	0592      	lsls	r2, r2, #22
 8001e84:	0d92      	lsrs	r2, r2, #22
 8001e86:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 8001e88:	193b      	adds	r3, r7, r4
 8001e8a:	881b      	ldrh	r3, [r3, #0]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d100      	bne.n	8001e92 <PCD_EP_ISR_Handler+0x3d6>
 8001e90:	e08d      	b.n	8001fae <PCD_EP_ISR_Handler+0x4f2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6818      	ldr	r0, [r3, #0]
 8001e96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e98:	6959      	ldr	r1, [r3, #20]
 8001e9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e9c:	88da      	ldrh	r2, [r3, #6]
 8001e9e:	193b      	adds	r3, r7, r4
 8001ea0:	881b      	ldrh	r3, [r3, #0]
 8001ea2:	f003 fd1d 	bl	80058e0 <USB_ReadPMA>
 8001ea6:	e082      	b.n	8001fae <PCD_EP_ISR_Handler+0x4f2>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001ea8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001eaa:	78db      	ldrb	r3, [r3, #3]
 8001eac:	2b02      	cmp	r3, #2
 8001eae:	d10c      	bne.n	8001eca <PCD_EP_ISR_Handler+0x40e>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001eb0:	2348      	movs	r3, #72	; 0x48
 8001eb2:	18fc      	adds	r4, r7, r3
 8001eb4:	2352      	movs	r3, #82	; 0x52
 8001eb6:	18fb      	adds	r3, r7, r3
 8001eb8:	881a      	ldrh	r2, [r3, #0]
 8001eba:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	0018      	movs	r0, r3
 8001ec0:	f000 f9ee 	bl	80022a0 <HAL_PCD_EP_DB_Receive>
 8001ec4:	0003      	movs	r3, r0
 8001ec6:	8023      	strh	r3, [r4, #0]
 8001ec8:	e071      	b.n	8001fae <PCD_EP_ISR_Handler+0x4f2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	001a      	movs	r2, r3
 8001ed0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	009b      	lsls	r3, r3, #2
 8001ed6:	18d3      	adds	r3, r2, r3
 8001ed8:	881b      	ldrh	r3, [r3, #0]
 8001eda:	b29a      	uxth	r2, r3
 8001edc:	204a      	movs	r0, #74	; 0x4a
 8001ede:	183b      	adds	r3, r7, r0
 8001ee0:	49a0      	ldr	r1, [pc, #640]	; (8002164 <PCD_EP_ISR_Handler+0x6a8>)
 8001ee2:	400a      	ands	r2, r1
 8001ee4:	801a      	strh	r2, [r3, #0]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	001a      	movs	r2, r3
 8001eec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	18d3      	adds	r3, r2, r3
 8001ef4:	183a      	adds	r2, r7, r0
 8001ef6:	8812      	ldrh	r2, [r2, #0]
 8001ef8:	499b      	ldr	r1, [pc, #620]	; (8002168 <PCD_EP_ISR_Handler+0x6ac>)
 8001efa:	430a      	orrs	r2, r1
 8001efc:	b292      	uxth	r2, r2
 8001efe:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	001a      	movs	r2, r3
 8001f06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	18d3      	adds	r3, r2, r3
 8001f0e:	881b      	ldrh	r3, [r3, #0]
 8001f10:	b29b      	uxth	r3, r3
 8001f12:	001a      	movs	r2, r3
 8001f14:	2380      	movs	r3, #128	; 0x80
 8001f16:	01db      	lsls	r3, r3, #7
 8001f18:	4013      	ands	r3, r2
 8001f1a:	d024      	beq.n	8001f66 <PCD_EP_ISR_Handler+0x4aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	2250      	movs	r2, #80	; 0x50
 8001f22:	5a9b      	ldrh	r3, [r3, r2]
 8001f24:	b29b      	uxth	r3, r3
 8001f26:	001a      	movs	r2, r3
 8001f28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	00db      	lsls	r3, r3, #3
 8001f2e:	18d2      	adds	r2, r2, r3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	18d3      	adds	r3, r2, r3
 8001f36:	4a8d      	ldr	r2, [pc, #564]	; (800216c <PCD_EP_ISR_Handler+0x6b0>)
 8001f38:	4694      	mov	ip, r2
 8001f3a:	4463      	add	r3, ip
 8001f3c:	881a      	ldrh	r2, [r3, #0]
 8001f3e:	2448      	movs	r4, #72	; 0x48
 8001f40:	193b      	adds	r3, r7, r4
 8001f42:	0592      	lsls	r2, r2, #22
 8001f44:	0d92      	lsrs	r2, r2, #22
 8001f46:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8001f48:	193b      	adds	r3, r7, r4
 8001f4a:	881b      	ldrh	r3, [r3, #0]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d02e      	beq.n	8001fae <PCD_EP_ISR_Handler+0x4f2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6818      	ldr	r0, [r3, #0]
 8001f54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f56:	6959      	ldr	r1, [r3, #20]
 8001f58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f5a:	891a      	ldrh	r2, [r3, #8]
 8001f5c:	193b      	adds	r3, r7, r4
 8001f5e:	881b      	ldrh	r3, [r3, #0]
 8001f60:	f003 fcbe 	bl	80058e0 <USB_ReadPMA>
 8001f64:	e023      	b.n	8001fae <PCD_EP_ISR_Handler+0x4f2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	2250      	movs	r2, #80	; 0x50
 8001f6c:	5a9b      	ldrh	r3, [r3, r2]
 8001f6e:	b29b      	uxth	r3, r3
 8001f70:	001a      	movs	r2, r3
 8001f72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	00db      	lsls	r3, r3, #3
 8001f78:	18d2      	adds	r2, r2, r3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	18d3      	adds	r3, r2, r3
 8001f80:	4a77      	ldr	r2, [pc, #476]	; (8002160 <PCD_EP_ISR_Handler+0x6a4>)
 8001f82:	4694      	mov	ip, r2
 8001f84:	4463      	add	r3, ip
 8001f86:	881a      	ldrh	r2, [r3, #0]
 8001f88:	2448      	movs	r4, #72	; 0x48
 8001f8a:	193b      	adds	r3, r7, r4
 8001f8c:	0592      	lsls	r2, r2, #22
 8001f8e:	0d92      	lsrs	r2, r2, #22
 8001f90:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8001f92:	193b      	adds	r3, r7, r4
 8001f94:	881b      	ldrh	r3, [r3, #0]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d009      	beq.n	8001fae <PCD_EP_ISR_Handler+0x4f2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6818      	ldr	r0, [r3, #0]
 8001f9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fa0:	6959      	ldr	r1, [r3, #20]
 8001fa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fa4:	895a      	ldrh	r2, [r3, #10]
 8001fa6:	193b      	adds	r3, r7, r4
 8001fa8:	881b      	ldrh	r3, [r3, #0]
 8001faa:	f003 fc99 	bl	80058e0 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001fae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fb0:	69da      	ldr	r2, [r3, #28]
 8001fb2:	2148      	movs	r1, #72	; 0x48
 8001fb4:	187b      	adds	r3, r7, r1
 8001fb6:	881b      	ldrh	r3, [r3, #0]
 8001fb8:	18d2      	adds	r2, r2, r3
 8001fba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fbc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001fbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fc0:	695a      	ldr	r2, [r3, #20]
 8001fc2:	187b      	adds	r3, r7, r1
 8001fc4:	881b      	ldrh	r3, [r3, #0]
 8001fc6:	18d2      	adds	r2, r2, r3
 8001fc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fca:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001fcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fce:	699b      	ldr	r3, [r3, #24]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d005      	beq.n	8001fe0 <PCD_EP_ISR_Handler+0x524>
 8001fd4:	187b      	adds	r3, r7, r1
 8001fd6:	881a      	ldrh	r2, [r3, #0]
 8001fd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fda:	691b      	ldr	r3, [r3, #16]
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d207      	bcs.n	8001ff0 <PCD_EP_ISR_Handler+0x534>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001fe0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fe2:	781a      	ldrb	r2, [r3, #0]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	0011      	movs	r1, r2
 8001fe8:	0018      	movs	r0, r3
 8001fea:	f005 fa14 	bl	8007416 <HAL_PCD_DataOutStageCallback>
 8001fee:	e006      	b.n	8001ffe <PCD_EP_ISR_Handler+0x542>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001ff6:	0011      	movs	r1, r2
 8001ff8:	0018      	movs	r0, r3
 8001ffa:	f002 fa39 	bl	8004470 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001ffe:	2452      	movs	r4, #82	; 0x52
 8002000:	193b      	adds	r3, r7, r4
 8002002:	881b      	ldrh	r3, [r3, #0]
 8002004:	2280      	movs	r2, #128	; 0x80
 8002006:	4013      	ands	r3, r2
 8002008:	d100      	bne.n	800200c <PCD_EP_ISR_Handler+0x550>
 800200a:	e135      	b.n	8002278 <PCD_EP_ISR_Handler+0x7bc>
      {
        ep = &hpcd->IN_ep[epindex];
 800200c:	2055      	movs	r0, #85	; 0x55
 800200e:	183b      	adds	r3, r7, r0
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	1c5a      	adds	r2, r3, #1
 8002014:	0013      	movs	r3, r2
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	189b      	adds	r3, r3, r2
 800201a:	00db      	lsls	r3, r3, #3
 800201c:	687a      	ldr	r2, [r7, #4]
 800201e:	18d3      	adds	r3, r2, r3
 8002020:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	001a      	movs	r2, r3
 8002028:	183b      	adds	r3, r7, r0
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	18d3      	adds	r3, r2, r3
 8002030:	881b      	ldrh	r3, [r3, #0]
 8002032:	b29a      	uxth	r2, r3
 8002034:	2542      	movs	r5, #66	; 0x42
 8002036:	197b      	adds	r3, r7, r5
 8002038:	494d      	ldr	r1, [pc, #308]	; (8002170 <PCD_EP_ISR_Handler+0x6b4>)
 800203a:	400a      	ands	r2, r1
 800203c:	801a      	strh	r2, [r3, #0]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	001a      	movs	r2, r3
 8002044:	183b      	adds	r3, r7, r0
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	18d3      	adds	r3, r2, r3
 800204c:	197a      	adds	r2, r7, r5
 800204e:	8812      	ldrh	r2, [r2, #0]
 8002050:	4948      	ldr	r1, [pc, #288]	; (8002174 <PCD_EP_ISR_Handler+0x6b8>)
 8002052:	430a      	orrs	r2, r1
 8002054:	b292      	uxth	r2, r2
 8002056:	801a      	strh	r2, [r3, #0]

        if (ep->type != EP_TYPE_BULK)
 8002058:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800205a:	78db      	ldrb	r3, [r3, #3]
 800205c:	2b02      	cmp	r3, #2
 800205e:	d100      	bne.n	8002062 <PCD_EP_ISR_Handler+0x5a6>
 8002060:	e0ad      	b.n	80021be <PCD_EP_ISR_Handler+0x702>
        {
          ep->xfer_len = 0U;
 8002062:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002064:	2200      	movs	r2, #0
 8002066:	619a      	str	r2, [r3, #24]

          if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002068:	193b      	adds	r3, r7, r4
 800206a:	881b      	ldrh	r3, [r3, #0]
 800206c:	2240      	movs	r2, #64	; 0x40
 800206e:	4013      	ands	r3, r2
 8002070:	d046      	beq.n	8002100 <PCD_EP_ISR_Handler+0x644>
          {
            PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002072:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002074:	785b      	ldrb	r3, [r3, #1]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d125      	bne.n	80020c6 <PCD_EP_ISR_Handler+0x60a>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	627b      	str	r3, [r7, #36]	; 0x24
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	2250      	movs	r2, #80	; 0x50
 8002086:	5a9b      	ldrh	r3, [r3, r2]
 8002088:	b29b      	uxth	r3, r3
 800208a:	001a      	movs	r2, r3
 800208c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208e:	189b      	adds	r3, r3, r2
 8002090:	627b      	str	r3, [r7, #36]	; 0x24
 8002092:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	00da      	lsls	r2, r3, #3
 8002098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209a:	18d3      	adds	r3, r2, r3
 800209c:	4a33      	ldr	r2, [pc, #204]	; (800216c <PCD_EP_ISR_Handler+0x6b0>)
 800209e:	4694      	mov	ip, r2
 80020a0:	4463      	add	r3, ip
 80020a2:	623b      	str	r3, [r7, #32]
 80020a4:	6a3b      	ldr	r3, [r7, #32]
 80020a6:	881b      	ldrh	r3, [r3, #0]
 80020a8:	b29b      	uxth	r3, r3
 80020aa:	4a33      	ldr	r2, [pc, #204]	; (8002178 <PCD_EP_ISR_Handler+0x6bc>)
 80020ac:	4013      	ands	r3, r2
 80020ae:	b29a      	uxth	r2, r3
 80020b0:	6a3b      	ldr	r3, [r7, #32]
 80020b2:	801a      	strh	r2, [r3, #0]
 80020b4:	6a3b      	ldr	r3, [r7, #32]
 80020b6:	881b      	ldrh	r3, [r3, #0]
 80020b8:	b29b      	uxth	r3, r3
 80020ba:	4a2e      	ldr	r2, [pc, #184]	; (8002174 <PCD_EP_ISR_Handler+0x6b8>)
 80020bc:	4313      	orrs	r3, r2
 80020be:	b29a      	uxth	r2, r3
 80020c0:	6a3b      	ldr	r3, [r7, #32]
 80020c2:	801a      	strh	r2, [r3, #0]
 80020c4:	e073      	b.n	80021ae <PCD_EP_ISR_Handler+0x6f2>
 80020c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020c8:	785b      	ldrb	r3, [r3, #1]
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d16f      	bne.n	80021ae <PCD_EP_ISR_Handler+0x6f2>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	2250      	movs	r2, #80	; 0x50
 80020da:	5a9b      	ldrh	r3, [r3, r2]
 80020dc:	b29b      	uxth	r3, r3
 80020de:	001a      	movs	r2, r3
 80020e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020e2:	189b      	adds	r3, r3, r2
 80020e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	00da      	lsls	r2, r3, #3
 80020ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020ee:	18d3      	adds	r3, r2, r3
 80020f0:	4a1e      	ldr	r2, [pc, #120]	; (800216c <PCD_EP_ISR_Handler+0x6b0>)
 80020f2:	4694      	mov	ip, r2
 80020f4:	4463      	add	r3, ip
 80020f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80020f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020fa:	2200      	movs	r2, #0
 80020fc:	801a      	strh	r2, [r3, #0]
 80020fe:	e056      	b.n	80021ae <PCD_EP_ISR_Handler+0x6f2>
          }
          else
          {
            PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002106:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002108:	785b      	ldrb	r3, [r3, #1]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d136      	bne.n	800217c <PCD_EP_ISR_Handler+0x6c0>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	637b      	str	r3, [r7, #52]	; 0x34
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	2250      	movs	r2, #80	; 0x50
 800211a:	5a9b      	ldrh	r3, [r3, r2]
 800211c:	b29b      	uxth	r3, r3
 800211e:	001a      	movs	r2, r3
 8002120:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002122:	189b      	adds	r3, r3, r2
 8002124:	637b      	str	r3, [r7, #52]	; 0x34
 8002126:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	00da      	lsls	r2, r3, #3
 800212c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800212e:	18d3      	adds	r3, r2, r3
 8002130:	4a0b      	ldr	r2, [pc, #44]	; (8002160 <PCD_EP_ISR_Handler+0x6a4>)
 8002132:	4694      	mov	ip, r2
 8002134:	4463      	add	r3, ip
 8002136:	633b      	str	r3, [r7, #48]	; 0x30
 8002138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800213a:	881b      	ldrh	r3, [r3, #0]
 800213c:	b29b      	uxth	r3, r3
 800213e:	4a0e      	ldr	r2, [pc, #56]	; (8002178 <PCD_EP_ISR_Handler+0x6bc>)
 8002140:	4013      	ands	r3, r2
 8002142:	b29a      	uxth	r2, r3
 8002144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002146:	801a      	strh	r2, [r3, #0]
 8002148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800214a:	881b      	ldrh	r3, [r3, #0]
 800214c:	b29b      	uxth	r3, r3
 800214e:	4a09      	ldr	r2, [pc, #36]	; (8002174 <PCD_EP_ISR_Handler+0x6b8>)
 8002150:	4313      	orrs	r3, r2
 8002152:	b29a      	uxth	r2, r3
 8002154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002156:	801a      	strh	r2, [r3, #0]
 8002158:	e029      	b.n	80021ae <PCD_EP_ISR_Handler+0x6f2>
 800215a:	46c0      	nop			; (mov r8, r8)
 800215c:	00000f8f 	.word	0x00000f8f
 8002160:	00000406 	.word	0x00000406
 8002164:	ffff8f8f 	.word	0xffff8f8f
 8002168:	ffff80c0 	.word	0xffff80c0
 800216c:	00000402 	.word	0x00000402
 8002170:	ffff8f0f 	.word	0xffff8f0f
 8002174:	ffff8000 	.word	0xffff8000
 8002178:	ffff83ff 	.word	0xffff83ff
 800217c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800217e:	785b      	ldrb	r3, [r3, #1]
 8002180:	2b01      	cmp	r3, #1
 8002182:	d114      	bne.n	80021ae <PCD_EP_ISR_Handler+0x6f2>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	2250      	movs	r2, #80	; 0x50
 800218a:	5a9b      	ldrh	r3, [r3, r2]
 800218c:	b29b      	uxth	r3, r3
 800218e:	001a      	movs	r2, r3
 8002190:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002192:	189b      	adds	r3, r3, r2
 8002194:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002196:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	00da      	lsls	r2, r3, #3
 800219c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800219e:	18d3      	adds	r3, r2, r3
 80021a0:	4a3d      	ldr	r2, [pc, #244]	; (8002298 <PCD_EP_ISR_Handler+0x7dc>)
 80021a2:	4694      	mov	ip, r2
 80021a4:	4463      	add	r3, ip
 80021a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80021a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021aa:	2200      	movs	r2, #0
 80021ac:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80021ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021b0:	781a      	ldrb	r2, [r3, #0]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	0011      	movs	r1, r2
 80021b6:	0018      	movs	r0, r3
 80021b8:	f005 f94e 	bl	8007458 <HAL_PCD_DataInStageCallback>
 80021bc:	e05c      	b.n	8002278 <PCD_EP_ISR_Handler+0x7bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        /* Manage Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U))
 80021be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021c0:	78db      	ldrb	r3, [r3, #3]
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d150      	bne.n	8002268 <PCD_EP_ISR_Handler+0x7ac>
 80021c6:	2352      	movs	r3, #82	; 0x52
 80021c8:	18fb      	adds	r3, r7, r3
 80021ca:	881a      	ldrh	r2, [r3, #0]
 80021cc:	2380      	movs	r3, #128	; 0x80
 80021ce:	005b      	lsls	r3, r3, #1
 80021d0:	4013      	ands	r3, r2
 80021d2:	d149      	bne.n	8002268 <PCD_EP_ISR_Handler+0x7ac>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	2250      	movs	r2, #80	; 0x50
 80021da:	5a9b      	ldrh	r3, [r3, r2]
 80021dc:	b29b      	uxth	r3, r3
 80021de:	001a      	movs	r2, r3
 80021e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	00db      	lsls	r3, r3, #3
 80021e6:	18d2      	adds	r2, r2, r3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	18d3      	adds	r3, r2, r3
 80021ee:	4a2b      	ldr	r2, [pc, #172]	; (800229c <PCD_EP_ISR_Handler+0x7e0>)
 80021f0:	4694      	mov	ip, r2
 80021f2:	4463      	add	r3, ip
 80021f4:	881a      	ldrh	r2, [r3, #0]
 80021f6:	2140      	movs	r1, #64	; 0x40
 80021f8:	187b      	adds	r3, r7, r1
 80021fa:	0592      	lsls	r2, r2, #22
 80021fc:	0d92      	lsrs	r2, r2, #22
 80021fe:	801a      	strh	r2, [r3, #0]

          if (ep->xfer_len > TxByteNbre)
 8002200:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002202:	699a      	ldr	r2, [r3, #24]
 8002204:	187b      	adds	r3, r7, r1
 8002206:	881b      	ldrh	r3, [r3, #0]
 8002208:	429a      	cmp	r2, r3
 800220a:	d907      	bls.n	800221c <PCD_EP_ISR_Handler+0x760>
          {
            ep->xfer_len -= TxByteNbre;
 800220c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800220e:	699a      	ldr	r2, [r3, #24]
 8002210:	187b      	adds	r3, r7, r1
 8002212:	881b      	ldrh	r3, [r3, #0]
 8002214:	1ad2      	subs	r2, r2, r3
 8002216:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002218:	619a      	str	r2, [r3, #24]
 800221a:	e002      	b.n	8002222 <PCD_EP_ISR_Handler+0x766>
          }
          else
          {
            ep->xfer_len = 0U;
 800221c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800221e:	2200      	movs	r2, #0
 8002220:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002222:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002224:	699b      	ldr	r3, [r3, #24]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d107      	bne.n	800223a <PCD_EP_ISR_Handler+0x77e>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800222a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800222c:	781a      	ldrb	r2, [r3, #0]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	0011      	movs	r1, r2
 8002232:	0018      	movs	r0, r3
 8002234:	f005 f910 	bl	8007458 <HAL_PCD_DataInStageCallback>
 8002238:	e01e      	b.n	8002278 <PCD_EP_ISR_Handler+0x7bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 800223a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800223c:	695a      	ldr	r2, [r3, #20]
 800223e:	2140      	movs	r1, #64	; 0x40
 8002240:	187b      	adds	r3, r7, r1
 8002242:	881b      	ldrh	r3, [r3, #0]
 8002244:	18d2      	adds	r2, r2, r3
 8002246:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002248:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 800224a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800224c:	69da      	ldr	r2, [r3, #28]
 800224e:	187b      	adds	r3, r7, r1
 8002250:	881b      	ldrh	r3, [r3, #0]
 8002252:	18d2      	adds	r2, r2, r3
 8002254:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002256:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800225e:	0011      	movs	r1, r2
 8002260:	0018      	movs	r0, r3
 8002262:	f002 f905 	bl	8004470 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002266:	e007      	b.n	8002278 <PCD_EP_ISR_Handler+0x7bc>
          }
        }
        /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002268:	2352      	movs	r3, #82	; 0x52
 800226a:	18fb      	adds	r3, r7, r3
 800226c:	881a      	ldrh	r2, [r3, #0]
 800226e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	0018      	movs	r0, r3
 8002274:	f000 f930 	bl	80024d8 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	2244      	movs	r2, #68	; 0x44
 800227e:	5a9b      	ldrh	r3, [r3, r2]
 8002280:	b29b      	uxth	r3, r3
 8002282:	b21b      	sxth	r3, r3
 8002284:	2b00      	cmp	r3, #0
 8002286:	da01      	bge.n	800228c <PCD_EP_ISR_Handler+0x7d0>
 8002288:	f7ff fc1e 	bl	8001ac8 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 800228c:	2300      	movs	r3, #0
}
 800228e:	0018      	movs	r0, r3
 8002290:	46bd      	mov	sp, r7
 8002292:	b016      	add	sp, #88	; 0x58
 8002294:	bdb0      	pop	{r4, r5, r7, pc}
 8002296:	46c0      	nop			; (mov r8, r8)
 8002298:	00000406 	.word	0x00000406
 800229c:	00000402 	.word	0x00000402

080022a0 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80022a0:	b590      	push	{r4, r7, lr}
 80022a2:	b089      	sub	sp, #36	; 0x24
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	60f8      	str	r0, [r7, #12]
 80022a8:	60b9      	str	r1, [r7, #8]
 80022aa:	1dbb      	adds	r3, r7, #6
 80022ac:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80022ae:	1dbb      	adds	r3, r7, #6
 80022b0:	881a      	ldrh	r2, [r3, #0]
 80022b2:	2380      	movs	r3, #128	; 0x80
 80022b4:	01db      	lsls	r3, r3, #7
 80022b6:	4013      	ands	r3, r2
 80022b8:	d100      	bne.n	80022bc <HAL_PCD_EP_DB_Receive+0x1c>
 80022ba:	e07d      	b.n	80023b8 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	2250      	movs	r2, #80	; 0x50
 80022c2:	5a9b      	ldrh	r3, [r3, r2]
 80022c4:	b29b      	uxth	r3, r3
 80022c6:	001a      	movs	r2, r3
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	00db      	lsls	r3, r3, #3
 80022ce:	18d2      	adds	r2, r2, r3
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	18d3      	adds	r3, r2, r3
 80022d6:	4a7a      	ldr	r2, [pc, #488]	; (80024c0 <HAL_PCD_EP_DB_Receive+0x220>)
 80022d8:	4694      	mov	ip, r2
 80022da:	4463      	add	r3, ip
 80022dc:	881a      	ldrh	r2, [r3, #0]
 80022de:	211a      	movs	r1, #26
 80022e0:	187b      	adds	r3, r7, r1
 80022e2:	0592      	lsls	r2, r2, #22
 80022e4:	0d92      	lsrs	r2, r2, #22
 80022e6:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	699a      	ldr	r2, [r3, #24]
 80022ec:	187b      	adds	r3, r7, r1
 80022ee:	881b      	ldrh	r3, [r3, #0]
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d307      	bcc.n	8002304 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	699a      	ldr	r2, [r3, #24]
 80022f8:	187b      	adds	r3, r7, r1
 80022fa:	881b      	ldrh	r3, [r3, #0]
 80022fc:	1ad2      	subs	r2, r2, r3
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	619a      	str	r2, [r3, #24]
 8002302:	e002      	b.n	800230a <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	2200      	movs	r2, #0
 8002308:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	699b      	ldr	r3, [r3, #24]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d121      	bne.n	8002356 <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	001a      	movs	r2, r3
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	18d3      	adds	r3, r2, r3
 8002320:	881b      	ldrh	r3, [r3, #0]
 8002322:	b29a      	uxth	r2, r3
 8002324:	2018      	movs	r0, #24
 8002326:	183b      	adds	r3, r7, r0
 8002328:	4966      	ldr	r1, [pc, #408]	; (80024c4 <HAL_PCD_EP_DB_Receive+0x224>)
 800232a:	400a      	ands	r2, r1
 800232c:	801a      	strh	r2, [r3, #0]
 800232e:	183b      	adds	r3, r7, r0
 8002330:	183a      	adds	r2, r7, r0
 8002332:	8812      	ldrh	r2, [r2, #0]
 8002334:	2180      	movs	r1, #128	; 0x80
 8002336:	0189      	lsls	r1, r1, #6
 8002338:	404a      	eors	r2, r1
 800233a:	801a      	strh	r2, [r3, #0]
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	001a      	movs	r2, r3
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	781b      	ldrb	r3, [r3, #0]
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	18d3      	adds	r3, r2, r3
 800234a:	183a      	adds	r2, r7, r0
 800234c:	8812      	ldrh	r2, [r2, #0]
 800234e:	495e      	ldr	r1, [pc, #376]	; (80024c8 <HAL_PCD_EP_DB_Receive+0x228>)
 8002350:	430a      	orrs	r2, r1
 8002352:	b292      	uxth	r2, r2
 8002354:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002356:	1dbb      	adds	r3, r7, #6
 8002358:	881b      	ldrh	r3, [r3, #0]
 800235a:	2240      	movs	r2, #64	; 0x40
 800235c:	4013      	ands	r3, r2
 800235e:	d01a      	beq.n	8002396 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	001a      	movs	r2, r3
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	18d3      	adds	r3, r2, r3
 800236e:	881b      	ldrh	r3, [r3, #0]
 8002370:	b29a      	uxth	r2, r3
 8002372:	2016      	movs	r0, #22
 8002374:	183b      	adds	r3, r7, r0
 8002376:	4955      	ldr	r1, [pc, #340]	; (80024cc <HAL_PCD_EP_DB_Receive+0x22c>)
 8002378:	400a      	ands	r2, r1
 800237a:	801a      	strh	r2, [r3, #0]
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	001a      	movs	r2, r3
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	18d3      	adds	r3, r2, r3
 800238a:	183a      	adds	r2, r7, r0
 800238c:	8812      	ldrh	r2, [r2, #0]
 800238e:	4950      	ldr	r1, [pc, #320]	; (80024d0 <HAL_PCD_EP_DB_Receive+0x230>)
 8002390:	430a      	orrs	r2, r1
 8002392:	b292      	uxth	r2, r2
 8002394:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8002396:	241a      	movs	r4, #26
 8002398:	193b      	adds	r3, r7, r4
 800239a:	881b      	ldrh	r3, [r3, #0]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d100      	bne.n	80023a2 <HAL_PCD_EP_DB_Receive+0x102>
 80023a0:	e086      	b.n	80024b0 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	6818      	ldr	r0, [r3, #0]
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	6959      	ldr	r1, [r3, #20]
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	891a      	ldrh	r2, [r3, #8]
 80023ae:	193b      	adds	r3, r7, r4
 80023b0:	881b      	ldrh	r3, [r3, #0]
 80023b2:	f003 fa95 	bl	80058e0 <USB_ReadPMA>
 80023b6:	e07b      	b.n	80024b0 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	2250      	movs	r2, #80	; 0x50
 80023be:	5a9b      	ldrh	r3, [r3, r2]
 80023c0:	b29b      	uxth	r3, r3
 80023c2:	001a      	movs	r2, r3
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	00db      	lsls	r3, r3, #3
 80023ca:	18d2      	adds	r2, r2, r3
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	18d3      	adds	r3, r2, r3
 80023d2:	4a40      	ldr	r2, [pc, #256]	; (80024d4 <HAL_PCD_EP_DB_Receive+0x234>)
 80023d4:	4694      	mov	ip, r2
 80023d6:	4463      	add	r3, ip
 80023d8:	881a      	ldrh	r2, [r3, #0]
 80023da:	211a      	movs	r1, #26
 80023dc:	187b      	adds	r3, r7, r1
 80023de:	0592      	lsls	r2, r2, #22
 80023e0:	0d92      	lsrs	r2, r2, #22
 80023e2:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	699a      	ldr	r2, [r3, #24]
 80023e8:	187b      	adds	r3, r7, r1
 80023ea:	881b      	ldrh	r3, [r3, #0]
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d307      	bcc.n	8002400 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	699a      	ldr	r2, [r3, #24]
 80023f4:	187b      	adds	r3, r7, r1
 80023f6:	881b      	ldrh	r3, [r3, #0]
 80023f8:	1ad2      	subs	r2, r2, r3
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	619a      	str	r2, [r3, #24]
 80023fe:	e002      	b.n	8002406 <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	2200      	movs	r2, #0
 8002404:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	699b      	ldr	r3, [r3, #24]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d121      	bne.n	8002452 <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	001a      	movs	r2, r3
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	18d3      	adds	r3, r2, r3
 800241c:	881b      	ldrh	r3, [r3, #0]
 800241e:	b29a      	uxth	r2, r3
 8002420:	201e      	movs	r0, #30
 8002422:	183b      	adds	r3, r7, r0
 8002424:	4927      	ldr	r1, [pc, #156]	; (80024c4 <HAL_PCD_EP_DB_Receive+0x224>)
 8002426:	400a      	ands	r2, r1
 8002428:	801a      	strh	r2, [r3, #0]
 800242a:	183b      	adds	r3, r7, r0
 800242c:	183a      	adds	r2, r7, r0
 800242e:	8812      	ldrh	r2, [r2, #0]
 8002430:	2180      	movs	r1, #128	; 0x80
 8002432:	0189      	lsls	r1, r1, #6
 8002434:	404a      	eors	r2, r1
 8002436:	801a      	strh	r2, [r3, #0]
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	001a      	movs	r2, r3
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	18d3      	adds	r3, r2, r3
 8002446:	183a      	adds	r2, r7, r0
 8002448:	8812      	ldrh	r2, [r2, #0]
 800244a:	491f      	ldr	r1, [pc, #124]	; (80024c8 <HAL_PCD_EP_DB_Receive+0x228>)
 800244c:	430a      	orrs	r2, r1
 800244e:	b292      	uxth	r2, r2
 8002450:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002452:	1dbb      	adds	r3, r7, #6
 8002454:	881b      	ldrh	r3, [r3, #0]
 8002456:	2240      	movs	r2, #64	; 0x40
 8002458:	4013      	ands	r3, r2
 800245a:	d11a      	bne.n	8002492 <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	001a      	movs	r2, r3
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	18d3      	adds	r3, r2, r3
 800246a:	881b      	ldrh	r3, [r3, #0]
 800246c:	b29a      	uxth	r2, r3
 800246e:	201c      	movs	r0, #28
 8002470:	183b      	adds	r3, r7, r0
 8002472:	4916      	ldr	r1, [pc, #88]	; (80024cc <HAL_PCD_EP_DB_Receive+0x22c>)
 8002474:	400a      	ands	r2, r1
 8002476:	801a      	strh	r2, [r3, #0]
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	001a      	movs	r2, r3
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	18d3      	adds	r3, r2, r3
 8002486:	183a      	adds	r2, r7, r0
 8002488:	8812      	ldrh	r2, [r2, #0]
 800248a:	4911      	ldr	r1, [pc, #68]	; (80024d0 <HAL_PCD_EP_DB_Receive+0x230>)
 800248c:	430a      	orrs	r2, r1
 800248e:	b292      	uxth	r2, r2
 8002490:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8002492:	241a      	movs	r4, #26
 8002494:	193b      	adds	r3, r7, r4
 8002496:	881b      	ldrh	r3, [r3, #0]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d009      	beq.n	80024b0 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	6818      	ldr	r0, [r3, #0]
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	6959      	ldr	r1, [r3, #20]
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	895a      	ldrh	r2, [r3, #10]
 80024a8:	193b      	adds	r3, r7, r4
 80024aa:	881b      	ldrh	r3, [r3, #0]
 80024ac:	f003 fa18 	bl	80058e0 <USB_ReadPMA>
    }
  }

  return count;
 80024b0:	231a      	movs	r3, #26
 80024b2:	18fb      	adds	r3, r7, r3
 80024b4:	881b      	ldrh	r3, [r3, #0]
}
 80024b6:	0018      	movs	r0, r3
 80024b8:	46bd      	mov	sp, r7
 80024ba:	b009      	add	sp, #36	; 0x24
 80024bc:	bd90      	pop	{r4, r7, pc}
 80024be:	46c0      	nop			; (mov r8, r8)
 80024c0:	00000402 	.word	0x00000402
 80024c4:	ffffbf8f 	.word	0xffffbf8f
 80024c8:	ffff8080 	.word	0xffff8080
 80024cc:	ffff8f8f 	.word	0xffff8f8f
 80024d0:	ffff80c0 	.word	0xffff80c0
 80024d4:	00000406 	.word	0x00000406

080024d8 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b0a2      	sub	sp, #136	; 0x88
 80024dc:	af00      	add	r7, sp, #0
 80024de:	60f8      	str	r0, [r7, #12]
 80024e0:	60b9      	str	r1, [r7, #8]
 80024e2:	1dbb      	adds	r3, r7, #6
 80024e4:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80024e6:	1dbb      	adds	r3, r7, #6
 80024e8:	881b      	ldrh	r3, [r3, #0]
 80024ea:	2240      	movs	r2, #64	; 0x40
 80024ec:	4013      	ands	r3, r2
 80024ee:	d100      	bne.n	80024f2 <HAL_PCD_EP_DB_Transmit+0x1a>
 80024f0:	e1c8      	b.n	8002884 <HAL_PCD_EP_DB_Transmit+0x3ac>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	2250      	movs	r2, #80	; 0x50
 80024f8:	5a9b      	ldrh	r3, [r3, r2]
 80024fa:	b29b      	uxth	r3, r3
 80024fc:	001a      	movs	r2, r3
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	00db      	lsls	r3, r3, #3
 8002504:	18d2      	adds	r2, r2, r3
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	18d3      	adds	r3, r2, r3
 800250c:	4ad7      	ldr	r2, [pc, #860]	; (800286c <HAL_PCD_EP_DB_Transmit+0x394>)
 800250e:	4694      	mov	ip, r2
 8002510:	4463      	add	r3, ip
 8002512:	881a      	ldrh	r2, [r3, #0]
 8002514:	214e      	movs	r1, #78	; 0x4e
 8002516:	187b      	adds	r3, r7, r1
 8002518:	0592      	lsls	r2, r2, #22
 800251a:	0d92      	lsrs	r2, r2, #22
 800251c:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxByteNbre)
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	699a      	ldr	r2, [r3, #24]
 8002522:	187b      	adds	r3, r7, r1
 8002524:	881b      	ldrh	r3, [r3, #0]
 8002526:	429a      	cmp	r2, r3
 8002528:	d907      	bls.n	800253a <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	699a      	ldr	r2, [r3, #24]
 800252e:	187b      	adds	r3, r7, r1
 8002530:	881b      	ldrh	r3, [r3, #0]
 8002532:	1ad2      	subs	r2, r2, r3
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	619a      	str	r2, [r3, #24]
 8002538:	e002      	b.n	8002540 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	2200      	movs	r2, #0
 800253e:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	699b      	ldr	r3, [r3, #24]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d000      	beq.n	800254a <HAL_PCD_EP_DB_Transmit+0x72>
 8002548:	e0b5      	b.n	80026b6 <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	785b      	ldrb	r3, [r3, #1]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d125      	bne.n	800259e <HAL_PCD_EP_DB_Transmit+0xc6>
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	62bb      	str	r3, [r7, #40]	; 0x28
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	2250      	movs	r2, #80	; 0x50
 800255e:	5a9b      	ldrh	r3, [r3, r2]
 8002560:	b29b      	uxth	r3, r3
 8002562:	001a      	movs	r2, r3
 8002564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002566:	189b      	adds	r3, r3, r2
 8002568:	62bb      	str	r3, [r7, #40]	; 0x28
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	781b      	ldrb	r3, [r3, #0]
 800256e:	00da      	lsls	r2, r3, #3
 8002570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002572:	18d3      	adds	r3, r2, r3
 8002574:	4abd      	ldr	r2, [pc, #756]	; (800286c <HAL_PCD_EP_DB_Transmit+0x394>)
 8002576:	4694      	mov	ip, r2
 8002578:	4463      	add	r3, ip
 800257a:	627b      	str	r3, [r7, #36]	; 0x24
 800257c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257e:	881b      	ldrh	r3, [r3, #0]
 8002580:	b29b      	uxth	r3, r3
 8002582:	4abb      	ldr	r2, [pc, #748]	; (8002870 <HAL_PCD_EP_DB_Transmit+0x398>)
 8002584:	4013      	ands	r3, r2
 8002586:	b29a      	uxth	r2, r3
 8002588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258a:	801a      	strh	r2, [r3, #0]
 800258c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258e:	881b      	ldrh	r3, [r3, #0]
 8002590:	b29b      	uxth	r3, r3
 8002592:	4ab8      	ldr	r2, [pc, #736]	; (8002874 <HAL_PCD_EP_DB_Transmit+0x39c>)
 8002594:	4313      	orrs	r3, r2
 8002596:	b29a      	uxth	r2, r3
 8002598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259a:	801a      	strh	r2, [r3, #0]
 800259c:	e01b      	b.n	80025d6 <HAL_PCD_EP_DB_Transmit+0xfe>
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	785b      	ldrb	r3, [r3, #1]
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d117      	bne.n	80025d6 <HAL_PCD_EP_DB_Transmit+0xfe>
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	633b      	str	r3, [r7, #48]	; 0x30
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	2250      	movs	r2, #80	; 0x50
 80025b2:	5a9b      	ldrh	r3, [r3, r2]
 80025b4:	b29b      	uxth	r3, r3
 80025b6:	001a      	movs	r2, r3
 80025b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025ba:	189b      	adds	r3, r3, r2
 80025bc:	633b      	str	r3, [r7, #48]	; 0x30
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	00da      	lsls	r2, r3, #3
 80025c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025c6:	18d3      	adds	r3, r2, r3
 80025c8:	4aa8      	ldr	r2, [pc, #672]	; (800286c <HAL_PCD_EP_DB_Transmit+0x394>)
 80025ca:	4694      	mov	ip, r2
 80025cc:	4463      	add	r3, ip
 80025ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025d2:	2200      	movs	r2, #0
 80025d4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	623b      	str	r3, [r7, #32]
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	785b      	ldrb	r3, [r3, #1]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d125      	bne.n	8002630 <HAL_PCD_EP_DB_Transmit+0x158>
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	61bb      	str	r3, [r7, #24]
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	2250      	movs	r2, #80	; 0x50
 80025f0:	5a9b      	ldrh	r3, [r3, r2]
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	001a      	movs	r2, r3
 80025f6:	69bb      	ldr	r3, [r7, #24]
 80025f8:	189b      	adds	r3, r3, r2
 80025fa:	61bb      	str	r3, [r7, #24]
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	00da      	lsls	r2, r3, #3
 8002602:	69bb      	ldr	r3, [r7, #24]
 8002604:	18d3      	adds	r3, r2, r3
 8002606:	4a9c      	ldr	r2, [pc, #624]	; (8002878 <HAL_PCD_EP_DB_Transmit+0x3a0>)
 8002608:	4694      	mov	ip, r2
 800260a:	4463      	add	r3, ip
 800260c:	617b      	str	r3, [r7, #20]
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	881b      	ldrh	r3, [r3, #0]
 8002612:	b29b      	uxth	r3, r3
 8002614:	4a96      	ldr	r2, [pc, #600]	; (8002870 <HAL_PCD_EP_DB_Transmit+0x398>)
 8002616:	4013      	ands	r3, r2
 8002618:	b29a      	uxth	r2, r3
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	801a      	strh	r2, [r3, #0]
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	881b      	ldrh	r3, [r3, #0]
 8002622:	b29b      	uxth	r3, r3
 8002624:	4a93      	ldr	r2, [pc, #588]	; (8002874 <HAL_PCD_EP_DB_Transmit+0x39c>)
 8002626:	4313      	orrs	r3, r2
 8002628:	b29a      	uxth	r2, r3
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	801a      	strh	r2, [r3, #0]
 800262e:	e018      	b.n	8002662 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	785b      	ldrb	r3, [r3, #1]
 8002634:	2b01      	cmp	r3, #1
 8002636:	d114      	bne.n	8002662 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	2250      	movs	r2, #80	; 0x50
 800263e:	5a9b      	ldrh	r3, [r3, r2]
 8002640:	b29b      	uxth	r3, r3
 8002642:	001a      	movs	r2, r3
 8002644:	6a3b      	ldr	r3, [r7, #32]
 8002646:	189b      	adds	r3, r3, r2
 8002648:	623b      	str	r3, [r7, #32]
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	781b      	ldrb	r3, [r3, #0]
 800264e:	00da      	lsls	r2, r3, #3
 8002650:	6a3b      	ldr	r3, [r7, #32]
 8002652:	18d3      	adds	r3, r2, r3
 8002654:	4a88      	ldr	r2, [pc, #544]	; (8002878 <HAL_PCD_EP_DB_Transmit+0x3a0>)
 8002656:	4694      	mov	ip, r2
 8002658:	4463      	add	r3, ip
 800265a:	61fb      	str	r3, [r7, #28]
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	2200      	movs	r2, #0
 8002660:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	781a      	ldrb	r2, [r3, #0]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	0011      	movs	r1, r2
 800266a:	0018      	movs	r0, r3
 800266c:	f004 fef4 	bl	8007458 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002670:	1dbb      	adds	r3, r7, #6
 8002672:	881a      	ldrh	r2, [r3, #0]
 8002674:	2380      	movs	r3, #128	; 0x80
 8002676:	01db      	lsls	r3, r3, #7
 8002678:	4013      	ands	r3, r2
 800267a:	d100      	bne.n	800267e <HAL_PCD_EP_DB_Transmit+0x1a6>
 800267c:	e2d4      	b.n	8002c28 <HAL_PCD_EP_DB_Transmit+0x750>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	001a      	movs	r2, r3
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	18d3      	adds	r3, r2, r3
 800268c:	881b      	ldrh	r3, [r3, #0]
 800268e:	b29a      	uxth	r2, r3
 8002690:	2012      	movs	r0, #18
 8002692:	183b      	adds	r3, r7, r0
 8002694:	4979      	ldr	r1, [pc, #484]	; (800287c <HAL_PCD_EP_DB_Transmit+0x3a4>)
 8002696:	400a      	ands	r2, r1
 8002698:	801a      	strh	r2, [r3, #0]
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	001a      	movs	r2, r3
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	009b      	lsls	r3, r3, #2
 80026a6:	18d3      	adds	r3, r2, r3
 80026a8:	183a      	adds	r2, r7, r0
 80026aa:	8812      	ldrh	r2, [r2, #0]
 80026ac:	4974      	ldr	r1, [pc, #464]	; (8002880 <HAL_PCD_EP_DB_Transmit+0x3a8>)
 80026ae:	430a      	orrs	r2, r1
 80026b0:	b292      	uxth	r2, r2
 80026b2:	801a      	strh	r2, [r3, #0]
 80026b4:	e2b8      	b.n	8002c28 <HAL_PCD_EP_DB_Transmit+0x750>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80026b6:	1dbb      	adds	r3, r7, #6
 80026b8:	881a      	ldrh	r2, [r3, #0]
 80026ba:	2380      	movs	r3, #128	; 0x80
 80026bc:	01db      	lsls	r3, r3, #7
 80026be:	4013      	ands	r3, r2
 80026c0:	d01a      	beq.n	80026f8 <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	001a      	movs	r2, r3
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	18d3      	adds	r3, r2, r3
 80026d0:	881b      	ldrh	r3, [r3, #0]
 80026d2:	b29a      	uxth	r2, r3
 80026d4:	2044      	movs	r0, #68	; 0x44
 80026d6:	183b      	adds	r3, r7, r0
 80026d8:	4968      	ldr	r1, [pc, #416]	; (800287c <HAL_PCD_EP_DB_Transmit+0x3a4>)
 80026da:	400a      	ands	r2, r1
 80026dc:	801a      	strh	r2, [r3, #0]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	001a      	movs	r2, r3
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	18d3      	adds	r3, r2, r3
 80026ec:	183a      	adds	r2, r7, r0
 80026ee:	8812      	ldrh	r2, [r2, #0]
 80026f0:	4963      	ldr	r1, [pc, #396]	; (8002880 <HAL_PCD_EP_DB_Transmit+0x3a8>)
 80026f2:	430a      	orrs	r2, r1
 80026f4:	b292      	uxth	r2, r2
 80026f6:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	2224      	movs	r2, #36	; 0x24
 80026fc:	5c9b      	ldrb	r3, [r3, r2]
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d000      	beq.n	8002704 <HAL_PCD_EP_DB_Transmit+0x22c>
 8002702:	e291      	b.n	8002c28 <HAL_PCD_EP_DB_Transmit+0x750>
      {
        ep->xfer_buff += TxByteNbre;
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	695a      	ldr	r2, [r3, #20]
 8002708:	214e      	movs	r1, #78	; 0x4e
 800270a:	187b      	adds	r3, r7, r1
 800270c:	881b      	ldrh	r3, [r3, #0]
 800270e:	18d2      	adds	r2, r2, r3
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	69da      	ldr	r2, [r3, #28]
 8002718:	187b      	adds	r3, r7, r1
 800271a:	881b      	ldrh	r3, [r3, #0]
 800271c:	18d2      	adds	r2, r2, r3
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	6a1a      	ldr	r2, [r3, #32]
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	691b      	ldr	r3, [r3, #16]
 800272a:	429a      	cmp	r2, r3
 800272c:	d309      	bcc.n	8002742 <HAL_PCD_EP_DB_Transmit+0x26a>
        {
          len = ep->maxpacket;
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	691b      	ldr	r3, [r3, #16]
 8002732:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	6a1a      	ldr	r2, [r3, #32]
 8002738:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800273a:	1ad2      	subs	r2, r2, r3
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	621a      	str	r2, [r3, #32]
 8002740:	e016      	b.n	8002770 <HAL_PCD_EP_DB_Transmit+0x298>
        }
        else if (ep->xfer_len_db == 0U)
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	6a1b      	ldr	r3, [r3, #32]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d108      	bne.n	800275c <HAL_PCD_EP_DB_Transmit+0x284>
        {
          len = TxByteNbre;
 800274a:	234e      	movs	r3, #78	; 0x4e
 800274c:	18fb      	adds	r3, r7, r3
 800274e:	881b      	ldrh	r3, [r3, #0]
 8002750:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	2224      	movs	r2, #36	; 0x24
 8002756:	2100      	movs	r1, #0
 8002758:	5499      	strb	r1, [r3, r2]
 800275a:	e009      	b.n	8002770 <HAL_PCD_EP_DB_Transmit+0x298>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	2224      	movs	r2, #36	; 0x24
 8002760:	2100      	movs	r1, #0
 8002762:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	6a1b      	ldr	r3, [r3, #32]
 8002768:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	2200      	movs	r2, #0
 800276e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	785b      	ldrb	r3, [r3, #1]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d150      	bne.n	800281a <HAL_PCD_EP_DB_Transmit+0x342>
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	63bb      	str	r3, [r7, #56]	; 0x38
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	2250      	movs	r2, #80	; 0x50
 8002784:	5a9b      	ldrh	r3, [r3, r2]
 8002786:	b29b      	uxth	r3, r3
 8002788:	001a      	movs	r2, r3
 800278a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800278c:	189b      	adds	r3, r3, r2
 800278e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	00da      	lsls	r2, r3, #3
 8002796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002798:	18d3      	adds	r3, r2, r3
 800279a:	4a34      	ldr	r2, [pc, #208]	; (800286c <HAL_PCD_EP_DB_Transmit+0x394>)
 800279c:	4694      	mov	ip, r2
 800279e:	4463      	add	r3, ip
 80027a0:	637b      	str	r3, [r7, #52]	; 0x34
 80027a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d110      	bne.n	80027ca <HAL_PCD_EP_DB_Transmit+0x2f2>
 80027a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027aa:	881b      	ldrh	r3, [r3, #0]
 80027ac:	b29b      	uxth	r3, r3
 80027ae:	4a30      	ldr	r2, [pc, #192]	; (8002870 <HAL_PCD_EP_DB_Transmit+0x398>)
 80027b0:	4013      	ands	r3, r2
 80027b2:	b29a      	uxth	r2, r3
 80027b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027b6:	801a      	strh	r2, [r3, #0]
 80027b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027ba:	881b      	ldrh	r3, [r3, #0]
 80027bc:	b29b      	uxth	r3, r3
 80027be:	4a2d      	ldr	r2, [pc, #180]	; (8002874 <HAL_PCD_EP_DB_Transmit+0x39c>)
 80027c0:	4313      	orrs	r3, r2
 80027c2:	b29a      	uxth	r2, r3
 80027c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027c6:	801a      	strh	r2, [r3, #0]
 80027c8:	e044      	b.n	8002854 <HAL_PCD_EP_DB_Transmit+0x37c>
 80027ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027cc:	2b3e      	cmp	r3, #62	; 0x3e
 80027ce:	d810      	bhi.n	80027f2 <HAL_PCD_EP_DB_Transmit+0x31a>
 80027d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027d2:	085b      	lsrs	r3, r3, #1
 80027d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80027d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027d8:	2201      	movs	r2, #1
 80027da:	4013      	ands	r3, r2
 80027dc:	d002      	beq.n	80027e4 <HAL_PCD_EP_DB_Transmit+0x30c>
 80027de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027e0:	3301      	adds	r3, #1
 80027e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80027e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027e6:	b29b      	uxth	r3, r3
 80027e8:	029b      	lsls	r3, r3, #10
 80027ea:	b29a      	uxth	r2, r3
 80027ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027ee:	801a      	strh	r2, [r3, #0]
 80027f0:	e030      	b.n	8002854 <HAL_PCD_EP_DB_Transmit+0x37c>
 80027f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027f4:	095b      	lsrs	r3, r3, #5
 80027f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80027f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027fa:	221f      	movs	r2, #31
 80027fc:	4013      	ands	r3, r2
 80027fe:	d102      	bne.n	8002806 <HAL_PCD_EP_DB_Transmit+0x32e>
 8002800:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002802:	3b01      	subs	r3, #1
 8002804:	64bb      	str	r3, [r7, #72]	; 0x48
 8002806:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002808:	b29b      	uxth	r3, r3
 800280a:	029b      	lsls	r3, r3, #10
 800280c:	b29b      	uxth	r3, r3
 800280e:	4a19      	ldr	r2, [pc, #100]	; (8002874 <HAL_PCD_EP_DB_Transmit+0x39c>)
 8002810:	4313      	orrs	r3, r2
 8002812:	b29a      	uxth	r2, r3
 8002814:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002816:	801a      	strh	r2, [r3, #0]
 8002818:	e01c      	b.n	8002854 <HAL_PCD_EP_DB_Transmit+0x37c>
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	785b      	ldrb	r3, [r3, #1]
 800281e:	2b01      	cmp	r3, #1
 8002820:	d118      	bne.n	8002854 <HAL_PCD_EP_DB_Transmit+0x37c>
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	643b      	str	r3, [r7, #64]	; 0x40
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	2250      	movs	r2, #80	; 0x50
 800282e:	5a9b      	ldrh	r3, [r3, r2]
 8002830:	b29b      	uxth	r3, r3
 8002832:	001a      	movs	r2, r3
 8002834:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002836:	189b      	adds	r3, r3, r2
 8002838:	643b      	str	r3, [r7, #64]	; 0x40
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	781b      	ldrb	r3, [r3, #0]
 800283e:	00da      	lsls	r2, r3, #3
 8002840:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002842:	18d3      	adds	r3, r2, r3
 8002844:	4a09      	ldr	r2, [pc, #36]	; (800286c <HAL_PCD_EP_DB_Transmit+0x394>)
 8002846:	4694      	mov	ip, r2
 8002848:	4463      	add	r3, ip
 800284a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800284c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800284e:	b29a      	uxth	r2, r3
 8002850:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002852:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	6818      	ldr	r0, [r3, #0]
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	6959      	ldr	r1, [r3, #20]
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	891a      	ldrh	r2, [r3, #8]
 8002860:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002862:	b29b      	uxth	r3, r3
 8002864:	f002 fff8 	bl	8005858 <USB_WritePMA>
 8002868:	e1de      	b.n	8002c28 <HAL_PCD_EP_DB_Transmit+0x750>
 800286a:	46c0      	nop			; (mov r8, r8)
 800286c:	00000402 	.word	0x00000402
 8002870:	ffff83ff 	.word	0xffff83ff
 8002874:	ffff8000 	.word	0xffff8000
 8002878:	00000406 	.word	0x00000406
 800287c:	ffff8f8f 	.word	0xffff8f8f
 8002880:	ffffc080 	.word	0xffffc080
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	2250      	movs	r2, #80	; 0x50
 800288a:	5a9b      	ldrh	r3, [r3, r2]
 800288c:	b29b      	uxth	r3, r3
 800288e:	001a      	movs	r2, r3
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	00db      	lsls	r3, r3, #3
 8002896:	18d2      	adds	r2, r2, r3
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	18d3      	adds	r3, r2, r3
 800289e:	4aca      	ldr	r2, [pc, #808]	; (8002bc8 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 80028a0:	4694      	mov	ip, r2
 80028a2:	4463      	add	r3, ip
 80028a4:	881a      	ldrh	r2, [r3, #0]
 80028a6:	214e      	movs	r1, #78	; 0x4e
 80028a8:	187b      	adds	r3, r7, r1
 80028aa:	0592      	lsls	r2, r2, #22
 80028ac:	0d92      	lsrs	r2, r2, #22
 80028ae:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxByteNbre)
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	699a      	ldr	r2, [r3, #24]
 80028b4:	187b      	adds	r3, r7, r1
 80028b6:	881b      	ldrh	r3, [r3, #0]
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d307      	bcc.n	80028cc <HAL_PCD_EP_DB_Transmit+0x3f4>
    {
      ep->xfer_len -= TxByteNbre;
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	699a      	ldr	r2, [r3, #24]
 80028c0:	187b      	adds	r3, r7, r1
 80028c2:	881b      	ldrh	r3, [r3, #0]
 80028c4:	1ad2      	subs	r2, r2, r3
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	619a      	str	r2, [r3, #24]
 80028ca:	e002      	b.n	80028d2 <HAL_PCD_EP_DB_Transmit+0x3fa>
    }
    else
    {
      ep->xfer_len = 0U;
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	2200      	movs	r2, #0
 80028d0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	699b      	ldr	r3, [r3, #24]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d000      	beq.n	80028dc <HAL_PCD_EP_DB_Transmit+0x404>
 80028da:	e0c0      	b.n	8002a5e <HAL_PCD_EP_DB_Transmit+0x586>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	785b      	ldrb	r3, [r3, #1]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d125      	bne.n	8002930 <HAL_PCD_EP_DB_Transmit+0x458>
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	2250      	movs	r2, #80	; 0x50
 80028f0:	5a9b      	ldrh	r3, [r3, r2]
 80028f2:	b29b      	uxth	r3, r3
 80028f4:	001a      	movs	r2, r3
 80028f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028f8:	189b      	adds	r3, r3, r2
 80028fa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	00da      	lsls	r2, r3, #3
 8002902:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002904:	18d3      	adds	r3, r2, r3
 8002906:	4ab1      	ldr	r2, [pc, #708]	; (8002bcc <HAL_PCD_EP_DB_Transmit+0x6f4>)
 8002908:	4694      	mov	ip, r2
 800290a:	4463      	add	r3, ip
 800290c:	66bb      	str	r3, [r7, #104]	; 0x68
 800290e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002910:	881b      	ldrh	r3, [r3, #0]
 8002912:	b29b      	uxth	r3, r3
 8002914:	4aae      	ldr	r2, [pc, #696]	; (8002bd0 <HAL_PCD_EP_DB_Transmit+0x6f8>)
 8002916:	4013      	ands	r3, r2
 8002918:	b29a      	uxth	r2, r3
 800291a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800291c:	801a      	strh	r2, [r3, #0]
 800291e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002920:	881b      	ldrh	r3, [r3, #0]
 8002922:	b29b      	uxth	r3, r3
 8002924:	4aab      	ldr	r2, [pc, #684]	; (8002bd4 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 8002926:	4313      	orrs	r3, r2
 8002928:	b29a      	uxth	r2, r3
 800292a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800292c:	801a      	strh	r2, [r3, #0]
 800292e:	e01b      	b.n	8002968 <HAL_PCD_EP_DB_Transmit+0x490>
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	785b      	ldrb	r3, [r3, #1]
 8002934:	2b01      	cmp	r3, #1
 8002936:	d117      	bne.n	8002968 <HAL_PCD_EP_DB_Transmit+0x490>
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	677b      	str	r3, [r7, #116]	; 0x74
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	2250      	movs	r2, #80	; 0x50
 8002944:	5a9b      	ldrh	r3, [r3, r2]
 8002946:	b29b      	uxth	r3, r3
 8002948:	001a      	movs	r2, r3
 800294a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800294c:	189b      	adds	r3, r3, r2
 800294e:	677b      	str	r3, [r7, #116]	; 0x74
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	00da      	lsls	r2, r3, #3
 8002956:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002958:	18d3      	adds	r3, r2, r3
 800295a:	4a9c      	ldr	r2, [pc, #624]	; (8002bcc <HAL_PCD_EP_DB_Transmit+0x6f4>)
 800295c:	4694      	mov	ip, r2
 800295e:	4463      	add	r3, ip
 8002960:	673b      	str	r3, [r7, #112]	; 0x70
 8002962:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002964:	2200      	movs	r2, #0
 8002966:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	67bb      	str	r3, [r7, #120]	; 0x78
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	785b      	ldrb	r3, [r3, #1]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d130      	bne.n	80029d8 <HAL_PCD_EP_DB_Transmit+0x500>
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	2180      	movs	r1, #128	; 0x80
 800297c:	187a      	adds	r2, r7, r1
 800297e:	6013      	str	r3, [r2, #0]
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	2250      	movs	r2, #80	; 0x50
 8002986:	5a9b      	ldrh	r3, [r3, r2]
 8002988:	b29b      	uxth	r3, r3
 800298a:	001a      	movs	r2, r3
 800298c:	187b      	adds	r3, r7, r1
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	189b      	adds	r3, r3, r2
 8002992:	187a      	adds	r2, r7, r1
 8002994:	6013      	str	r3, [r2, #0]
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	781b      	ldrb	r3, [r3, #0]
 800299a:	00da      	lsls	r2, r3, #3
 800299c:	187b      	adds	r3, r7, r1
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	18d3      	adds	r3, r2, r3
 80029a2:	4a89      	ldr	r2, [pc, #548]	; (8002bc8 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 80029a4:	4694      	mov	ip, r2
 80029a6:	4463      	add	r3, ip
 80029a8:	2184      	movs	r1, #132	; 0x84
 80029aa:	187a      	adds	r2, r7, r1
 80029ac:	6013      	str	r3, [r2, #0]
 80029ae:	187b      	adds	r3, r7, r1
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	881b      	ldrh	r3, [r3, #0]
 80029b4:	b29b      	uxth	r3, r3
 80029b6:	4a86      	ldr	r2, [pc, #536]	; (8002bd0 <HAL_PCD_EP_DB_Transmit+0x6f8>)
 80029b8:	4013      	ands	r3, r2
 80029ba:	b29a      	uxth	r2, r3
 80029bc:	187b      	adds	r3, r7, r1
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	801a      	strh	r2, [r3, #0]
 80029c2:	187b      	adds	r3, r7, r1
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	881b      	ldrh	r3, [r3, #0]
 80029c8:	b29b      	uxth	r3, r3
 80029ca:	4a82      	ldr	r2, [pc, #520]	; (8002bd4 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 80029cc:	4313      	orrs	r3, r2
 80029ce:	b29a      	uxth	r2, r3
 80029d0:	187b      	adds	r3, r7, r1
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	801a      	strh	r2, [r3, #0]
 80029d6:	e018      	b.n	8002a0a <HAL_PCD_EP_DB_Transmit+0x532>
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	785b      	ldrb	r3, [r3, #1]
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d114      	bne.n	8002a0a <HAL_PCD_EP_DB_Transmit+0x532>
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2250      	movs	r2, #80	; 0x50
 80029e6:	5a9b      	ldrh	r3, [r3, r2]
 80029e8:	b29b      	uxth	r3, r3
 80029ea:	001a      	movs	r2, r3
 80029ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80029ee:	189b      	adds	r3, r3, r2
 80029f0:	67bb      	str	r3, [r7, #120]	; 0x78
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	781b      	ldrb	r3, [r3, #0]
 80029f6:	00da      	lsls	r2, r3, #3
 80029f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80029fa:	18d3      	adds	r3, r2, r3
 80029fc:	4a72      	ldr	r2, [pc, #456]	; (8002bc8 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 80029fe:	4694      	mov	ip, r2
 8002a00:	4463      	add	r3, ip
 8002a02:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002a04:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002a06:	2200      	movs	r2, #0
 8002a08:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	781a      	ldrb	r2, [r3, #0]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	0011      	movs	r1, r2
 8002a12:	0018      	movs	r0, r3
 8002a14:	f004 fd20 	bl	8007458 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002a18:	1dbb      	adds	r3, r7, #6
 8002a1a:	881a      	ldrh	r2, [r3, #0]
 8002a1c:	2380      	movs	r3, #128	; 0x80
 8002a1e:	01db      	lsls	r3, r3, #7
 8002a20:	4013      	ands	r3, r2
 8002a22:	d000      	beq.n	8002a26 <HAL_PCD_EP_DB_Transmit+0x54e>
 8002a24:	e100      	b.n	8002c28 <HAL_PCD_EP_DB_Transmit+0x750>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	001a      	movs	r2, r3
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	009b      	lsls	r3, r3, #2
 8002a32:	18d3      	adds	r3, r2, r3
 8002a34:	881b      	ldrh	r3, [r3, #0]
 8002a36:	b29a      	uxth	r2, r3
 8002a38:	2046      	movs	r0, #70	; 0x46
 8002a3a:	183b      	adds	r3, r7, r0
 8002a3c:	4966      	ldr	r1, [pc, #408]	; (8002bd8 <HAL_PCD_EP_DB_Transmit+0x700>)
 8002a3e:	400a      	ands	r2, r1
 8002a40:	801a      	strh	r2, [r3, #0]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	001a      	movs	r2, r3
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	781b      	ldrb	r3, [r3, #0]
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	18d3      	adds	r3, r2, r3
 8002a50:	183a      	adds	r2, r7, r0
 8002a52:	8812      	ldrh	r2, [r2, #0]
 8002a54:	4961      	ldr	r1, [pc, #388]	; (8002bdc <HAL_PCD_EP_DB_Transmit+0x704>)
 8002a56:	430a      	orrs	r2, r1
 8002a58:	b292      	uxth	r2, r2
 8002a5a:	801a      	strh	r2, [r3, #0]
 8002a5c:	e0e4      	b.n	8002c28 <HAL_PCD_EP_DB_Transmit+0x750>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002a5e:	1dbb      	adds	r3, r7, #6
 8002a60:	881a      	ldrh	r2, [r3, #0]
 8002a62:	2380      	movs	r3, #128	; 0x80
 8002a64:	01db      	lsls	r3, r3, #7
 8002a66:	4013      	ands	r3, r2
 8002a68:	d11a      	bne.n	8002aa0 <HAL_PCD_EP_DB_Transmit+0x5c8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	001a      	movs	r2, r3
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	18d3      	adds	r3, r2, r3
 8002a78:	881b      	ldrh	r3, [r3, #0]
 8002a7a:	b29a      	uxth	r2, r3
 8002a7c:	204c      	movs	r0, #76	; 0x4c
 8002a7e:	183b      	adds	r3, r7, r0
 8002a80:	4955      	ldr	r1, [pc, #340]	; (8002bd8 <HAL_PCD_EP_DB_Transmit+0x700>)
 8002a82:	400a      	ands	r2, r1
 8002a84:	801a      	strh	r2, [r3, #0]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	001a      	movs	r2, r3
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	18d3      	adds	r3, r2, r3
 8002a94:	183a      	adds	r2, r7, r0
 8002a96:	8812      	ldrh	r2, [r2, #0]
 8002a98:	4950      	ldr	r1, [pc, #320]	; (8002bdc <HAL_PCD_EP_DB_Transmit+0x704>)
 8002a9a:	430a      	orrs	r2, r1
 8002a9c:	b292      	uxth	r2, r2
 8002a9e:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	2224      	movs	r2, #36	; 0x24
 8002aa4:	5c9b      	ldrb	r3, [r3, r2]
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d000      	beq.n	8002aac <HAL_PCD_EP_DB_Transmit+0x5d4>
 8002aaa:	e0bd      	b.n	8002c28 <HAL_PCD_EP_DB_Transmit+0x750>
      {
        ep->xfer_buff += TxByteNbre;
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	695a      	ldr	r2, [r3, #20]
 8002ab0:	214e      	movs	r1, #78	; 0x4e
 8002ab2:	187b      	adds	r3, r7, r1
 8002ab4:	881b      	ldrh	r3, [r3, #0]
 8002ab6:	18d2      	adds	r2, r2, r3
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	69da      	ldr	r2, [r3, #28]
 8002ac0:	187b      	adds	r3, r7, r1
 8002ac2:	881b      	ldrh	r3, [r3, #0]
 8002ac4:	18d2      	adds	r2, r2, r3
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	6a1a      	ldr	r2, [r3, #32]
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	691b      	ldr	r3, [r3, #16]
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d309      	bcc.n	8002aea <HAL_PCD_EP_DB_Transmit+0x612>
        {
          len = ep->maxpacket;
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	691b      	ldr	r3, [r3, #16]
 8002ada:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	6a1a      	ldr	r2, [r3, #32]
 8002ae0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ae2:	1ad2      	subs	r2, r2, r3
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	621a      	str	r2, [r3, #32]
 8002ae8:	e016      	b.n	8002b18 <HAL_PCD_EP_DB_Transmit+0x640>
        }
        else if (ep->xfer_len_db == 0U)
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	6a1b      	ldr	r3, [r3, #32]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d108      	bne.n	8002b04 <HAL_PCD_EP_DB_Transmit+0x62c>
        {
          len = TxByteNbre;
 8002af2:	234e      	movs	r3, #78	; 0x4e
 8002af4:	18fb      	adds	r3, r7, r3
 8002af6:	881b      	ldrh	r3, [r3, #0]
 8002af8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	2224      	movs	r2, #36	; 0x24
 8002afe:	2100      	movs	r1, #0
 8002b00:	5499      	strb	r1, [r3, r2]
 8002b02:	e009      	b.n	8002b18 <HAL_PCD_EP_DB_Transmit+0x640>
        }
        else
        {
          len = ep->xfer_len_db;
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	6a1b      	ldr	r3, [r3, #32]
 8002b08:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	2224      	movs	r2, #36	; 0x24
 8002b14:	2100      	movs	r1, #0
 8002b16:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	667b      	str	r3, [r7, #100]	; 0x64
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	785b      	ldrb	r3, [r3, #1]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d15c      	bne.n	8002be0 <HAL_PCD_EP_DB_Transmit+0x708>
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2250      	movs	r2, #80	; 0x50
 8002b32:	5a9b      	ldrh	r3, [r3, r2]
 8002b34:	b29b      	uxth	r3, r3
 8002b36:	001a      	movs	r2, r3
 8002b38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b3a:	189b      	adds	r3, r3, r2
 8002b3c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	781b      	ldrb	r3, [r3, #0]
 8002b42:	00da      	lsls	r2, r3, #3
 8002b44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b46:	18d3      	adds	r3, r2, r3
 8002b48:	4a1f      	ldr	r2, [pc, #124]	; (8002bc8 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 8002b4a:	4694      	mov	ip, r2
 8002b4c:	4463      	add	r3, ip
 8002b4e:	65bb      	str	r3, [r7, #88]	; 0x58
 8002b50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d110      	bne.n	8002b78 <HAL_PCD_EP_DB_Transmit+0x6a0>
 8002b56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b58:	881b      	ldrh	r3, [r3, #0]
 8002b5a:	b29b      	uxth	r3, r3
 8002b5c:	4a1c      	ldr	r2, [pc, #112]	; (8002bd0 <HAL_PCD_EP_DB_Transmit+0x6f8>)
 8002b5e:	4013      	ands	r3, r2
 8002b60:	b29a      	uxth	r2, r3
 8002b62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b64:	801a      	strh	r2, [r3, #0]
 8002b66:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b68:	881b      	ldrh	r3, [r3, #0]
 8002b6a:	b29b      	uxth	r3, r3
 8002b6c:	4a19      	ldr	r2, [pc, #100]	; (8002bd4 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	b29a      	uxth	r2, r3
 8002b72:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b74:	801a      	strh	r2, [r3, #0]
 8002b76:	e04d      	b.n	8002c14 <HAL_PCD_EP_DB_Transmit+0x73c>
 8002b78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b7a:	2b3e      	cmp	r3, #62	; 0x3e
 8002b7c:	d810      	bhi.n	8002ba0 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8002b7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b80:	085b      	lsrs	r3, r3, #1
 8002b82:	657b      	str	r3, [r7, #84]	; 0x54
 8002b84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b86:	2201      	movs	r2, #1
 8002b88:	4013      	ands	r3, r2
 8002b8a:	d002      	beq.n	8002b92 <HAL_PCD_EP_DB_Transmit+0x6ba>
 8002b8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b8e:	3301      	adds	r3, #1
 8002b90:	657b      	str	r3, [r7, #84]	; 0x54
 8002b92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b94:	b29b      	uxth	r3, r3
 8002b96:	029b      	lsls	r3, r3, #10
 8002b98:	b29a      	uxth	r2, r3
 8002b9a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b9c:	801a      	strh	r2, [r3, #0]
 8002b9e:	e039      	b.n	8002c14 <HAL_PCD_EP_DB_Transmit+0x73c>
 8002ba0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ba2:	095b      	lsrs	r3, r3, #5
 8002ba4:	657b      	str	r3, [r7, #84]	; 0x54
 8002ba6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ba8:	221f      	movs	r2, #31
 8002baa:	4013      	ands	r3, r2
 8002bac:	d102      	bne.n	8002bb4 <HAL_PCD_EP_DB_Transmit+0x6dc>
 8002bae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bb0:	3b01      	subs	r3, #1
 8002bb2:	657b      	str	r3, [r7, #84]	; 0x54
 8002bb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	029b      	lsls	r3, r3, #10
 8002bba:	b29b      	uxth	r3, r3
 8002bbc:	4a05      	ldr	r2, [pc, #20]	; (8002bd4 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	b29a      	uxth	r2, r3
 8002bc2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002bc4:	801a      	strh	r2, [r3, #0]
 8002bc6:	e025      	b.n	8002c14 <HAL_PCD_EP_DB_Transmit+0x73c>
 8002bc8:	00000406 	.word	0x00000406
 8002bcc:	00000402 	.word	0x00000402
 8002bd0:	ffff83ff 	.word	0xffff83ff
 8002bd4:	ffff8000 	.word	0xffff8000
 8002bd8:	ffff8f8f 	.word	0xffff8f8f
 8002bdc:	ffffc080 	.word	0xffffc080
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	785b      	ldrb	r3, [r3, #1]
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d115      	bne.n	8002c14 <HAL_PCD_EP_DB_Transmit+0x73c>
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	2250      	movs	r2, #80	; 0x50
 8002bee:	5a9b      	ldrh	r3, [r3, r2]
 8002bf0:	b29b      	uxth	r3, r3
 8002bf2:	001a      	movs	r2, r3
 8002bf4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002bf6:	189b      	adds	r3, r3, r2
 8002bf8:	667b      	str	r3, [r7, #100]	; 0x64
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	781b      	ldrb	r3, [r3, #0]
 8002bfe:	00da      	lsls	r2, r3, #3
 8002c00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002c02:	18d3      	adds	r3, r2, r3
 8002c04:	4a1e      	ldr	r2, [pc, #120]	; (8002c80 <HAL_PCD_EP_DB_Transmit+0x7a8>)
 8002c06:	4694      	mov	ip, r2
 8002c08:	4463      	add	r3, ip
 8002c0a:	663b      	str	r3, [r7, #96]	; 0x60
 8002c0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c0e:	b29a      	uxth	r2, r3
 8002c10:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c12:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	6818      	ldr	r0, [r3, #0]
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	6959      	ldr	r1, [r3, #20]
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	895a      	ldrh	r2, [r3, #10]
 8002c20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	f002 fe18 	bl	8005858 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	001a      	movs	r2, r3
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	781b      	ldrb	r3, [r3, #0]
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	18d3      	adds	r3, r2, r3
 8002c36:	881b      	ldrh	r3, [r3, #0]
 8002c38:	b29a      	uxth	r2, r3
 8002c3a:	2010      	movs	r0, #16
 8002c3c:	183b      	adds	r3, r7, r0
 8002c3e:	4911      	ldr	r1, [pc, #68]	; (8002c84 <HAL_PCD_EP_DB_Transmit+0x7ac>)
 8002c40:	400a      	ands	r2, r1
 8002c42:	801a      	strh	r2, [r3, #0]
 8002c44:	183b      	adds	r3, r7, r0
 8002c46:	183a      	adds	r2, r7, r0
 8002c48:	8812      	ldrh	r2, [r2, #0]
 8002c4a:	2110      	movs	r1, #16
 8002c4c:	404a      	eors	r2, r1
 8002c4e:	801a      	strh	r2, [r3, #0]
 8002c50:	183b      	adds	r3, r7, r0
 8002c52:	183a      	adds	r2, r7, r0
 8002c54:	8812      	ldrh	r2, [r2, #0]
 8002c56:	2120      	movs	r1, #32
 8002c58:	404a      	eors	r2, r1
 8002c5a:	801a      	strh	r2, [r3, #0]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	001a      	movs	r2, r3
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	18d3      	adds	r3, r2, r3
 8002c6a:	183a      	adds	r2, r7, r0
 8002c6c:	8812      	ldrh	r2, [r2, #0]
 8002c6e:	4906      	ldr	r1, [pc, #24]	; (8002c88 <HAL_PCD_EP_DB_Transmit+0x7b0>)
 8002c70:	430a      	orrs	r2, r1
 8002c72:	b292      	uxth	r2, r2
 8002c74:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 8002c76:	2300      	movs	r3, #0
}
 8002c78:	0018      	movs	r0, r3
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	b022      	add	sp, #136	; 0x88
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	00000406 	.word	0x00000406
 8002c84:	ffff8fbf 	.word	0xffff8fbf
 8002c88:	ffff8080 	.word	0xffff8080

08002c8c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002c8c:	b590      	push	{r4, r7, lr}
 8002c8e:	b087      	sub	sp, #28
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	60f8      	str	r0, [r7, #12]
 8002c94:	0008      	movs	r0, r1
 8002c96:	0011      	movs	r1, r2
 8002c98:	607b      	str	r3, [r7, #4]
 8002c9a:	240a      	movs	r4, #10
 8002c9c:	193b      	adds	r3, r7, r4
 8002c9e:	1c02      	adds	r2, r0, #0
 8002ca0:	801a      	strh	r2, [r3, #0]
 8002ca2:	2308      	movs	r3, #8
 8002ca4:	18fb      	adds	r3, r7, r3
 8002ca6:	1c0a      	adds	r2, r1, #0
 8002ca8:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002caa:	0021      	movs	r1, r4
 8002cac:	187b      	adds	r3, r7, r1
 8002cae:	881b      	ldrh	r3, [r3, #0]
 8002cb0:	2280      	movs	r2, #128	; 0x80
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	b29b      	uxth	r3, r3
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d00c      	beq.n	8002cd4 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cba:	187b      	adds	r3, r7, r1
 8002cbc:	881b      	ldrh	r3, [r3, #0]
 8002cbe:	2207      	movs	r2, #7
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	1c5a      	adds	r2, r3, #1
 8002cc4:	0013      	movs	r3, r2
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	189b      	adds	r3, r3, r2
 8002cca:	00db      	lsls	r3, r3, #3
 8002ccc:	68fa      	ldr	r2, [r7, #12]
 8002cce:	18d3      	adds	r3, r2, r3
 8002cd0:	617b      	str	r3, [r7, #20]
 8002cd2:	e00b      	b.n	8002cec <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002cd4:	230a      	movs	r3, #10
 8002cd6:	18fb      	adds	r3, r7, r3
 8002cd8:	881a      	ldrh	r2, [r3, #0]
 8002cda:	0013      	movs	r3, r2
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	189b      	adds	r3, r3, r2
 8002ce0:	00db      	lsls	r3, r3, #3
 8002ce2:	3369      	adds	r3, #105	; 0x69
 8002ce4:	33ff      	adds	r3, #255	; 0xff
 8002ce6:	68fa      	ldr	r2, [r7, #12]
 8002ce8:	18d3      	adds	r3, r2, r3
 8002cea:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002cec:	2308      	movs	r3, #8
 8002cee:	18fb      	adds	r3, r7, r3
 8002cf0:	881b      	ldrh	r3, [r3, #0]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d107      	bne.n	8002d06 <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	b29a      	uxth	r2, r3
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	80da      	strh	r2, [r3, #6]
 8002d04:	e00b      	b.n	8002d1e <HAL_PCDEx_PMAConfig+0x92>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	2201      	movs	r2, #1
 8002d0a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	b29a      	uxth	r2, r3
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	0c1b      	lsrs	r3, r3, #16
 8002d18:	b29a      	uxth	r2, r3
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002d1e:	2300      	movs	r3, #0
}
 8002d20:	0018      	movs	r0, r3
 8002d22:	46bd      	mov	sp, r7
 8002d24:	b007      	add	sp, #28
 8002d26:	bd90      	pop	{r4, r7, pc}

08002d28 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b084      	sub	sp, #16
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	23ba      	movs	r3, #186	; 0xba
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	2101      	movs	r1, #1
 8002d3e:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	23b8      	movs	r3, #184	; 0xb8
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	2100      	movs	r1, #0
 8002d48:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2254      	movs	r2, #84	; 0x54
 8002d4e:	5a9b      	ldrh	r3, [r3, r2]
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	2201      	movs	r2, #1
 8002d54:	4313      	orrs	r3, r2
 8002d56:	b299      	uxth	r1, r3
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2254      	movs	r2, #84	; 0x54
 8002d5c:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2254      	movs	r2, #84	; 0x54
 8002d62:	5a9b      	ldrh	r3, [r3, r2]
 8002d64:	b29b      	uxth	r3, r3
 8002d66:	2202      	movs	r2, #2
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	b299      	uxth	r1, r3
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2254      	movs	r2, #84	; 0x54
 8002d70:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8002d72:	2300      	movs	r3, #0
}
 8002d74:	0018      	movs	r0, r3
 8002d76:	46bd      	mov	sp, r7
 8002d78:	b004      	add	sp, #16
 8002d7a:	bd80      	pop	{r7, pc}

08002d7c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b082      	sub	sp, #8
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	000a      	movs	r2, r1
 8002d86:	1cfb      	adds	r3, r7, #3
 8002d88:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002d8a:	46c0      	nop			; (mov r8, r8)
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	b002      	add	sp, #8
 8002d90:	bd80      	pop	{r7, pc}
	...

08002d94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b088      	sub	sp, #32
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d102      	bne.n	8002da8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	f000 fb76 	bl	8003494 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	2201      	movs	r2, #1
 8002dae:	4013      	ands	r3, r2
 8002db0:	d100      	bne.n	8002db4 <HAL_RCC_OscConfig+0x20>
 8002db2:	e08e      	b.n	8002ed2 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002db4:	4bc5      	ldr	r3, [pc, #788]	; (80030cc <HAL_RCC_OscConfig+0x338>)
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	220c      	movs	r2, #12
 8002dba:	4013      	ands	r3, r2
 8002dbc:	2b04      	cmp	r3, #4
 8002dbe:	d00e      	beq.n	8002dde <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002dc0:	4bc2      	ldr	r3, [pc, #776]	; (80030cc <HAL_RCC_OscConfig+0x338>)
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	220c      	movs	r2, #12
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	2b08      	cmp	r3, #8
 8002dca:	d117      	bne.n	8002dfc <HAL_RCC_OscConfig+0x68>
 8002dcc:	4bbf      	ldr	r3, [pc, #764]	; (80030cc <HAL_RCC_OscConfig+0x338>)
 8002dce:	685a      	ldr	r2, [r3, #4]
 8002dd0:	23c0      	movs	r3, #192	; 0xc0
 8002dd2:	025b      	lsls	r3, r3, #9
 8002dd4:	401a      	ands	r2, r3
 8002dd6:	2380      	movs	r3, #128	; 0x80
 8002dd8:	025b      	lsls	r3, r3, #9
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d10e      	bne.n	8002dfc <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dde:	4bbb      	ldr	r3, [pc, #748]	; (80030cc <HAL_RCC_OscConfig+0x338>)
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	2380      	movs	r3, #128	; 0x80
 8002de4:	029b      	lsls	r3, r3, #10
 8002de6:	4013      	ands	r3, r2
 8002de8:	d100      	bne.n	8002dec <HAL_RCC_OscConfig+0x58>
 8002dea:	e071      	b.n	8002ed0 <HAL_RCC_OscConfig+0x13c>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d000      	beq.n	8002df6 <HAL_RCC_OscConfig+0x62>
 8002df4:	e06c      	b.n	8002ed0 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	f000 fb4c 	bl	8003494 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d107      	bne.n	8002e14 <HAL_RCC_OscConfig+0x80>
 8002e04:	4bb1      	ldr	r3, [pc, #708]	; (80030cc <HAL_RCC_OscConfig+0x338>)
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	4bb0      	ldr	r3, [pc, #704]	; (80030cc <HAL_RCC_OscConfig+0x338>)
 8002e0a:	2180      	movs	r1, #128	; 0x80
 8002e0c:	0249      	lsls	r1, r1, #9
 8002e0e:	430a      	orrs	r2, r1
 8002e10:	601a      	str	r2, [r3, #0]
 8002e12:	e02f      	b.n	8002e74 <HAL_RCC_OscConfig+0xe0>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d10c      	bne.n	8002e36 <HAL_RCC_OscConfig+0xa2>
 8002e1c:	4bab      	ldr	r3, [pc, #684]	; (80030cc <HAL_RCC_OscConfig+0x338>)
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	4baa      	ldr	r3, [pc, #680]	; (80030cc <HAL_RCC_OscConfig+0x338>)
 8002e22:	49ab      	ldr	r1, [pc, #684]	; (80030d0 <HAL_RCC_OscConfig+0x33c>)
 8002e24:	400a      	ands	r2, r1
 8002e26:	601a      	str	r2, [r3, #0]
 8002e28:	4ba8      	ldr	r3, [pc, #672]	; (80030cc <HAL_RCC_OscConfig+0x338>)
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	4ba7      	ldr	r3, [pc, #668]	; (80030cc <HAL_RCC_OscConfig+0x338>)
 8002e2e:	49a9      	ldr	r1, [pc, #676]	; (80030d4 <HAL_RCC_OscConfig+0x340>)
 8002e30:	400a      	ands	r2, r1
 8002e32:	601a      	str	r2, [r3, #0]
 8002e34:	e01e      	b.n	8002e74 <HAL_RCC_OscConfig+0xe0>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	2b05      	cmp	r3, #5
 8002e3c:	d10e      	bne.n	8002e5c <HAL_RCC_OscConfig+0xc8>
 8002e3e:	4ba3      	ldr	r3, [pc, #652]	; (80030cc <HAL_RCC_OscConfig+0x338>)
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	4ba2      	ldr	r3, [pc, #648]	; (80030cc <HAL_RCC_OscConfig+0x338>)
 8002e44:	2180      	movs	r1, #128	; 0x80
 8002e46:	02c9      	lsls	r1, r1, #11
 8002e48:	430a      	orrs	r2, r1
 8002e4a:	601a      	str	r2, [r3, #0]
 8002e4c:	4b9f      	ldr	r3, [pc, #636]	; (80030cc <HAL_RCC_OscConfig+0x338>)
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	4b9e      	ldr	r3, [pc, #632]	; (80030cc <HAL_RCC_OscConfig+0x338>)
 8002e52:	2180      	movs	r1, #128	; 0x80
 8002e54:	0249      	lsls	r1, r1, #9
 8002e56:	430a      	orrs	r2, r1
 8002e58:	601a      	str	r2, [r3, #0]
 8002e5a:	e00b      	b.n	8002e74 <HAL_RCC_OscConfig+0xe0>
 8002e5c:	4b9b      	ldr	r3, [pc, #620]	; (80030cc <HAL_RCC_OscConfig+0x338>)
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	4b9a      	ldr	r3, [pc, #616]	; (80030cc <HAL_RCC_OscConfig+0x338>)
 8002e62:	499b      	ldr	r1, [pc, #620]	; (80030d0 <HAL_RCC_OscConfig+0x33c>)
 8002e64:	400a      	ands	r2, r1
 8002e66:	601a      	str	r2, [r3, #0]
 8002e68:	4b98      	ldr	r3, [pc, #608]	; (80030cc <HAL_RCC_OscConfig+0x338>)
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	4b97      	ldr	r3, [pc, #604]	; (80030cc <HAL_RCC_OscConfig+0x338>)
 8002e6e:	4999      	ldr	r1, [pc, #612]	; (80030d4 <HAL_RCC_OscConfig+0x340>)
 8002e70:	400a      	ands	r2, r1
 8002e72:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d014      	beq.n	8002ea6 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e7c:	f7fd fe72 	bl	8000b64 <HAL_GetTick>
 8002e80:	0003      	movs	r3, r0
 8002e82:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e84:	e008      	b.n	8002e98 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e86:	f7fd fe6d 	bl	8000b64 <HAL_GetTick>
 8002e8a:	0002      	movs	r2, r0
 8002e8c:	69bb      	ldr	r3, [r7, #24]
 8002e8e:	1ad3      	subs	r3, r2, r3
 8002e90:	2b64      	cmp	r3, #100	; 0x64
 8002e92:	d901      	bls.n	8002e98 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8002e94:	2303      	movs	r3, #3
 8002e96:	e2fd      	b.n	8003494 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e98:	4b8c      	ldr	r3, [pc, #560]	; (80030cc <HAL_RCC_OscConfig+0x338>)
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	2380      	movs	r3, #128	; 0x80
 8002e9e:	029b      	lsls	r3, r3, #10
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	d0f0      	beq.n	8002e86 <HAL_RCC_OscConfig+0xf2>
 8002ea4:	e015      	b.n	8002ed2 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ea6:	f7fd fe5d 	bl	8000b64 <HAL_GetTick>
 8002eaa:	0003      	movs	r3, r0
 8002eac:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002eae:	e008      	b.n	8002ec2 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002eb0:	f7fd fe58 	bl	8000b64 <HAL_GetTick>
 8002eb4:	0002      	movs	r2, r0
 8002eb6:	69bb      	ldr	r3, [r7, #24]
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	2b64      	cmp	r3, #100	; 0x64
 8002ebc:	d901      	bls.n	8002ec2 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	e2e8      	b.n	8003494 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ec2:	4b82      	ldr	r3, [pc, #520]	; (80030cc <HAL_RCC_OscConfig+0x338>)
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	2380      	movs	r3, #128	; 0x80
 8002ec8:	029b      	lsls	r3, r3, #10
 8002eca:	4013      	ands	r3, r2
 8002ecc:	d1f0      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x11c>
 8002ece:	e000      	b.n	8002ed2 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ed0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	2202      	movs	r2, #2
 8002ed8:	4013      	ands	r3, r2
 8002eda:	d100      	bne.n	8002ede <HAL_RCC_OscConfig+0x14a>
 8002edc:	e06c      	b.n	8002fb8 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002ede:	4b7b      	ldr	r3, [pc, #492]	; (80030cc <HAL_RCC_OscConfig+0x338>)
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	220c      	movs	r2, #12
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	d00e      	beq.n	8002f06 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002ee8:	4b78      	ldr	r3, [pc, #480]	; (80030cc <HAL_RCC_OscConfig+0x338>)
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	220c      	movs	r2, #12
 8002eee:	4013      	ands	r3, r2
 8002ef0:	2b08      	cmp	r3, #8
 8002ef2:	d11f      	bne.n	8002f34 <HAL_RCC_OscConfig+0x1a0>
 8002ef4:	4b75      	ldr	r3, [pc, #468]	; (80030cc <HAL_RCC_OscConfig+0x338>)
 8002ef6:	685a      	ldr	r2, [r3, #4]
 8002ef8:	23c0      	movs	r3, #192	; 0xc0
 8002efa:	025b      	lsls	r3, r3, #9
 8002efc:	401a      	ands	r2, r3
 8002efe:	2380      	movs	r3, #128	; 0x80
 8002f00:	021b      	lsls	r3, r3, #8
 8002f02:	429a      	cmp	r2, r3
 8002f04:	d116      	bne.n	8002f34 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f06:	4b71      	ldr	r3, [pc, #452]	; (80030cc <HAL_RCC_OscConfig+0x338>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	2202      	movs	r2, #2
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	d005      	beq.n	8002f1c <HAL_RCC_OscConfig+0x188>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d001      	beq.n	8002f1c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e2bb      	b.n	8003494 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f1c:	4b6b      	ldr	r3, [pc, #428]	; (80030cc <HAL_RCC_OscConfig+0x338>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	22f8      	movs	r2, #248	; 0xf8
 8002f22:	4393      	bics	r3, r2
 8002f24:	0019      	movs	r1, r3
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	691b      	ldr	r3, [r3, #16]
 8002f2a:	00da      	lsls	r2, r3, #3
 8002f2c:	4b67      	ldr	r3, [pc, #412]	; (80030cc <HAL_RCC_OscConfig+0x338>)
 8002f2e:	430a      	orrs	r2, r1
 8002f30:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f32:	e041      	b.n	8002fb8 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d024      	beq.n	8002f86 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f3c:	4b63      	ldr	r3, [pc, #396]	; (80030cc <HAL_RCC_OscConfig+0x338>)
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	4b62      	ldr	r3, [pc, #392]	; (80030cc <HAL_RCC_OscConfig+0x338>)
 8002f42:	2101      	movs	r1, #1
 8002f44:	430a      	orrs	r2, r1
 8002f46:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f48:	f7fd fe0c 	bl	8000b64 <HAL_GetTick>
 8002f4c:	0003      	movs	r3, r0
 8002f4e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f50:	e008      	b.n	8002f64 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f52:	f7fd fe07 	bl	8000b64 <HAL_GetTick>
 8002f56:	0002      	movs	r2, r0
 8002f58:	69bb      	ldr	r3, [r7, #24]
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	2b02      	cmp	r3, #2
 8002f5e:	d901      	bls.n	8002f64 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002f60:	2303      	movs	r3, #3
 8002f62:	e297      	b.n	8003494 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f64:	4b59      	ldr	r3, [pc, #356]	; (80030cc <HAL_RCC_OscConfig+0x338>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	2202      	movs	r2, #2
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	d0f1      	beq.n	8002f52 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f6e:	4b57      	ldr	r3, [pc, #348]	; (80030cc <HAL_RCC_OscConfig+0x338>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	22f8      	movs	r2, #248	; 0xf8
 8002f74:	4393      	bics	r3, r2
 8002f76:	0019      	movs	r1, r3
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	691b      	ldr	r3, [r3, #16]
 8002f7c:	00da      	lsls	r2, r3, #3
 8002f7e:	4b53      	ldr	r3, [pc, #332]	; (80030cc <HAL_RCC_OscConfig+0x338>)
 8002f80:	430a      	orrs	r2, r1
 8002f82:	601a      	str	r2, [r3, #0]
 8002f84:	e018      	b.n	8002fb8 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f86:	4b51      	ldr	r3, [pc, #324]	; (80030cc <HAL_RCC_OscConfig+0x338>)
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	4b50      	ldr	r3, [pc, #320]	; (80030cc <HAL_RCC_OscConfig+0x338>)
 8002f8c:	2101      	movs	r1, #1
 8002f8e:	438a      	bics	r2, r1
 8002f90:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f92:	f7fd fde7 	bl	8000b64 <HAL_GetTick>
 8002f96:	0003      	movs	r3, r0
 8002f98:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f9a:	e008      	b.n	8002fae <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f9c:	f7fd fde2 	bl	8000b64 <HAL_GetTick>
 8002fa0:	0002      	movs	r2, r0
 8002fa2:	69bb      	ldr	r3, [r7, #24]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	2b02      	cmp	r3, #2
 8002fa8:	d901      	bls.n	8002fae <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8002faa:	2303      	movs	r3, #3
 8002fac:	e272      	b.n	8003494 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fae:	4b47      	ldr	r3, [pc, #284]	; (80030cc <HAL_RCC_OscConfig+0x338>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	2202      	movs	r2, #2
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	d1f1      	bne.n	8002f9c <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	2208      	movs	r2, #8
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	d036      	beq.n	8003030 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	69db      	ldr	r3, [r3, #28]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d019      	beq.n	8002ffe <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fca:	4b40      	ldr	r3, [pc, #256]	; (80030cc <HAL_RCC_OscConfig+0x338>)
 8002fcc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fce:	4b3f      	ldr	r3, [pc, #252]	; (80030cc <HAL_RCC_OscConfig+0x338>)
 8002fd0:	2101      	movs	r1, #1
 8002fd2:	430a      	orrs	r2, r1
 8002fd4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fd6:	f7fd fdc5 	bl	8000b64 <HAL_GetTick>
 8002fda:	0003      	movs	r3, r0
 8002fdc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fde:	e008      	b.n	8002ff2 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fe0:	f7fd fdc0 	bl	8000b64 <HAL_GetTick>
 8002fe4:	0002      	movs	r2, r0
 8002fe6:	69bb      	ldr	r3, [r7, #24]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	2b02      	cmp	r3, #2
 8002fec:	d901      	bls.n	8002ff2 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e250      	b.n	8003494 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ff2:	4b36      	ldr	r3, [pc, #216]	; (80030cc <HAL_RCC_OscConfig+0x338>)
 8002ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff6:	2202      	movs	r2, #2
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	d0f1      	beq.n	8002fe0 <HAL_RCC_OscConfig+0x24c>
 8002ffc:	e018      	b.n	8003030 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ffe:	4b33      	ldr	r3, [pc, #204]	; (80030cc <HAL_RCC_OscConfig+0x338>)
 8003000:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003002:	4b32      	ldr	r3, [pc, #200]	; (80030cc <HAL_RCC_OscConfig+0x338>)
 8003004:	2101      	movs	r1, #1
 8003006:	438a      	bics	r2, r1
 8003008:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800300a:	f7fd fdab 	bl	8000b64 <HAL_GetTick>
 800300e:	0003      	movs	r3, r0
 8003010:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003012:	e008      	b.n	8003026 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003014:	f7fd fda6 	bl	8000b64 <HAL_GetTick>
 8003018:	0002      	movs	r2, r0
 800301a:	69bb      	ldr	r3, [r7, #24]
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	2b02      	cmp	r3, #2
 8003020:	d901      	bls.n	8003026 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8003022:	2303      	movs	r3, #3
 8003024:	e236      	b.n	8003494 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003026:	4b29      	ldr	r3, [pc, #164]	; (80030cc <HAL_RCC_OscConfig+0x338>)
 8003028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800302a:	2202      	movs	r2, #2
 800302c:	4013      	ands	r3, r2
 800302e:	d1f1      	bne.n	8003014 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	2204      	movs	r2, #4
 8003036:	4013      	ands	r3, r2
 8003038:	d100      	bne.n	800303c <HAL_RCC_OscConfig+0x2a8>
 800303a:	e0b5      	b.n	80031a8 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 800303c:	201f      	movs	r0, #31
 800303e:	183b      	adds	r3, r7, r0
 8003040:	2200      	movs	r2, #0
 8003042:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003044:	4b21      	ldr	r3, [pc, #132]	; (80030cc <HAL_RCC_OscConfig+0x338>)
 8003046:	69da      	ldr	r2, [r3, #28]
 8003048:	2380      	movs	r3, #128	; 0x80
 800304a:	055b      	lsls	r3, r3, #21
 800304c:	4013      	ands	r3, r2
 800304e:	d110      	bne.n	8003072 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003050:	4b1e      	ldr	r3, [pc, #120]	; (80030cc <HAL_RCC_OscConfig+0x338>)
 8003052:	69da      	ldr	r2, [r3, #28]
 8003054:	4b1d      	ldr	r3, [pc, #116]	; (80030cc <HAL_RCC_OscConfig+0x338>)
 8003056:	2180      	movs	r1, #128	; 0x80
 8003058:	0549      	lsls	r1, r1, #21
 800305a:	430a      	orrs	r2, r1
 800305c:	61da      	str	r2, [r3, #28]
 800305e:	4b1b      	ldr	r3, [pc, #108]	; (80030cc <HAL_RCC_OscConfig+0x338>)
 8003060:	69da      	ldr	r2, [r3, #28]
 8003062:	2380      	movs	r3, #128	; 0x80
 8003064:	055b      	lsls	r3, r3, #21
 8003066:	4013      	ands	r3, r2
 8003068:	60fb      	str	r3, [r7, #12]
 800306a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800306c:	183b      	adds	r3, r7, r0
 800306e:	2201      	movs	r2, #1
 8003070:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003072:	4b19      	ldr	r3, [pc, #100]	; (80030d8 <HAL_RCC_OscConfig+0x344>)
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	2380      	movs	r3, #128	; 0x80
 8003078:	005b      	lsls	r3, r3, #1
 800307a:	4013      	ands	r3, r2
 800307c:	d11a      	bne.n	80030b4 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800307e:	4b16      	ldr	r3, [pc, #88]	; (80030d8 <HAL_RCC_OscConfig+0x344>)
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	4b15      	ldr	r3, [pc, #84]	; (80030d8 <HAL_RCC_OscConfig+0x344>)
 8003084:	2180      	movs	r1, #128	; 0x80
 8003086:	0049      	lsls	r1, r1, #1
 8003088:	430a      	orrs	r2, r1
 800308a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800308c:	f7fd fd6a 	bl	8000b64 <HAL_GetTick>
 8003090:	0003      	movs	r3, r0
 8003092:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003094:	e008      	b.n	80030a8 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003096:	f7fd fd65 	bl	8000b64 <HAL_GetTick>
 800309a:	0002      	movs	r2, r0
 800309c:	69bb      	ldr	r3, [r7, #24]
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	2b64      	cmp	r3, #100	; 0x64
 80030a2:	d901      	bls.n	80030a8 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80030a4:	2303      	movs	r3, #3
 80030a6:	e1f5      	b.n	8003494 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030a8:	4b0b      	ldr	r3, [pc, #44]	; (80030d8 <HAL_RCC_OscConfig+0x344>)
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	2380      	movs	r3, #128	; 0x80
 80030ae:	005b      	lsls	r3, r3, #1
 80030b0:	4013      	ands	r3, r2
 80030b2:	d0f0      	beq.n	8003096 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d10f      	bne.n	80030dc <HAL_RCC_OscConfig+0x348>
 80030bc:	4b03      	ldr	r3, [pc, #12]	; (80030cc <HAL_RCC_OscConfig+0x338>)
 80030be:	6a1a      	ldr	r2, [r3, #32]
 80030c0:	4b02      	ldr	r3, [pc, #8]	; (80030cc <HAL_RCC_OscConfig+0x338>)
 80030c2:	2101      	movs	r1, #1
 80030c4:	430a      	orrs	r2, r1
 80030c6:	621a      	str	r2, [r3, #32]
 80030c8:	e036      	b.n	8003138 <HAL_RCC_OscConfig+0x3a4>
 80030ca:	46c0      	nop			; (mov r8, r8)
 80030cc:	40021000 	.word	0x40021000
 80030d0:	fffeffff 	.word	0xfffeffff
 80030d4:	fffbffff 	.word	0xfffbffff
 80030d8:	40007000 	.word	0x40007000
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d10c      	bne.n	80030fe <HAL_RCC_OscConfig+0x36a>
 80030e4:	4bca      	ldr	r3, [pc, #808]	; (8003410 <HAL_RCC_OscConfig+0x67c>)
 80030e6:	6a1a      	ldr	r2, [r3, #32]
 80030e8:	4bc9      	ldr	r3, [pc, #804]	; (8003410 <HAL_RCC_OscConfig+0x67c>)
 80030ea:	2101      	movs	r1, #1
 80030ec:	438a      	bics	r2, r1
 80030ee:	621a      	str	r2, [r3, #32]
 80030f0:	4bc7      	ldr	r3, [pc, #796]	; (8003410 <HAL_RCC_OscConfig+0x67c>)
 80030f2:	6a1a      	ldr	r2, [r3, #32]
 80030f4:	4bc6      	ldr	r3, [pc, #792]	; (8003410 <HAL_RCC_OscConfig+0x67c>)
 80030f6:	2104      	movs	r1, #4
 80030f8:	438a      	bics	r2, r1
 80030fa:	621a      	str	r2, [r3, #32]
 80030fc:	e01c      	b.n	8003138 <HAL_RCC_OscConfig+0x3a4>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	2b05      	cmp	r3, #5
 8003104:	d10c      	bne.n	8003120 <HAL_RCC_OscConfig+0x38c>
 8003106:	4bc2      	ldr	r3, [pc, #776]	; (8003410 <HAL_RCC_OscConfig+0x67c>)
 8003108:	6a1a      	ldr	r2, [r3, #32]
 800310a:	4bc1      	ldr	r3, [pc, #772]	; (8003410 <HAL_RCC_OscConfig+0x67c>)
 800310c:	2104      	movs	r1, #4
 800310e:	430a      	orrs	r2, r1
 8003110:	621a      	str	r2, [r3, #32]
 8003112:	4bbf      	ldr	r3, [pc, #764]	; (8003410 <HAL_RCC_OscConfig+0x67c>)
 8003114:	6a1a      	ldr	r2, [r3, #32]
 8003116:	4bbe      	ldr	r3, [pc, #760]	; (8003410 <HAL_RCC_OscConfig+0x67c>)
 8003118:	2101      	movs	r1, #1
 800311a:	430a      	orrs	r2, r1
 800311c:	621a      	str	r2, [r3, #32]
 800311e:	e00b      	b.n	8003138 <HAL_RCC_OscConfig+0x3a4>
 8003120:	4bbb      	ldr	r3, [pc, #748]	; (8003410 <HAL_RCC_OscConfig+0x67c>)
 8003122:	6a1a      	ldr	r2, [r3, #32]
 8003124:	4bba      	ldr	r3, [pc, #744]	; (8003410 <HAL_RCC_OscConfig+0x67c>)
 8003126:	2101      	movs	r1, #1
 8003128:	438a      	bics	r2, r1
 800312a:	621a      	str	r2, [r3, #32]
 800312c:	4bb8      	ldr	r3, [pc, #736]	; (8003410 <HAL_RCC_OscConfig+0x67c>)
 800312e:	6a1a      	ldr	r2, [r3, #32]
 8003130:	4bb7      	ldr	r3, [pc, #732]	; (8003410 <HAL_RCC_OscConfig+0x67c>)
 8003132:	2104      	movs	r1, #4
 8003134:	438a      	bics	r2, r1
 8003136:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d014      	beq.n	800316a <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003140:	f7fd fd10 	bl	8000b64 <HAL_GetTick>
 8003144:	0003      	movs	r3, r0
 8003146:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003148:	e009      	b.n	800315e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800314a:	f7fd fd0b 	bl	8000b64 <HAL_GetTick>
 800314e:	0002      	movs	r2, r0
 8003150:	69bb      	ldr	r3, [r7, #24]
 8003152:	1ad3      	subs	r3, r2, r3
 8003154:	4aaf      	ldr	r2, [pc, #700]	; (8003414 <HAL_RCC_OscConfig+0x680>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d901      	bls.n	800315e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800315a:	2303      	movs	r3, #3
 800315c:	e19a      	b.n	8003494 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800315e:	4bac      	ldr	r3, [pc, #688]	; (8003410 <HAL_RCC_OscConfig+0x67c>)
 8003160:	6a1b      	ldr	r3, [r3, #32]
 8003162:	2202      	movs	r2, #2
 8003164:	4013      	ands	r3, r2
 8003166:	d0f0      	beq.n	800314a <HAL_RCC_OscConfig+0x3b6>
 8003168:	e013      	b.n	8003192 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800316a:	f7fd fcfb 	bl	8000b64 <HAL_GetTick>
 800316e:	0003      	movs	r3, r0
 8003170:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003172:	e009      	b.n	8003188 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003174:	f7fd fcf6 	bl	8000b64 <HAL_GetTick>
 8003178:	0002      	movs	r2, r0
 800317a:	69bb      	ldr	r3, [r7, #24]
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	4aa5      	ldr	r2, [pc, #660]	; (8003414 <HAL_RCC_OscConfig+0x680>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d901      	bls.n	8003188 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8003184:	2303      	movs	r3, #3
 8003186:	e185      	b.n	8003494 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003188:	4ba1      	ldr	r3, [pc, #644]	; (8003410 <HAL_RCC_OscConfig+0x67c>)
 800318a:	6a1b      	ldr	r3, [r3, #32]
 800318c:	2202      	movs	r2, #2
 800318e:	4013      	ands	r3, r2
 8003190:	d1f0      	bne.n	8003174 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003192:	231f      	movs	r3, #31
 8003194:	18fb      	adds	r3, r7, r3
 8003196:	781b      	ldrb	r3, [r3, #0]
 8003198:	2b01      	cmp	r3, #1
 800319a:	d105      	bne.n	80031a8 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800319c:	4b9c      	ldr	r3, [pc, #624]	; (8003410 <HAL_RCC_OscConfig+0x67c>)
 800319e:	69da      	ldr	r2, [r3, #28]
 80031a0:	4b9b      	ldr	r3, [pc, #620]	; (8003410 <HAL_RCC_OscConfig+0x67c>)
 80031a2:	499d      	ldr	r1, [pc, #628]	; (8003418 <HAL_RCC_OscConfig+0x684>)
 80031a4:	400a      	ands	r2, r1
 80031a6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	2210      	movs	r2, #16
 80031ae:	4013      	ands	r3, r2
 80031b0:	d063      	beq.n	800327a <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	695b      	ldr	r3, [r3, #20]
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d12a      	bne.n	8003210 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80031ba:	4b95      	ldr	r3, [pc, #596]	; (8003410 <HAL_RCC_OscConfig+0x67c>)
 80031bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031be:	4b94      	ldr	r3, [pc, #592]	; (8003410 <HAL_RCC_OscConfig+0x67c>)
 80031c0:	2104      	movs	r1, #4
 80031c2:	430a      	orrs	r2, r1
 80031c4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80031c6:	4b92      	ldr	r3, [pc, #584]	; (8003410 <HAL_RCC_OscConfig+0x67c>)
 80031c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031ca:	4b91      	ldr	r3, [pc, #580]	; (8003410 <HAL_RCC_OscConfig+0x67c>)
 80031cc:	2101      	movs	r1, #1
 80031ce:	430a      	orrs	r2, r1
 80031d0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031d2:	f7fd fcc7 	bl	8000b64 <HAL_GetTick>
 80031d6:	0003      	movs	r3, r0
 80031d8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80031da:	e008      	b.n	80031ee <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80031dc:	f7fd fcc2 	bl	8000b64 <HAL_GetTick>
 80031e0:	0002      	movs	r2, r0
 80031e2:	69bb      	ldr	r3, [r7, #24]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	2b02      	cmp	r3, #2
 80031e8:	d901      	bls.n	80031ee <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	e152      	b.n	8003494 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80031ee:	4b88      	ldr	r3, [pc, #544]	; (8003410 <HAL_RCC_OscConfig+0x67c>)
 80031f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031f2:	2202      	movs	r2, #2
 80031f4:	4013      	ands	r3, r2
 80031f6:	d0f1      	beq.n	80031dc <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80031f8:	4b85      	ldr	r3, [pc, #532]	; (8003410 <HAL_RCC_OscConfig+0x67c>)
 80031fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031fc:	22f8      	movs	r2, #248	; 0xf8
 80031fe:	4393      	bics	r3, r2
 8003200:	0019      	movs	r1, r3
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	699b      	ldr	r3, [r3, #24]
 8003206:	00da      	lsls	r2, r3, #3
 8003208:	4b81      	ldr	r3, [pc, #516]	; (8003410 <HAL_RCC_OscConfig+0x67c>)
 800320a:	430a      	orrs	r2, r1
 800320c:	635a      	str	r2, [r3, #52]	; 0x34
 800320e:	e034      	b.n	800327a <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	695b      	ldr	r3, [r3, #20]
 8003214:	3305      	adds	r3, #5
 8003216:	d111      	bne.n	800323c <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003218:	4b7d      	ldr	r3, [pc, #500]	; (8003410 <HAL_RCC_OscConfig+0x67c>)
 800321a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800321c:	4b7c      	ldr	r3, [pc, #496]	; (8003410 <HAL_RCC_OscConfig+0x67c>)
 800321e:	2104      	movs	r1, #4
 8003220:	438a      	bics	r2, r1
 8003222:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003224:	4b7a      	ldr	r3, [pc, #488]	; (8003410 <HAL_RCC_OscConfig+0x67c>)
 8003226:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003228:	22f8      	movs	r2, #248	; 0xf8
 800322a:	4393      	bics	r3, r2
 800322c:	0019      	movs	r1, r3
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	699b      	ldr	r3, [r3, #24]
 8003232:	00da      	lsls	r2, r3, #3
 8003234:	4b76      	ldr	r3, [pc, #472]	; (8003410 <HAL_RCC_OscConfig+0x67c>)
 8003236:	430a      	orrs	r2, r1
 8003238:	635a      	str	r2, [r3, #52]	; 0x34
 800323a:	e01e      	b.n	800327a <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800323c:	4b74      	ldr	r3, [pc, #464]	; (8003410 <HAL_RCC_OscConfig+0x67c>)
 800323e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003240:	4b73      	ldr	r3, [pc, #460]	; (8003410 <HAL_RCC_OscConfig+0x67c>)
 8003242:	2104      	movs	r1, #4
 8003244:	430a      	orrs	r2, r1
 8003246:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003248:	4b71      	ldr	r3, [pc, #452]	; (8003410 <HAL_RCC_OscConfig+0x67c>)
 800324a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800324c:	4b70      	ldr	r3, [pc, #448]	; (8003410 <HAL_RCC_OscConfig+0x67c>)
 800324e:	2101      	movs	r1, #1
 8003250:	438a      	bics	r2, r1
 8003252:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003254:	f7fd fc86 	bl	8000b64 <HAL_GetTick>
 8003258:	0003      	movs	r3, r0
 800325a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800325c:	e008      	b.n	8003270 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800325e:	f7fd fc81 	bl	8000b64 <HAL_GetTick>
 8003262:	0002      	movs	r2, r0
 8003264:	69bb      	ldr	r3, [r7, #24]
 8003266:	1ad3      	subs	r3, r2, r3
 8003268:	2b02      	cmp	r3, #2
 800326a:	d901      	bls.n	8003270 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 800326c:	2303      	movs	r3, #3
 800326e:	e111      	b.n	8003494 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003270:	4b67      	ldr	r3, [pc, #412]	; (8003410 <HAL_RCC_OscConfig+0x67c>)
 8003272:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003274:	2202      	movs	r2, #2
 8003276:	4013      	ands	r3, r2
 8003278:	d1f1      	bne.n	800325e <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	2220      	movs	r2, #32
 8003280:	4013      	ands	r3, r2
 8003282:	d05c      	beq.n	800333e <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8003284:	4b62      	ldr	r3, [pc, #392]	; (8003410 <HAL_RCC_OscConfig+0x67c>)
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	220c      	movs	r2, #12
 800328a:	4013      	ands	r3, r2
 800328c:	2b0c      	cmp	r3, #12
 800328e:	d00e      	beq.n	80032ae <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8003290:	4b5f      	ldr	r3, [pc, #380]	; (8003410 <HAL_RCC_OscConfig+0x67c>)
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	220c      	movs	r2, #12
 8003296:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8003298:	2b08      	cmp	r3, #8
 800329a:	d114      	bne.n	80032c6 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800329c:	4b5c      	ldr	r3, [pc, #368]	; (8003410 <HAL_RCC_OscConfig+0x67c>)
 800329e:	685a      	ldr	r2, [r3, #4]
 80032a0:	23c0      	movs	r3, #192	; 0xc0
 80032a2:	025b      	lsls	r3, r3, #9
 80032a4:	401a      	ands	r2, r3
 80032a6:	23c0      	movs	r3, #192	; 0xc0
 80032a8:	025b      	lsls	r3, r3, #9
 80032aa:	429a      	cmp	r2, r3
 80032ac:	d10b      	bne.n	80032c6 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80032ae:	4b58      	ldr	r3, [pc, #352]	; (8003410 <HAL_RCC_OscConfig+0x67c>)
 80032b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032b2:	2380      	movs	r3, #128	; 0x80
 80032b4:	025b      	lsls	r3, r3, #9
 80032b6:	4013      	ands	r3, r2
 80032b8:	d040      	beq.n	800333c <HAL_RCC_OscConfig+0x5a8>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6a1b      	ldr	r3, [r3, #32]
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d03c      	beq.n	800333c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e0e6      	b.n	8003494 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6a1b      	ldr	r3, [r3, #32]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d01b      	beq.n	8003306 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80032ce:	4b50      	ldr	r3, [pc, #320]	; (8003410 <HAL_RCC_OscConfig+0x67c>)
 80032d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032d2:	4b4f      	ldr	r3, [pc, #316]	; (8003410 <HAL_RCC_OscConfig+0x67c>)
 80032d4:	2180      	movs	r1, #128	; 0x80
 80032d6:	0249      	lsls	r1, r1, #9
 80032d8:	430a      	orrs	r2, r1
 80032da:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032dc:	f7fd fc42 	bl	8000b64 <HAL_GetTick>
 80032e0:	0003      	movs	r3, r0
 80032e2:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80032e4:	e008      	b.n	80032f8 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80032e6:	f7fd fc3d 	bl	8000b64 <HAL_GetTick>
 80032ea:	0002      	movs	r2, r0
 80032ec:	69bb      	ldr	r3, [r7, #24]
 80032ee:	1ad3      	subs	r3, r2, r3
 80032f0:	2b02      	cmp	r3, #2
 80032f2:	d901      	bls.n	80032f8 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80032f4:	2303      	movs	r3, #3
 80032f6:	e0cd      	b.n	8003494 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80032f8:	4b45      	ldr	r3, [pc, #276]	; (8003410 <HAL_RCC_OscConfig+0x67c>)
 80032fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032fc:	2380      	movs	r3, #128	; 0x80
 80032fe:	025b      	lsls	r3, r3, #9
 8003300:	4013      	ands	r3, r2
 8003302:	d0f0      	beq.n	80032e6 <HAL_RCC_OscConfig+0x552>
 8003304:	e01b      	b.n	800333e <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8003306:	4b42      	ldr	r3, [pc, #264]	; (8003410 <HAL_RCC_OscConfig+0x67c>)
 8003308:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800330a:	4b41      	ldr	r3, [pc, #260]	; (8003410 <HAL_RCC_OscConfig+0x67c>)
 800330c:	4943      	ldr	r1, [pc, #268]	; (800341c <HAL_RCC_OscConfig+0x688>)
 800330e:	400a      	ands	r2, r1
 8003310:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003312:	f7fd fc27 	bl	8000b64 <HAL_GetTick>
 8003316:	0003      	movs	r3, r0
 8003318:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800331a:	e008      	b.n	800332e <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800331c:	f7fd fc22 	bl	8000b64 <HAL_GetTick>
 8003320:	0002      	movs	r2, r0
 8003322:	69bb      	ldr	r3, [r7, #24]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	2b02      	cmp	r3, #2
 8003328:	d901      	bls.n	800332e <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	e0b2      	b.n	8003494 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800332e:	4b38      	ldr	r3, [pc, #224]	; (8003410 <HAL_RCC_OscConfig+0x67c>)
 8003330:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003332:	2380      	movs	r3, #128	; 0x80
 8003334:	025b      	lsls	r3, r3, #9
 8003336:	4013      	ands	r3, r2
 8003338:	d1f0      	bne.n	800331c <HAL_RCC_OscConfig+0x588>
 800333a:	e000      	b.n	800333e <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800333c:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003342:	2b00      	cmp	r3, #0
 8003344:	d100      	bne.n	8003348 <HAL_RCC_OscConfig+0x5b4>
 8003346:	e0a4      	b.n	8003492 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003348:	4b31      	ldr	r3, [pc, #196]	; (8003410 <HAL_RCC_OscConfig+0x67c>)
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	220c      	movs	r2, #12
 800334e:	4013      	ands	r3, r2
 8003350:	2b08      	cmp	r3, #8
 8003352:	d100      	bne.n	8003356 <HAL_RCC_OscConfig+0x5c2>
 8003354:	e078      	b.n	8003448 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800335a:	2b02      	cmp	r3, #2
 800335c:	d14c      	bne.n	80033f8 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800335e:	4b2c      	ldr	r3, [pc, #176]	; (8003410 <HAL_RCC_OscConfig+0x67c>)
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	4b2b      	ldr	r3, [pc, #172]	; (8003410 <HAL_RCC_OscConfig+0x67c>)
 8003364:	492e      	ldr	r1, [pc, #184]	; (8003420 <HAL_RCC_OscConfig+0x68c>)
 8003366:	400a      	ands	r2, r1
 8003368:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800336a:	f7fd fbfb 	bl	8000b64 <HAL_GetTick>
 800336e:	0003      	movs	r3, r0
 8003370:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003372:	e008      	b.n	8003386 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003374:	f7fd fbf6 	bl	8000b64 <HAL_GetTick>
 8003378:	0002      	movs	r2, r0
 800337a:	69bb      	ldr	r3, [r7, #24]
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	2b02      	cmp	r3, #2
 8003380:	d901      	bls.n	8003386 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	e086      	b.n	8003494 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003386:	4b22      	ldr	r3, [pc, #136]	; (8003410 <HAL_RCC_OscConfig+0x67c>)
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	2380      	movs	r3, #128	; 0x80
 800338c:	049b      	lsls	r3, r3, #18
 800338e:	4013      	ands	r3, r2
 8003390:	d1f0      	bne.n	8003374 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003392:	4b1f      	ldr	r3, [pc, #124]	; (8003410 <HAL_RCC_OscConfig+0x67c>)
 8003394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003396:	220f      	movs	r2, #15
 8003398:	4393      	bics	r3, r2
 800339a:	0019      	movs	r1, r3
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033a0:	4b1b      	ldr	r3, [pc, #108]	; (8003410 <HAL_RCC_OscConfig+0x67c>)
 80033a2:	430a      	orrs	r2, r1
 80033a4:	62da      	str	r2, [r3, #44]	; 0x2c
 80033a6:	4b1a      	ldr	r3, [pc, #104]	; (8003410 <HAL_RCC_OscConfig+0x67c>)
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	4a1e      	ldr	r2, [pc, #120]	; (8003424 <HAL_RCC_OscConfig+0x690>)
 80033ac:	4013      	ands	r3, r2
 80033ae:	0019      	movs	r1, r3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033b8:	431a      	orrs	r2, r3
 80033ba:	4b15      	ldr	r3, [pc, #84]	; (8003410 <HAL_RCC_OscConfig+0x67c>)
 80033bc:	430a      	orrs	r2, r1
 80033be:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033c0:	4b13      	ldr	r3, [pc, #76]	; (8003410 <HAL_RCC_OscConfig+0x67c>)
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	4b12      	ldr	r3, [pc, #72]	; (8003410 <HAL_RCC_OscConfig+0x67c>)
 80033c6:	2180      	movs	r1, #128	; 0x80
 80033c8:	0449      	lsls	r1, r1, #17
 80033ca:	430a      	orrs	r2, r1
 80033cc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033ce:	f7fd fbc9 	bl	8000b64 <HAL_GetTick>
 80033d2:	0003      	movs	r3, r0
 80033d4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80033d6:	e008      	b.n	80033ea <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033d8:	f7fd fbc4 	bl	8000b64 <HAL_GetTick>
 80033dc:	0002      	movs	r2, r0
 80033de:	69bb      	ldr	r3, [r7, #24]
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d901      	bls.n	80033ea <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	e054      	b.n	8003494 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80033ea:	4b09      	ldr	r3, [pc, #36]	; (8003410 <HAL_RCC_OscConfig+0x67c>)
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	2380      	movs	r3, #128	; 0x80
 80033f0:	049b      	lsls	r3, r3, #18
 80033f2:	4013      	ands	r3, r2
 80033f4:	d0f0      	beq.n	80033d8 <HAL_RCC_OscConfig+0x644>
 80033f6:	e04c      	b.n	8003492 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033f8:	4b05      	ldr	r3, [pc, #20]	; (8003410 <HAL_RCC_OscConfig+0x67c>)
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	4b04      	ldr	r3, [pc, #16]	; (8003410 <HAL_RCC_OscConfig+0x67c>)
 80033fe:	4908      	ldr	r1, [pc, #32]	; (8003420 <HAL_RCC_OscConfig+0x68c>)
 8003400:	400a      	ands	r2, r1
 8003402:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003404:	f7fd fbae 	bl	8000b64 <HAL_GetTick>
 8003408:	0003      	movs	r3, r0
 800340a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800340c:	e015      	b.n	800343a <HAL_RCC_OscConfig+0x6a6>
 800340e:	46c0      	nop			; (mov r8, r8)
 8003410:	40021000 	.word	0x40021000
 8003414:	00001388 	.word	0x00001388
 8003418:	efffffff 	.word	0xefffffff
 800341c:	fffeffff 	.word	0xfffeffff
 8003420:	feffffff 	.word	0xfeffffff
 8003424:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003428:	f7fd fb9c 	bl	8000b64 <HAL_GetTick>
 800342c:	0002      	movs	r2, r0
 800342e:	69bb      	ldr	r3, [r7, #24]
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	2b02      	cmp	r3, #2
 8003434:	d901      	bls.n	800343a <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	e02c      	b.n	8003494 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800343a:	4b18      	ldr	r3, [pc, #96]	; (800349c <HAL_RCC_OscConfig+0x708>)
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	2380      	movs	r3, #128	; 0x80
 8003440:	049b      	lsls	r3, r3, #18
 8003442:	4013      	ands	r3, r2
 8003444:	d1f0      	bne.n	8003428 <HAL_RCC_OscConfig+0x694>
 8003446:	e024      	b.n	8003492 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344c:	2b01      	cmp	r3, #1
 800344e:	d101      	bne.n	8003454 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e01f      	b.n	8003494 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8003454:	4b11      	ldr	r3, [pc, #68]	; (800349c <HAL_RCC_OscConfig+0x708>)
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800345a:	4b10      	ldr	r3, [pc, #64]	; (800349c <HAL_RCC_OscConfig+0x708>)
 800345c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800345e:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003460:	697a      	ldr	r2, [r7, #20]
 8003462:	23c0      	movs	r3, #192	; 0xc0
 8003464:	025b      	lsls	r3, r3, #9
 8003466:	401a      	ands	r2, r3
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800346c:	429a      	cmp	r2, r3
 800346e:	d10e      	bne.n	800348e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	220f      	movs	r2, #15
 8003474:	401a      	ands	r2, r3
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800347a:	429a      	cmp	r2, r3
 800347c:	d107      	bne.n	800348e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800347e:	697a      	ldr	r2, [r7, #20]
 8003480:	23f0      	movs	r3, #240	; 0xf0
 8003482:	039b      	lsls	r3, r3, #14
 8003484:	401a      	ands	r2, r3
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800348a:	429a      	cmp	r2, r3
 800348c:	d001      	beq.n	8003492 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e000      	b.n	8003494 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8003492:	2300      	movs	r3, #0
}
 8003494:	0018      	movs	r0, r3
 8003496:	46bd      	mov	sp, r7
 8003498:	b008      	add	sp, #32
 800349a:	bd80      	pop	{r7, pc}
 800349c:	40021000 	.word	0x40021000

080034a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b084      	sub	sp, #16
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d101      	bne.n	80034b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e0bf      	b.n	8003634 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034b4:	4b61      	ldr	r3, [pc, #388]	; (800363c <HAL_RCC_ClockConfig+0x19c>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	2201      	movs	r2, #1
 80034ba:	4013      	ands	r3, r2
 80034bc:	683a      	ldr	r2, [r7, #0]
 80034be:	429a      	cmp	r2, r3
 80034c0:	d911      	bls.n	80034e6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034c2:	4b5e      	ldr	r3, [pc, #376]	; (800363c <HAL_RCC_ClockConfig+0x19c>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	2201      	movs	r2, #1
 80034c8:	4393      	bics	r3, r2
 80034ca:	0019      	movs	r1, r3
 80034cc:	4b5b      	ldr	r3, [pc, #364]	; (800363c <HAL_RCC_ClockConfig+0x19c>)
 80034ce:	683a      	ldr	r2, [r7, #0]
 80034d0:	430a      	orrs	r2, r1
 80034d2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034d4:	4b59      	ldr	r3, [pc, #356]	; (800363c <HAL_RCC_ClockConfig+0x19c>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	2201      	movs	r2, #1
 80034da:	4013      	ands	r3, r2
 80034dc:	683a      	ldr	r2, [r7, #0]
 80034de:	429a      	cmp	r2, r3
 80034e0:	d001      	beq.n	80034e6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e0a6      	b.n	8003634 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	2202      	movs	r2, #2
 80034ec:	4013      	ands	r3, r2
 80034ee:	d015      	beq.n	800351c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	2204      	movs	r2, #4
 80034f6:	4013      	ands	r3, r2
 80034f8:	d006      	beq.n	8003508 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80034fa:	4b51      	ldr	r3, [pc, #324]	; (8003640 <HAL_RCC_ClockConfig+0x1a0>)
 80034fc:	685a      	ldr	r2, [r3, #4]
 80034fe:	4b50      	ldr	r3, [pc, #320]	; (8003640 <HAL_RCC_ClockConfig+0x1a0>)
 8003500:	21e0      	movs	r1, #224	; 0xe0
 8003502:	00c9      	lsls	r1, r1, #3
 8003504:	430a      	orrs	r2, r1
 8003506:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003508:	4b4d      	ldr	r3, [pc, #308]	; (8003640 <HAL_RCC_ClockConfig+0x1a0>)
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	22f0      	movs	r2, #240	; 0xf0
 800350e:	4393      	bics	r3, r2
 8003510:	0019      	movs	r1, r3
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	689a      	ldr	r2, [r3, #8]
 8003516:	4b4a      	ldr	r3, [pc, #296]	; (8003640 <HAL_RCC_ClockConfig+0x1a0>)
 8003518:	430a      	orrs	r2, r1
 800351a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	2201      	movs	r2, #1
 8003522:	4013      	ands	r3, r2
 8003524:	d04c      	beq.n	80035c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	2b01      	cmp	r3, #1
 800352c:	d107      	bne.n	800353e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800352e:	4b44      	ldr	r3, [pc, #272]	; (8003640 <HAL_RCC_ClockConfig+0x1a0>)
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	2380      	movs	r3, #128	; 0x80
 8003534:	029b      	lsls	r3, r3, #10
 8003536:	4013      	ands	r3, r2
 8003538:	d120      	bne.n	800357c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e07a      	b.n	8003634 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	2b02      	cmp	r3, #2
 8003544:	d107      	bne.n	8003556 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003546:	4b3e      	ldr	r3, [pc, #248]	; (8003640 <HAL_RCC_ClockConfig+0x1a0>)
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	2380      	movs	r3, #128	; 0x80
 800354c:	049b      	lsls	r3, r3, #18
 800354e:	4013      	ands	r3, r2
 8003550:	d114      	bne.n	800357c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e06e      	b.n	8003634 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	2b03      	cmp	r3, #3
 800355c:	d107      	bne.n	800356e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800355e:	4b38      	ldr	r3, [pc, #224]	; (8003640 <HAL_RCC_ClockConfig+0x1a0>)
 8003560:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003562:	2380      	movs	r3, #128	; 0x80
 8003564:	025b      	lsls	r3, r3, #9
 8003566:	4013      	ands	r3, r2
 8003568:	d108      	bne.n	800357c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e062      	b.n	8003634 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800356e:	4b34      	ldr	r3, [pc, #208]	; (8003640 <HAL_RCC_ClockConfig+0x1a0>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	2202      	movs	r2, #2
 8003574:	4013      	ands	r3, r2
 8003576:	d101      	bne.n	800357c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	e05b      	b.n	8003634 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800357c:	4b30      	ldr	r3, [pc, #192]	; (8003640 <HAL_RCC_ClockConfig+0x1a0>)
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	2203      	movs	r2, #3
 8003582:	4393      	bics	r3, r2
 8003584:	0019      	movs	r1, r3
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	685a      	ldr	r2, [r3, #4]
 800358a:	4b2d      	ldr	r3, [pc, #180]	; (8003640 <HAL_RCC_ClockConfig+0x1a0>)
 800358c:	430a      	orrs	r2, r1
 800358e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003590:	f7fd fae8 	bl	8000b64 <HAL_GetTick>
 8003594:	0003      	movs	r3, r0
 8003596:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003598:	e009      	b.n	80035ae <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800359a:	f7fd fae3 	bl	8000b64 <HAL_GetTick>
 800359e:	0002      	movs	r2, r0
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	1ad3      	subs	r3, r2, r3
 80035a4:	4a27      	ldr	r2, [pc, #156]	; (8003644 <HAL_RCC_ClockConfig+0x1a4>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d901      	bls.n	80035ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035aa:	2303      	movs	r3, #3
 80035ac:	e042      	b.n	8003634 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035ae:	4b24      	ldr	r3, [pc, #144]	; (8003640 <HAL_RCC_ClockConfig+0x1a0>)
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	220c      	movs	r2, #12
 80035b4:	401a      	ands	r2, r3
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	429a      	cmp	r2, r3
 80035be:	d1ec      	bne.n	800359a <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035c0:	4b1e      	ldr	r3, [pc, #120]	; (800363c <HAL_RCC_ClockConfig+0x19c>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	2201      	movs	r2, #1
 80035c6:	4013      	ands	r3, r2
 80035c8:	683a      	ldr	r2, [r7, #0]
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d211      	bcs.n	80035f2 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035ce:	4b1b      	ldr	r3, [pc, #108]	; (800363c <HAL_RCC_ClockConfig+0x19c>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	2201      	movs	r2, #1
 80035d4:	4393      	bics	r3, r2
 80035d6:	0019      	movs	r1, r3
 80035d8:	4b18      	ldr	r3, [pc, #96]	; (800363c <HAL_RCC_ClockConfig+0x19c>)
 80035da:	683a      	ldr	r2, [r7, #0]
 80035dc:	430a      	orrs	r2, r1
 80035de:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035e0:	4b16      	ldr	r3, [pc, #88]	; (800363c <HAL_RCC_ClockConfig+0x19c>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	2201      	movs	r2, #1
 80035e6:	4013      	ands	r3, r2
 80035e8:	683a      	ldr	r2, [r7, #0]
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d001      	beq.n	80035f2 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e020      	b.n	8003634 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	2204      	movs	r2, #4
 80035f8:	4013      	ands	r3, r2
 80035fa:	d009      	beq.n	8003610 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80035fc:	4b10      	ldr	r3, [pc, #64]	; (8003640 <HAL_RCC_ClockConfig+0x1a0>)
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	4a11      	ldr	r2, [pc, #68]	; (8003648 <HAL_RCC_ClockConfig+0x1a8>)
 8003602:	4013      	ands	r3, r2
 8003604:	0019      	movs	r1, r3
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	68da      	ldr	r2, [r3, #12]
 800360a:	4b0d      	ldr	r3, [pc, #52]	; (8003640 <HAL_RCC_ClockConfig+0x1a0>)
 800360c:	430a      	orrs	r2, r1
 800360e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003610:	f000 f820 	bl	8003654 <HAL_RCC_GetSysClockFreq>
 8003614:	0001      	movs	r1, r0
 8003616:	4b0a      	ldr	r3, [pc, #40]	; (8003640 <HAL_RCC_ClockConfig+0x1a0>)
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	091b      	lsrs	r3, r3, #4
 800361c:	220f      	movs	r2, #15
 800361e:	4013      	ands	r3, r2
 8003620:	4a0a      	ldr	r2, [pc, #40]	; (800364c <HAL_RCC_ClockConfig+0x1ac>)
 8003622:	5cd3      	ldrb	r3, [r2, r3]
 8003624:	000a      	movs	r2, r1
 8003626:	40da      	lsrs	r2, r3
 8003628:	4b09      	ldr	r3, [pc, #36]	; (8003650 <HAL_RCC_ClockConfig+0x1b0>)
 800362a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800362c:	2000      	movs	r0, #0
 800362e:	f7fd fa53 	bl	8000ad8 <HAL_InitTick>
  
  return HAL_OK;
 8003632:	2300      	movs	r3, #0
}
 8003634:	0018      	movs	r0, r3
 8003636:	46bd      	mov	sp, r7
 8003638:	b004      	add	sp, #16
 800363a:	bd80      	pop	{r7, pc}
 800363c:	40022000 	.word	0x40022000
 8003640:	40021000 	.word	0x40021000
 8003644:	00001388 	.word	0x00001388
 8003648:	fffff8ff 	.word	0xfffff8ff
 800364c:	08007b1c 	.word	0x08007b1c
 8003650:	20000000 	.word	0x20000000

08003654 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003654:	b590      	push	{r4, r7, lr}
 8003656:	b08f      	sub	sp, #60	; 0x3c
 8003658:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800365a:	2314      	movs	r3, #20
 800365c:	18fb      	adds	r3, r7, r3
 800365e:	4a38      	ldr	r2, [pc, #224]	; (8003740 <HAL_RCC_GetSysClockFreq+0xec>)
 8003660:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003662:	c313      	stmia	r3!, {r0, r1, r4}
 8003664:	6812      	ldr	r2, [r2, #0]
 8003666:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8003668:	1d3b      	adds	r3, r7, #4
 800366a:	4a36      	ldr	r2, [pc, #216]	; (8003744 <HAL_RCC_GetSysClockFreq+0xf0>)
 800366c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800366e:	c313      	stmia	r3!, {r0, r1, r4}
 8003670:	6812      	ldr	r2, [r2, #0]
 8003672:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003674:	2300      	movs	r3, #0
 8003676:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003678:	2300      	movs	r3, #0
 800367a:	62bb      	str	r3, [r7, #40]	; 0x28
 800367c:	2300      	movs	r3, #0
 800367e:	637b      	str	r3, [r7, #52]	; 0x34
 8003680:	2300      	movs	r3, #0
 8003682:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8003684:	2300      	movs	r3, #0
 8003686:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8003688:	4b2f      	ldr	r3, [pc, #188]	; (8003748 <HAL_RCC_GetSysClockFreq+0xf4>)
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800368e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003690:	220c      	movs	r2, #12
 8003692:	4013      	ands	r3, r2
 8003694:	2b0c      	cmp	r3, #12
 8003696:	d047      	beq.n	8003728 <HAL_RCC_GetSysClockFreq+0xd4>
 8003698:	d849      	bhi.n	800372e <HAL_RCC_GetSysClockFreq+0xda>
 800369a:	2b04      	cmp	r3, #4
 800369c:	d002      	beq.n	80036a4 <HAL_RCC_GetSysClockFreq+0x50>
 800369e:	2b08      	cmp	r3, #8
 80036a0:	d003      	beq.n	80036aa <HAL_RCC_GetSysClockFreq+0x56>
 80036a2:	e044      	b.n	800372e <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80036a4:	4b29      	ldr	r3, [pc, #164]	; (800374c <HAL_RCC_GetSysClockFreq+0xf8>)
 80036a6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80036a8:	e044      	b.n	8003734 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80036aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036ac:	0c9b      	lsrs	r3, r3, #18
 80036ae:	220f      	movs	r2, #15
 80036b0:	4013      	ands	r3, r2
 80036b2:	2214      	movs	r2, #20
 80036b4:	18ba      	adds	r2, r7, r2
 80036b6:	5cd3      	ldrb	r3, [r2, r3]
 80036b8:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80036ba:	4b23      	ldr	r3, [pc, #140]	; (8003748 <HAL_RCC_GetSysClockFreq+0xf4>)
 80036bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036be:	220f      	movs	r2, #15
 80036c0:	4013      	ands	r3, r2
 80036c2:	1d3a      	adds	r2, r7, #4
 80036c4:	5cd3      	ldrb	r3, [r2, r3]
 80036c6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80036c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036ca:	23c0      	movs	r3, #192	; 0xc0
 80036cc:	025b      	lsls	r3, r3, #9
 80036ce:	401a      	ands	r2, r3
 80036d0:	2380      	movs	r3, #128	; 0x80
 80036d2:	025b      	lsls	r3, r3, #9
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d109      	bne.n	80036ec <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80036d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80036da:	481c      	ldr	r0, [pc, #112]	; (800374c <HAL_RCC_GetSysClockFreq+0xf8>)
 80036dc:	f7fc fd14 	bl	8000108 <__udivsi3>
 80036e0:	0003      	movs	r3, r0
 80036e2:	001a      	movs	r2, r3
 80036e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e6:	4353      	muls	r3, r2
 80036e8:	637b      	str	r3, [r7, #52]	; 0x34
 80036ea:	e01a      	b.n	8003722 <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80036ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036ee:	23c0      	movs	r3, #192	; 0xc0
 80036f0:	025b      	lsls	r3, r3, #9
 80036f2:	401a      	ands	r2, r3
 80036f4:	23c0      	movs	r3, #192	; 0xc0
 80036f6:	025b      	lsls	r3, r3, #9
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d109      	bne.n	8003710 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80036fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80036fe:	4814      	ldr	r0, [pc, #80]	; (8003750 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003700:	f7fc fd02 	bl	8000108 <__udivsi3>
 8003704:	0003      	movs	r3, r0
 8003706:	001a      	movs	r2, r3
 8003708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800370a:	4353      	muls	r3, r2
 800370c:	637b      	str	r3, [r7, #52]	; 0x34
 800370e:	e008      	b.n	8003722 <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003710:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003712:	480e      	ldr	r0, [pc, #56]	; (800374c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003714:	f7fc fcf8 	bl	8000108 <__udivsi3>
 8003718:	0003      	movs	r3, r0
 800371a:	001a      	movs	r2, r3
 800371c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800371e:	4353      	muls	r3, r2
 8003720:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8003722:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003724:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003726:	e005      	b.n	8003734 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8003728:	4b09      	ldr	r3, [pc, #36]	; (8003750 <HAL_RCC_GetSysClockFreq+0xfc>)
 800372a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800372c:	e002      	b.n	8003734 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800372e:	4b07      	ldr	r3, [pc, #28]	; (800374c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003730:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003732:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003736:	0018      	movs	r0, r3
 8003738:	46bd      	mov	sp, r7
 800373a:	b00f      	add	sp, #60	; 0x3c
 800373c:	bd90      	pop	{r4, r7, pc}
 800373e:	46c0      	nop			; (mov r8, r8)
 8003740:	08007a74 	.word	0x08007a74
 8003744:	08007a84 	.word	0x08007a84
 8003748:	40021000 	.word	0x40021000
 800374c:	007a1200 	.word	0x007a1200
 8003750:	02dc6c00 	.word	0x02dc6c00

08003754 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b086      	sub	sp, #24
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800375c:	2300      	movs	r3, #0
 800375e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8003760:	2300      	movs	r3, #0
 8003762:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	2380      	movs	r3, #128	; 0x80
 800376a:	025b      	lsls	r3, r3, #9
 800376c:	4013      	ands	r3, r2
 800376e:	d100      	bne.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8003770:	e08e      	b.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8003772:	2017      	movs	r0, #23
 8003774:	183b      	adds	r3, r7, r0
 8003776:	2200      	movs	r2, #0
 8003778:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800377a:	4b6e      	ldr	r3, [pc, #440]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800377c:	69da      	ldr	r2, [r3, #28]
 800377e:	2380      	movs	r3, #128	; 0x80
 8003780:	055b      	lsls	r3, r3, #21
 8003782:	4013      	ands	r3, r2
 8003784:	d110      	bne.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003786:	4b6b      	ldr	r3, [pc, #428]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003788:	69da      	ldr	r2, [r3, #28]
 800378a:	4b6a      	ldr	r3, [pc, #424]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800378c:	2180      	movs	r1, #128	; 0x80
 800378e:	0549      	lsls	r1, r1, #21
 8003790:	430a      	orrs	r2, r1
 8003792:	61da      	str	r2, [r3, #28]
 8003794:	4b67      	ldr	r3, [pc, #412]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003796:	69da      	ldr	r2, [r3, #28]
 8003798:	2380      	movs	r3, #128	; 0x80
 800379a:	055b      	lsls	r3, r3, #21
 800379c:	4013      	ands	r3, r2
 800379e:	60bb      	str	r3, [r7, #8]
 80037a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037a2:	183b      	adds	r3, r7, r0
 80037a4:	2201      	movs	r2, #1
 80037a6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037a8:	4b63      	ldr	r3, [pc, #396]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	2380      	movs	r3, #128	; 0x80
 80037ae:	005b      	lsls	r3, r3, #1
 80037b0:	4013      	ands	r3, r2
 80037b2:	d11a      	bne.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037b4:	4b60      	ldr	r3, [pc, #384]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	4b5f      	ldr	r3, [pc, #380]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80037ba:	2180      	movs	r1, #128	; 0x80
 80037bc:	0049      	lsls	r1, r1, #1
 80037be:	430a      	orrs	r2, r1
 80037c0:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037c2:	f7fd f9cf 	bl	8000b64 <HAL_GetTick>
 80037c6:	0003      	movs	r3, r0
 80037c8:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037ca:	e008      	b.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037cc:	f7fd f9ca 	bl	8000b64 <HAL_GetTick>
 80037d0:	0002      	movs	r2, r0
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	2b64      	cmp	r3, #100	; 0x64
 80037d8:	d901      	bls.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	e0a6      	b.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037de:	4b56      	ldr	r3, [pc, #344]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	2380      	movs	r3, #128	; 0x80
 80037e4:	005b      	lsls	r3, r3, #1
 80037e6:	4013      	ands	r3, r2
 80037e8:	d0f0      	beq.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80037ea:	4b52      	ldr	r3, [pc, #328]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80037ec:	6a1a      	ldr	r2, [r3, #32]
 80037ee:	23c0      	movs	r3, #192	; 0xc0
 80037f0:	009b      	lsls	r3, r3, #2
 80037f2:	4013      	ands	r3, r2
 80037f4:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d034      	beq.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x112>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	685a      	ldr	r2, [r3, #4]
 8003800:	23c0      	movs	r3, #192	; 0xc0
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	4013      	ands	r3, r2
 8003806:	68fa      	ldr	r2, [r7, #12]
 8003808:	429a      	cmp	r2, r3
 800380a:	d02c      	beq.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800380c:	4b49      	ldr	r3, [pc, #292]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800380e:	6a1b      	ldr	r3, [r3, #32]
 8003810:	4a4a      	ldr	r2, [pc, #296]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8003812:	4013      	ands	r3, r2
 8003814:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003816:	4b47      	ldr	r3, [pc, #284]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003818:	6a1a      	ldr	r2, [r3, #32]
 800381a:	4b46      	ldr	r3, [pc, #280]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800381c:	2180      	movs	r1, #128	; 0x80
 800381e:	0249      	lsls	r1, r1, #9
 8003820:	430a      	orrs	r2, r1
 8003822:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003824:	4b43      	ldr	r3, [pc, #268]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003826:	6a1a      	ldr	r2, [r3, #32]
 8003828:	4b42      	ldr	r3, [pc, #264]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800382a:	4945      	ldr	r1, [pc, #276]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 800382c:	400a      	ands	r2, r1
 800382e:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003830:	4b40      	ldr	r3, [pc, #256]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003832:	68fa      	ldr	r2, [r7, #12]
 8003834:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2201      	movs	r2, #1
 800383a:	4013      	ands	r3, r2
 800383c:	d013      	beq.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800383e:	f7fd f991 	bl	8000b64 <HAL_GetTick>
 8003842:	0003      	movs	r3, r0
 8003844:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003846:	e009      	b.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003848:	f7fd f98c 	bl	8000b64 <HAL_GetTick>
 800384c:	0002      	movs	r2, r0
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	4a3c      	ldr	r2, [pc, #240]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d901      	bls.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003858:	2303      	movs	r3, #3
 800385a:	e067      	b.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800385c:	4b35      	ldr	r3, [pc, #212]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800385e:	6a1b      	ldr	r3, [r3, #32]
 8003860:	2202      	movs	r2, #2
 8003862:	4013      	ands	r3, r2
 8003864:	d0f0      	beq.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003866:	4b33      	ldr	r3, [pc, #204]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003868:	6a1b      	ldr	r3, [r3, #32]
 800386a:	4a34      	ldr	r2, [pc, #208]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800386c:	4013      	ands	r3, r2
 800386e:	0019      	movs	r1, r3
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	685a      	ldr	r2, [r3, #4]
 8003874:	4b2f      	ldr	r3, [pc, #188]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003876:	430a      	orrs	r2, r1
 8003878:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800387a:	2317      	movs	r3, #23
 800387c:	18fb      	adds	r3, r7, r3
 800387e:	781b      	ldrb	r3, [r3, #0]
 8003880:	2b01      	cmp	r3, #1
 8003882:	d105      	bne.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003884:	4b2b      	ldr	r3, [pc, #172]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003886:	69da      	ldr	r2, [r3, #28]
 8003888:	4b2a      	ldr	r3, [pc, #168]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800388a:	492f      	ldr	r1, [pc, #188]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 800388c:	400a      	ands	r2, r1
 800388e:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	2201      	movs	r2, #1
 8003896:	4013      	ands	r3, r2
 8003898:	d009      	beq.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800389a:	4b26      	ldr	r3, [pc, #152]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800389c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800389e:	2203      	movs	r2, #3
 80038a0:	4393      	bics	r3, r2
 80038a2:	0019      	movs	r1, r3
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	689a      	ldr	r2, [r3, #8]
 80038a8:	4b22      	ldr	r3, [pc, #136]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80038aa:	430a      	orrs	r2, r1
 80038ac:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	2202      	movs	r2, #2
 80038b4:	4013      	ands	r3, r2
 80038b6:	d009      	beq.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80038b8:	4b1e      	ldr	r3, [pc, #120]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80038ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038bc:	4a23      	ldr	r2, [pc, #140]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80038be:	4013      	ands	r3, r2
 80038c0:	0019      	movs	r1, r3
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	68da      	ldr	r2, [r3, #12]
 80038c6:	4b1b      	ldr	r3, [pc, #108]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80038c8:	430a      	orrs	r2, r1
 80038ca:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	2220      	movs	r2, #32
 80038d2:	4013      	ands	r3, r2
 80038d4:	d009      	beq.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80038d6:	4b17      	ldr	r3, [pc, #92]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80038d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038da:	2210      	movs	r2, #16
 80038dc:	4393      	bics	r3, r2
 80038de:	0019      	movs	r1, r3
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	691a      	ldr	r2, [r3, #16]
 80038e4:	4b13      	ldr	r3, [pc, #76]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80038e6:	430a      	orrs	r2, r1
 80038e8:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	2380      	movs	r3, #128	; 0x80
 80038f0:	029b      	lsls	r3, r3, #10
 80038f2:	4013      	ands	r3, r2
 80038f4:	d009      	beq.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80038f6:	4b0f      	ldr	r3, [pc, #60]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80038f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038fa:	2280      	movs	r2, #128	; 0x80
 80038fc:	4393      	bics	r3, r2
 80038fe:	0019      	movs	r1, r3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	699a      	ldr	r2, [r3, #24]
 8003904:	4b0b      	ldr	r3, [pc, #44]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003906:	430a      	orrs	r2, r1
 8003908:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	2380      	movs	r3, #128	; 0x80
 8003910:	00db      	lsls	r3, r3, #3
 8003912:	4013      	ands	r3, r2
 8003914:	d009      	beq.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003916:	4b07      	ldr	r3, [pc, #28]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800391a:	2240      	movs	r2, #64	; 0x40
 800391c:	4393      	bics	r3, r2
 800391e:	0019      	movs	r1, r3
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	695a      	ldr	r2, [r3, #20]
 8003924:	4b03      	ldr	r3, [pc, #12]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003926:	430a      	orrs	r2, r1
 8003928:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800392a:	2300      	movs	r3, #0
}
 800392c:	0018      	movs	r0, r3
 800392e:	46bd      	mov	sp, r7
 8003930:	b006      	add	sp, #24
 8003932:	bd80      	pop	{r7, pc}
 8003934:	40021000 	.word	0x40021000
 8003938:	40007000 	.word	0x40007000
 800393c:	fffffcff 	.word	0xfffffcff
 8003940:	fffeffff 	.word	0xfffeffff
 8003944:	00001388 	.word	0x00001388
 8003948:	efffffff 	.word	0xefffffff
 800394c:	fffcffff 	.word	0xfffcffff

08003950 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b084      	sub	sp, #16
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2244      	movs	r2, #68	; 0x44
 800395c:	2100      	movs	r1, #0
 800395e:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003960:	4b05      	ldr	r3, [pc, #20]	; (8003978 <USB_EnableGlobalInt+0x28>)
 8003962:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	b299      	uxth	r1, r3
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2240      	movs	r2, #64	; 0x40
 800396c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800396e:	2300      	movs	r3, #0
}
 8003970:	0018      	movs	r0, r3
 8003972:	46bd      	mov	sp, r7
 8003974:	b004      	add	sp, #16
 8003976:	bd80      	pop	{r7, pc}
 8003978:	0000bf80 	.word	0x0000bf80

0800397c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b084      	sub	sp, #16
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003984:	4b09      	ldr	r3, [pc, #36]	; (80039ac <USB_DisableGlobalInt+0x30>)
 8003986:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2240      	movs	r2, #64	; 0x40
 800398c:	5a9b      	ldrh	r3, [r3, r2]
 800398e:	b29b      	uxth	r3, r3
 8003990:	68fa      	ldr	r2, [r7, #12]
 8003992:	b292      	uxth	r2, r2
 8003994:	43d2      	mvns	r2, r2
 8003996:	b292      	uxth	r2, r2
 8003998:	4013      	ands	r3, r2
 800399a:	b299      	uxth	r1, r3
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2240      	movs	r2, #64	; 0x40
 80039a0:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80039a2:	2300      	movs	r3, #0
}
 80039a4:	0018      	movs	r0, r3
 80039a6:	46bd      	mov	sp, r7
 80039a8:	b004      	add	sp, #16
 80039aa:	bd80      	pop	{r7, pc}
 80039ac:	0000bf80 	.word	0x0000bf80

080039b0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80039b0:	b084      	sub	sp, #16
 80039b2:	b590      	push	{r4, r7, lr}
 80039b4:	46c6      	mov	lr, r8
 80039b6:	b500      	push	{lr}
 80039b8:	b082      	sub	sp, #8
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	6078      	str	r0, [r7, #4]
 80039be:	2004      	movs	r0, #4
 80039c0:	2410      	movs	r4, #16
 80039c2:	46a4      	mov	ip, r4
 80039c4:	2408      	movs	r4, #8
 80039c6:	46a0      	mov	r8, r4
 80039c8:	44b8      	add	r8, r7
 80039ca:	44c4      	add	ip, r8
 80039cc:	4460      	add	r0, ip
 80039ce:	6001      	str	r1, [r0, #0]
 80039d0:	6042      	str	r2, [r0, #4]
 80039d2:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2240      	movs	r2, #64	; 0x40
 80039d8:	2101      	movs	r1, #1
 80039da:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2240      	movs	r2, #64	; 0x40
 80039e0:	2100      	movs	r1, #0
 80039e2:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2244      	movs	r2, #68	; 0x44
 80039e8:	2100      	movs	r1, #0
 80039ea:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2250      	movs	r2, #80	; 0x50
 80039f0:	2100      	movs	r1, #0
 80039f2:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80039f4:	2300      	movs	r3, #0
}
 80039f6:	0018      	movs	r0, r3
 80039f8:	46bd      	mov	sp, r7
 80039fa:	b002      	add	sp, #8
 80039fc:	bc80      	pop	{r7}
 80039fe:	46b8      	mov	r8, r7
 8003a00:	bc90      	pop	{r4, r7}
 8003a02:	bc08      	pop	{r3}
 8003a04:	b004      	add	sp, #16
 8003a06:	4718      	bx	r3

08003a08 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b09c      	sub	sp, #112	; 0x70
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003a12:	236f      	movs	r3, #111	; 0x6f
 8003a14:	18fb      	adds	r3, r7, r3
 8003a16:	2200      	movs	r2, #0
 8003a18:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003a1a:	687a      	ldr	r2, [r7, #4]
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	781b      	ldrb	r3, [r3, #0]
 8003a20:	009b      	lsls	r3, r3, #2
 8003a22:	18d3      	adds	r3, r2, r3
 8003a24:	881b      	ldrh	r3, [r3, #0]
 8003a26:	b29a      	uxth	r2, r3
 8003a28:	236c      	movs	r3, #108	; 0x6c
 8003a2a:	18fb      	adds	r3, r7, r3
 8003a2c:	49cf      	ldr	r1, [pc, #828]	; (8003d6c <USB_ActivateEndpoint+0x364>)
 8003a2e:	400a      	ands	r2, r1
 8003a30:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	78db      	ldrb	r3, [r3, #3]
 8003a36:	2b03      	cmp	r3, #3
 8003a38:	d017      	beq.n	8003a6a <USB_ActivateEndpoint+0x62>
 8003a3a:	dc28      	bgt.n	8003a8e <USB_ActivateEndpoint+0x86>
 8003a3c:	2b02      	cmp	r3, #2
 8003a3e:	d00e      	beq.n	8003a5e <USB_ActivateEndpoint+0x56>
 8003a40:	dc25      	bgt.n	8003a8e <USB_ActivateEndpoint+0x86>
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d002      	beq.n	8003a4c <USB_ActivateEndpoint+0x44>
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d018      	beq.n	8003a7c <USB_ActivateEndpoint+0x74>
 8003a4a:	e020      	b.n	8003a8e <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003a4c:	226c      	movs	r2, #108	; 0x6c
 8003a4e:	18bb      	adds	r3, r7, r2
 8003a50:	18ba      	adds	r2, r7, r2
 8003a52:	8812      	ldrh	r2, [r2, #0]
 8003a54:	2180      	movs	r1, #128	; 0x80
 8003a56:	0089      	lsls	r1, r1, #2
 8003a58:	430a      	orrs	r2, r1
 8003a5a:	801a      	strh	r2, [r3, #0]
      break;
 8003a5c:	e01c      	b.n	8003a98 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 8003a5e:	226c      	movs	r2, #108	; 0x6c
 8003a60:	18bb      	adds	r3, r7, r2
 8003a62:	18ba      	adds	r2, r7, r2
 8003a64:	8812      	ldrh	r2, [r2, #0]
 8003a66:	801a      	strh	r2, [r3, #0]
      break;
 8003a68:	e016      	b.n	8003a98 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003a6a:	226c      	movs	r2, #108	; 0x6c
 8003a6c:	18bb      	adds	r3, r7, r2
 8003a6e:	18ba      	adds	r2, r7, r2
 8003a70:	8812      	ldrh	r2, [r2, #0]
 8003a72:	21c0      	movs	r1, #192	; 0xc0
 8003a74:	00c9      	lsls	r1, r1, #3
 8003a76:	430a      	orrs	r2, r1
 8003a78:	801a      	strh	r2, [r3, #0]
      break;
 8003a7a:	e00d      	b.n	8003a98 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003a7c:	226c      	movs	r2, #108	; 0x6c
 8003a7e:	18bb      	adds	r3, r7, r2
 8003a80:	18ba      	adds	r2, r7, r2
 8003a82:	8812      	ldrh	r2, [r2, #0]
 8003a84:	2180      	movs	r1, #128	; 0x80
 8003a86:	00c9      	lsls	r1, r1, #3
 8003a88:	430a      	orrs	r2, r1
 8003a8a:	801a      	strh	r2, [r3, #0]
      break;
 8003a8c:	e004      	b.n	8003a98 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 8003a8e:	236f      	movs	r3, #111	; 0x6f
 8003a90:	18fb      	adds	r3, r7, r3
 8003a92:	2201      	movs	r2, #1
 8003a94:	701a      	strb	r2, [r3, #0]
      break;
 8003a96:	46c0      	nop			; (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003a98:	687a      	ldr	r2, [r7, #4]
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	781b      	ldrb	r3, [r3, #0]
 8003a9e:	009b      	lsls	r3, r3, #2
 8003aa0:	18d3      	adds	r3, r2, r3
 8003aa2:	226c      	movs	r2, #108	; 0x6c
 8003aa4:	18ba      	adds	r2, r7, r2
 8003aa6:	8812      	ldrh	r2, [r2, #0]
 8003aa8:	49b1      	ldr	r1, [pc, #708]	; (8003d70 <USB_ActivateEndpoint+0x368>)
 8003aaa:	430a      	orrs	r2, r1
 8003aac:	b292      	uxth	r2, r2
 8003aae:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003ab0:	687a      	ldr	r2, [r7, #4]
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	781b      	ldrb	r3, [r3, #0]
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	18d3      	adds	r3, r2, r3
 8003aba:	881b      	ldrh	r3, [r3, #0]
 8003abc:	b29b      	uxth	r3, r3
 8003abe:	b21b      	sxth	r3, r3
 8003ac0:	4aac      	ldr	r2, [pc, #688]	; (8003d74 <USB_ActivateEndpoint+0x36c>)
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	b21a      	sxth	r2, r3
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	781b      	ldrb	r3, [r3, #0]
 8003aca:	b21b      	sxth	r3, r3
 8003acc:	4313      	orrs	r3, r2
 8003ace:	b21a      	sxth	r2, r3
 8003ad0:	2166      	movs	r1, #102	; 0x66
 8003ad2:	187b      	adds	r3, r7, r1
 8003ad4:	801a      	strh	r2, [r3, #0]
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	781b      	ldrb	r3, [r3, #0]
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	18d3      	adds	r3, r2, r3
 8003ae0:	187a      	adds	r2, r7, r1
 8003ae2:	8812      	ldrh	r2, [r2, #0]
 8003ae4:	49a2      	ldr	r1, [pc, #648]	; (8003d70 <USB_ActivateEndpoint+0x368>)
 8003ae6:	430a      	orrs	r2, r1
 8003ae8:	b292      	uxth	r2, r2
 8003aea:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	7b1b      	ldrb	r3, [r3, #12]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d000      	beq.n	8003af6 <USB_ActivateEndpoint+0xee>
 8003af4:	e150      	b.n	8003d98 <USB_ActivateEndpoint+0x390>
  {
    if (ep->is_in != 0U)
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	785b      	ldrb	r3, [r3, #1]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d100      	bne.n	8003b00 <USB_ActivateEndpoint+0xf8>
 8003afe:	e07a      	b.n	8003bf6 <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	61bb      	str	r3, [r7, #24]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2250      	movs	r2, #80	; 0x50
 8003b08:	5a9b      	ldrh	r3, [r3, r2]
 8003b0a:	b29b      	uxth	r3, r3
 8003b0c:	001a      	movs	r2, r3
 8003b0e:	69bb      	ldr	r3, [r7, #24]
 8003b10:	189b      	adds	r3, r3, r2
 8003b12:	61bb      	str	r3, [r7, #24]
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	781b      	ldrb	r3, [r3, #0]
 8003b18:	00da      	lsls	r2, r3, #3
 8003b1a:	69bb      	ldr	r3, [r7, #24]
 8003b1c:	18d3      	adds	r3, r2, r3
 8003b1e:	2280      	movs	r2, #128	; 0x80
 8003b20:	00d2      	lsls	r2, r2, #3
 8003b22:	4694      	mov	ip, r2
 8003b24:	4463      	add	r3, ip
 8003b26:	617b      	str	r3, [r7, #20]
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	88db      	ldrh	r3, [r3, #6]
 8003b2c:	085b      	lsrs	r3, r3, #1
 8003b2e:	b29b      	uxth	r3, r3
 8003b30:	18db      	adds	r3, r3, r3
 8003b32:	b29a      	uxth	r2, r3
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003b38:	687a      	ldr	r2, [r7, #4]
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	781b      	ldrb	r3, [r3, #0]
 8003b3e:	009b      	lsls	r3, r3, #2
 8003b40:	18d2      	adds	r2, r2, r3
 8003b42:	2112      	movs	r1, #18
 8003b44:	187b      	adds	r3, r7, r1
 8003b46:	8812      	ldrh	r2, [r2, #0]
 8003b48:	801a      	strh	r2, [r3, #0]
 8003b4a:	187b      	adds	r3, r7, r1
 8003b4c:	881b      	ldrh	r3, [r3, #0]
 8003b4e:	2240      	movs	r2, #64	; 0x40
 8003b50:	4013      	ands	r3, r2
 8003b52:	d016      	beq.n	8003b82 <USB_ActivateEndpoint+0x17a>
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	781b      	ldrb	r3, [r3, #0]
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	18d3      	adds	r3, r2, r3
 8003b5e:	881b      	ldrh	r3, [r3, #0]
 8003b60:	b29a      	uxth	r2, r3
 8003b62:	2010      	movs	r0, #16
 8003b64:	183b      	adds	r3, r7, r0
 8003b66:	4983      	ldr	r1, [pc, #524]	; (8003d74 <USB_ActivateEndpoint+0x36c>)
 8003b68:	400a      	ands	r2, r1
 8003b6a:	801a      	strh	r2, [r3, #0]
 8003b6c:	687a      	ldr	r2, [r7, #4]
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	781b      	ldrb	r3, [r3, #0]
 8003b72:	009b      	lsls	r3, r3, #2
 8003b74:	18d3      	adds	r3, r2, r3
 8003b76:	183a      	adds	r2, r7, r0
 8003b78:	8812      	ldrh	r2, [r2, #0]
 8003b7a:	497f      	ldr	r1, [pc, #508]	; (8003d78 <USB_ActivateEndpoint+0x370>)
 8003b7c:	430a      	orrs	r2, r1
 8003b7e:	b292      	uxth	r2, r2
 8003b80:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	78db      	ldrb	r3, [r3, #3]
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d01d      	beq.n	8003bc6 <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003b8a:	687a      	ldr	r2, [r7, #4]
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	781b      	ldrb	r3, [r3, #0]
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	18d3      	adds	r3, r2, r3
 8003b94:	881b      	ldrh	r3, [r3, #0]
 8003b96:	b29a      	uxth	r2, r3
 8003b98:	200c      	movs	r0, #12
 8003b9a:	183b      	adds	r3, r7, r0
 8003b9c:	4977      	ldr	r1, [pc, #476]	; (8003d7c <USB_ActivateEndpoint+0x374>)
 8003b9e:	400a      	ands	r2, r1
 8003ba0:	801a      	strh	r2, [r3, #0]
 8003ba2:	183b      	adds	r3, r7, r0
 8003ba4:	183a      	adds	r2, r7, r0
 8003ba6:	8812      	ldrh	r2, [r2, #0]
 8003ba8:	2120      	movs	r1, #32
 8003baa:	404a      	eors	r2, r1
 8003bac:	801a      	strh	r2, [r3, #0]
 8003bae:	687a      	ldr	r2, [r7, #4]
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	781b      	ldrb	r3, [r3, #0]
 8003bb4:	009b      	lsls	r3, r3, #2
 8003bb6:	18d3      	adds	r3, r2, r3
 8003bb8:	183a      	adds	r2, r7, r0
 8003bba:	8812      	ldrh	r2, [r2, #0]
 8003bbc:	496c      	ldr	r1, [pc, #432]	; (8003d70 <USB_ActivateEndpoint+0x368>)
 8003bbe:	430a      	orrs	r2, r1
 8003bc0:	b292      	uxth	r2, r2
 8003bc2:	801a      	strh	r2, [r3, #0]
 8003bc4:	e27a      	b.n	80040bc <USB_ActivateEndpoint+0x6b4>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003bc6:	687a      	ldr	r2, [r7, #4]
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	781b      	ldrb	r3, [r3, #0]
 8003bcc:	009b      	lsls	r3, r3, #2
 8003bce:	18d3      	adds	r3, r2, r3
 8003bd0:	881b      	ldrh	r3, [r3, #0]
 8003bd2:	b29a      	uxth	r2, r3
 8003bd4:	200e      	movs	r0, #14
 8003bd6:	183b      	adds	r3, r7, r0
 8003bd8:	4968      	ldr	r1, [pc, #416]	; (8003d7c <USB_ActivateEndpoint+0x374>)
 8003bda:	400a      	ands	r2, r1
 8003bdc:	801a      	strh	r2, [r3, #0]
 8003bde:	687a      	ldr	r2, [r7, #4]
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	781b      	ldrb	r3, [r3, #0]
 8003be4:	009b      	lsls	r3, r3, #2
 8003be6:	18d3      	adds	r3, r2, r3
 8003be8:	183a      	adds	r2, r7, r0
 8003bea:	8812      	ldrh	r2, [r2, #0]
 8003bec:	4960      	ldr	r1, [pc, #384]	; (8003d70 <USB_ActivateEndpoint+0x368>)
 8003bee:	430a      	orrs	r2, r1
 8003bf0:	b292      	uxth	r2, r2
 8003bf2:	801a      	strh	r2, [r3, #0]
 8003bf4:	e262      	b.n	80040bc <USB_ActivateEndpoint+0x6b4>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	633b      	str	r3, [r7, #48]	; 0x30
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2250      	movs	r2, #80	; 0x50
 8003bfe:	5a9b      	ldrh	r3, [r3, r2]
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	001a      	movs	r2, r3
 8003c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c06:	189b      	adds	r3, r3, r2
 8003c08:	633b      	str	r3, [r7, #48]	; 0x30
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	781b      	ldrb	r3, [r3, #0]
 8003c0e:	00da      	lsls	r2, r3, #3
 8003c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c12:	18d3      	adds	r3, r2, r3
 8003c14:	4a5a      	ldr	r2, [pc, #360]	; (8003d80 <USB_ActivateEndpoint+0x378>)
 8003c16:	4694      	mov	ip, r2
 8003c18:	4463      	add	r3, ip
 8003c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	88db      	ldrh	r3, [r3, #6]
 8003c20:	085b      	lsrs	r3, r3, #1
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	18db      	adds	r3, r3, r3
 8003c26:	b29a      	uxth	r2, r3
 8003c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c2a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2250      	movs	r2, #80	; 0x50
 8003c34:	5a9b      	ldrh	r3, [r3, r2]
 8003c36:	b29b      	uxth	r3, r3
 8003c38:	001a      	movs	r2, r3
 8003c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c3c:	189b      	adds	r3, r3, r2
 8003c3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	781b      	ldrb	r3, [r3, #0]
 8003c44:	00da      	lsls	r2, r3, #3
 8003c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c48:	18d3      	adds	r3, r2, r3
 8003c4a:	4a4e      	ldr	r2, [pc, #312]	; (8003d84 <USB_ActivateEndpoint+0x37c>)
 8003c4c:	4694      	mov	ip, r2
 8003c4e:	4463      	add	r3, ip
 8003c50:	627b      	str	r3, [r7, #36]	; 0x24
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	691b      	ldr	r3, [r3, #16]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d110      	bne.n	8003c7c <USB_ActivateEndpoint+0x274>
 8003c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c5c:	881b      	ldrh	r3, [r3, #0]
 8003c5e:	b29b      	uxth	r3, r3
 8003c60:	4a49      	ldr	r2, [pc, #292]	; (8003d88 <USB_ActivateEndpoint+0x380>)
 8003c62:	4013      	ands	r3, r2
 8003c64:	b29a      	uxth	r2, r3
 8003c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c68:	801a      	strh	r2, [r3, #0]
 8003c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6c:	881b      	ldrh	r3, [r3, #0]
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	4a46      	ldr	r2, [pc, #280]	; (8003d8c <USB_ActivateEndpoint+0x384>)
 8003c72:	4313      	orrs	r3, r2
 8003c74:	b29a      	uxth	r2, r3
 8003c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c78:	801a      	strh	r2, [r3, #0]
 8003c7a:	e02b      	b.n	8003cd4 <USB_ActivateEndpoint+0x2cc>
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	691b      	ldr	r3, [r3, #16]
 8003c80:	2b3e      	cmp	r3, #62	; 0x3e
 8003c82:	d812      	bhi.n	8003caa <USB_ActivateEndpoint+0x2a2>
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	691b      	ldr	r3, [r3, #16]
 8003c88:	085b      	lsrs	r3, r3, #1
 8003c8a:	66bb      	str	r3, [r7, #104]	; 0x68
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	691b      	ldr	r3, [r3, #16]
 8003c90:	2201      	movs	r2, #1
 8003c92:	4013      	ands	r3, r2
 8003c94:	d002      	beq.n	8003c9c <USB_ActivateEndpoint+0x294>
 8003c96:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003c98:	3301      	adds	r3, #1
 8003c9a:	66bb      	str	r3, [r7, #104]	; 0x68
 8003c9c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	029b      	lsls	r3, r3, #10
 8003ca2:	b29a      	uxth	r2, r3
 8003ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca6:	801a      	strh	r2, [r3, #0]
 8003ca8:	e014      	b.n	8003cd4 <USB_ActivateEndpoint+0x2cc>
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	691b      	ldr	r3, [r3, #16]
 8003cae:	095b      	lsrs	r3, r3, #5
 8003cb0:	66bb      	str	r3, [r7, #104]	; 0x68
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	691b      	ldr	r3, [r3, #16]
 8003cb6:	221f      	movs	r2, #31
 8003cb8:	4013      	ands	r3, r2
 8003cba:	d102      	bne.n	8003cc2 <USB_ActivateEndpoint+0x2ba>
 8003cbc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003cbe:	3b01      	subs	r3, #1
 8003cc0:	66bb      	str	r3, [r7, #104]	; 0x68
 8003cc2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	029b      	lsls	r3, r3, #10
 8003cc8:	b29b      	uxth	r3, r3
 8003cca:	4a30      	ldr	r2, [pc, #192]	; (8003d8c <USB_ActivateEndpoint+0x384>)
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	b29a      	uxth	r2, r3
 8003cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003cd4:	687a      	ldr	r2, [r7, #4]
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	781b      	ldrb	r3, [r3, #0]
 8003cda:	009b      	lsls	r3, r3, #2
 8003cdc:	18d2      	adds	r2, r2, r3
 8003cde:	2122      	movs	r1, #34	; 0x22
 8003ce0:	187b      	adds	r3, r7, r1
 8003ce2:	8812      	ldrh	r2, [r2, #0]
 8003ce4:	801a      	strh	r2, [r3, #0]
 8003ce6:	187b      	adds	r3, r7, r1
 8003ce8:	881a      	ldrh	r2, [r3, #0]
 8003cea:	2380      	movs	r3, #128	; 0x80
 8003cec:	01db      	lsls	r3, r3, #7
 8003cee:	4013      	ands	r3, r2
 8003cf0:	d016      	beq.n	8003d20 <USB_ActivateEndpoint+0x318>
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	781b      	ldrb	r3, [r3, #0]
 8003cf8:	009b      	lsls	r3, r3, #2
 8003cfa:	18d3      	adds	r3, r2, r3
 8003cfc:	881b      	ldrh	r3, [r3, #0]
 8003cfe:	b29a      	uxth	r2, r3
 8003d00:	2020      	movs	r0, #32
 8003d02:	183b      	adds	r3, r7, r0
 8003d04:	491b      	ldr	r1, [pc, #108]	; (8003d74 <USB_ActivateEndpoint+0x36c>)
 8003d06:	400a      	ands	r2, r1
 8003d08:	801a      	strh	r2, [r3, #0]
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	781b      	ldrb	r3, [r3, #0]
 8003d10:	009b      	lsls	r3, r3, #2
 8003d12:	18d3      	adds	r3, r2, r3
 8003d14:	183a      	adds	r2, r7, r0
 8003d16:	8812      	ldrh	r2, [r2, #0]
 8003d18:	491d      	ldr	r1, [pc, #116]	; (8003d90 <USB_ActivateEndpoint+0x388>)
 8003d1a:	430a      	orrs	r2, r1
 8003d1c:	b292      	uxth	r2, r2
 8003d1e:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003d20:	687a      	ldr	r2, [r7, #4]
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	781b      	ldrb	r3, [r3, #0]
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	18d3      	adds	r3, r2, r3
 8003d2a:	881b      	ldrh	r3, [r3, #0]
 8003d2c:	b29a      	uxth	r2, r3
 8003d2e:	201e      	movs	r0, #30
 8003d30:	183b      	adds	r3, r7, r0
 8003d32:	4918      	ldr	r1, [pc, #96]	; (8003d94 <USB_ActivateEndpoint+0x38c>)
 8003d34:	400a      	ands	r2, r1
 8003d36:	801a      	strh	r2, [r3, #0]
 8003d38:	183b      	adds	r3, r7, r0
 8003d3a:	183a      	adds	r2, r7, r0
 8003d3c:	8812      	ldrh	r2, [r2, #0]
 8003d3e:	2180      	movs	r1, #128	; 0x80
 8003d40:	0149      	lsls	r1, r1, #5
 8003d42:	404a      	eors	r2, r1
 8003d44:	801a      	strh	r2, [r3, #0]
 8003d46:	183b      	adds	r3, r7, r0
 8003d48:	183a      	adds	r2, r7, r0
 8003d4a:	8812      	ldrh	r2, [r2, #0]
 8003d4c:	2180      	movs	r1, #128	; 0x80
 8003d4e:	0189      	lsls	r1, r1, #6
 8003d50:	404a      	eors	r2, r1
 8003d52:	801a      	strh	r2, [r3, #0]
 8003d54:	687a      	ldr	r2, [r7, #4]
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	781b      	ldrb	r3, [r3, #0]
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	18d3      	adds	r3, r2, r3
 8003d5e:	183a      	adds	r2, r7, r0
 8003d60:	8812      	ldrh	r2, [r2, #0]
 8003d62:	4903      	ldr	r1, [pc, #12]	; (8003d70 <USB_ActivateEndpoint+0x368>)
 8003d64:	430a      	orrs	r2, r1
 8003d66:	b292      	uxth	r2, r2
 8003d68:	801a      	strh	r2, [r3, #0]
 8003d6a:	e1a7      	b.n	80040bc <USB_ActivateEndpoint+0x6b4>
 8003d6c:	ffff898f 	.word	0xffff898f
 8003d70:	ffff8080 	.word	0xffff8080
 8003d74:	ffff8f8f 	.word	0xffff8f8f
 8003d78:	ffff80c0 	.word	0xffff80c0
 8003d7c:	ffff8fbf 	.word	0xffff8fbf
 8003d80:	00000404 	.word	0x00000404
 8003d84:	00000406 	.word	0x00000406
 8003d88:	ffff83ff 	.word	0xffff83ff
 8003d8c:	ffff8000 	.word	0xffff8000
 8003d90:	ffffc080 	.word	0xffffc080
 8003d94:	ffffbf8f 	.word	0xffffbf8f
    }
  }
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	78db      	ldrb	r3, [r3, #3]
 8003d9c:	2b02      	cmp	r3, #2
 8003d9e:	d117      	bne.n	8003dd0 <USB_ActivateEndpoint+0x3c8>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8003da0:	687a      	ldr	r2, [r7, #4]
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	781b      	ldrb	r3, [r3, #0]
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	18d3      	adds	r3, r2, r3
 8003daa:	881b      	ldrh	r3, [r3, #0]
 8003dac:	b29a      	uxth	r2, r3
 8003dae:	2062      	movs	r0, #98	; 0x62
 8003db0:	183b      	adds	r3, r7, r0
 8003db2:	49c6      	ldr	r1, [pc, #792]	; (80040cc <USB_ActivateEndpoint+0x6c4>)
 8003db4:	400a      	ands	r2, r1
 8003db6:	801a      	strh	r2, [r3, #0]
 8003db8:	687a      	ldr	r2, [r7, #4]
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	781b      	ldrb	r3, [r3, #0]
 8003dbe:	009b      	lsls	r3, r3, #2
 8003dc0:	18d3      	adds	r3, r2, r3
 8003dc2:	183a      	adds	r2, r7, r0
 8003dc4:	8812      	ldrh	r2, [r2, #0]
 8003dc6:	49c2      	ldr	r1, [pc, #776]	; (80040d0 <USB_ActivateEndpoint+0x6c8>)
 8003dc8:	430a      	orrs	r2, r1
 8003dca:	b292      	uxth	r2, r2
 8003dcc:	801a      	strh	r2, [r3, #0]
 8003dce:	e016      	b.n	8003dfe <USB_ActivateEndpoint+0x3f6>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8003dd0:	687a      	ldr	r2, [r7, #4]
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	781b      	ldrb	r3, [r3, #0]
 8003dd6:	009b      	lsls	r3, r3, #2
 8003dd8:	18d3      	adds	r3, r2, r3
 8003dda:	881b      	ldrh	r3, [r3, #0]
 8003ddc:	b29a      	uxth	r2, r3
 8003dde:	2064      	movs	r0, #100	; 0x64
 8003de0:	183b      	adds	r3, r7, r0
 8003de2:	49bc      	ldr	r1, [pc, #752]	; (80040d4 <USB_ActivateEndpoint+0x6cc>)
 8003de4:	400a      	ands	r2, r1
 8003de6:	801a      	strh	r2, [r3, #0]
 8003de8:	687a      	ldr	r2, [r7, #4]
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	781b      	ldrb	r3, [r3, #0]
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	18d3      	adds	r3, r2, r3
 8003df2:	183a      	adds	r2, r7, r0
 8003df4:	8812      	ldrh	r2, [r2, #0]
 8003df6:	49b8      	ldr	r1, [pc, #736]	; (80040d8 <USB_ActivateEndpoint+0x6d0>)
 8003df8:	430a      	orrs	r2, r1
 8003dfa:	b292      	uxth	r2, r2
 8003dfc:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2250      	movs	r2, #80	; 0x50
 8003e06:	5a9b      	ldrh	r3, [r3, r2]
 8003e08:	b29b      	uxth	r3, r3
 8003e0a:	001a      	movs	r2, r3
 8003e0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e0e:	189b      	adds	r3, r3, r2
 8003e10:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	781b      	ldrb	r3, [r3, #0]
 8003e16:	00da      	lsls	r2, r3, #3
 8003e18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e1a:	18d3      	adds	r3, r2, r3
 8003e1c:	2280      	movs	r2, #128	; 0x80
 8003e1e:	00d2      	lsls	r2, r2, #3
 8003e20:	4694      	mov	ip, r2
 8003e22:	4463      	add	r3, ip
 8003e24:	65bb      	str	r3, [r7, #88]	; 0x58
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	891b      	ldrh	r3, [r3, #8]
 8003e2a:	085b      	lsrs	r3, r3, #1
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	18db      	adds	r3, r3, r3
 8003e30:	b29a      	uxth	r2, r3
 8003e32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003e34:	801a      	strh	r2, [r3, #0]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	657b      	str	r3, [r7, #84]	; 0x54
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2250      	movs	r2, #80	; 0x50
 8003e3e:	5a9b      	ldrh	r3, [r3, r2]
 8003e40:	b29b      	uxth	r3, r3
 8003e42:	001a      	movs	r2, r3
 8003e44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e46:	189b      	adds	r3, r3, r2
 8003e48:	657b      	str	r3, [r7, #84]	; 0x54
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	781b      	ldrb	r3, [r3, #0]
 8003e4e:	00da      	lsls	r2, r3, #3
 8003e50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e52:	18d3      	adds	r3, r2, r3
 8003e54:	4aa1      	ldr	r2, [pc, #644]	; (80040dc <USB_ActivateEndpoint+0x6d4>)
 8003e56:	4694      	mov	ip, r2
 8003e58:	4463      	add	r3, ip
 8003e5a:	653b      	str	r3, [r7, #80]	; 0x50
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	895b      	ldrh	r3, [r3, #10]
 8003e60:	085b      	lsrs	r3, r3, #1
 8003e62:	b29b      	uxth	r3, r3
 8003e64:	18db      	adds	r3, r3, r3
 8003e66:	b29a      	uxth	r2, r3
 8003e68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e6a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	785b      	ldrb	r3, [r3, #1]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d000      	beq.n	8003e76 <USB_ActivateEndpoint+0x46e>
 8003e74:	e087      	b.n	8003f86 <USB_ActivateEndpoint+0x57e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	781b      	ldrb	r3, [r3, #0]
 8003e7c:	009b      	lsls	r3, r3, #2
 8003e7e:	18d2      	adds	r2, r2, r3
 8003e80:	2140      	movs	r1, #64	; 0x40
 8003e82:	187b      	adds	r3, r7, r1
 8003e84:	8812      	ldrh	r2, [r2, #0]
 8003e86:	801a      	strh	r2, [r3, #0]
 8003e88:	187b      	adds	r3, r7, r1
 8003e8a:	881a      	ldrh	r2, [r3, #0]
 8003e8c:	2380      	movs	r3, #128	; 0x80
 8003e8e:	01db      	lsls	r3, r3, #7
 8003e90:	4013      	ands	r3, r2
 8003e92:	d016      	beq.n	8003ec2 <USB_ActivateEndpoint+0x4ba>
 8003e94:	687a      	ldr	r2, [r7, #4]
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	781b      	ldrb	r3, [r3, #0]
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	18d3      	adds	r3, r2, r3
 8003e9e:	881b      	ldrh	r3, [r3, #0]
 8003ea0:	b29a      	uxth	r2, r3
 8003ea2:	203e      	movs	r0, #62	; 0x3e
 8003ea4:	183b      	adds	r3, r7, r0
 8003ea6:	4989      	ldr	r1, [pc, #548]	; (80040cc <USB_ActivateEndpoint+0x6c4>)
 8003ea8:	400a      	ands	r2, r1
 8003eaa:	801a      	strh	r2, [r3, #0]
 8003eac:	687a      	ldr	r2, [r7, #4]
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	781b      	ldrb	r3, [r3, #0]
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	18d3      	adds	r3, r2, r3
 8003eb6:	183a      	adds	r2, r7, r0
 8003eb8:	8812      	ldrh	r2, [r2, #0]
 8003eba:	4989      	ldr	r1, [pc, #548]	; (80040e0 <USB_ActivateEndpoint+0x6d8>)
 8003ebc:	430a      	orrs	r2, r1
 8003ebe:	b292      	uxth	r2, r2
 8003ec0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003ec2:	687a      	ldr	r2, [r7, #4]
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	781b      	ldrb	r3, [r3, #0]
 8003ec8:	009b      	lsls	r3, r3, #2
 8003eca:	18d2      	adds	r2, r2, r3
 8003ecc:	213c      	movs	r1, #60	; 0x3c
 8003ece:	187b      	adds	r3, r7, r1
 8003ed0:	8812      	ldrh	r2, [r2, #0]
 8003ed2:	801a      	strh	r2, [r3, #0]
 8003ed4:	187b      	adds	r3, r7, r1
 8003ed6:	881b      	ldrh	r3, [r3, #0]
 8003ed8:	2240      	movs	r2, #64	; 0x40
 8003eda:	4013      	ands	r3, r2
 8003edc:	d016      	beq.n	8003f0c <USB_ActivateEndpoint+0x504>
 8003ede:	687a      	ldr	r2, [r7, #4]
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	781b      	ldrb	r3, [r3, #0]
 8003ee4:	009b      	lsls	r3, r3, #2
 8003ee6:	18d3      	adds	r3, r2, r3
 8003ee8:	881b      	ldrh	r3, [r3, #0]
 8003eea:	b29a      	uxth	r2, r3
 8003eec:	203a      	movs	r0, #58	; 0x3a
 8003eee:	183b      	adds	r3, r7, r0
 8003ef0:	4976      	ldr	r1, [pc, #472]	; (80040cc <USB_ActivateEndpoint+0x6c4>)
 8003ef2:	400a      	ands	r2, r1
 8003ef4:	801a      	strh	r2, [r3, #0]
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	781b      	ldrb	r3, [r3, #0]
 8003efc:	009b      	lsls	r3, r3, #2
 8003efe:	18d3      	adds	r3, r2, r3
 8003f00:	183a      	adds	r2, r7, r0
 8003f02:	8812      	ldrh	r2, [r2, #0]
 8003f04:	4977      	ldr	r1, [pc, #476]	; (80040e4 <USB_ActivateEndpoint+0x6dc>)
 8003f06:	430a      	orrs	r2, r1
 8003f08:	b292      	uxth	r2, r2
 8003f0a:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003f0c:	687a      	ldr	r2, [r7, #4]
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	781b      	ldrb	r3, [r3, #0]
 8003f12:	009b      	lsls	r3, r3, #2
 8003f14:	18d3      	adds	r3, r2, r3
 8003f16:	881b      	ldrh	r3, [r3, #0]
 8003f18:	b29a      	uxth	r2, r3
 8003f1a:	2038      	movs	r0, #56	; 0x38
 8003f1c:	183b      	adds	r3, r7, r0
 8003f1e:	4972      	ldr	r1, [pc, #456]	; (80040e8 <USB_ActivateEndpoint+0x6e0>)
 8003f20:	400a      	ands	r2, r1
 8003f22:	801a      	strh	r2, [r3, #0]
 8003f24:	183b      	adds	r3, r7, r0
 8003f26:	183a      	adds	r2, r7, r0
 8003f28:	8812      	ldrh	r2, [r2, #0]
 8003f2a:	2180      	movs	r1, #128	; 0x80
 8003f2c:	0149      	lsls	r1, r1, #5
 8003f2e:	404a      	eors	r2, r1
 8003f30:	801a      	strh	r2, [r3, #0]
 8003f32:	183b      	adds	r3, r7, r0
 8003f34:	183a      	adds	r2, r7, r0
 8003f36:	8812      	ldrh	r2, [r2, #0]
 8003f38:	2180      	movs	r1, #128	; 0x80
 8003f3a:	0189      	lsls	r1, r1, #6
 8003f3c:	404a      	eors	r2, r1
 8003f3e:	801a      	strh	r2, [r3, #0]
 8003f40:	687a      	ldr	r2, [r7, #4]
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	781b      	ldrb	r3, [r3, #0]
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	18d3      	adds	r3, r2, r3
 8003f4a:	183a      	adds	r2, r7, r0
 8003f4c:	8812      	ldrh	r2, [r2, #0]
 8003f4e:	4962      	ldr	r1, [pc, #392]	; (80040d8 <USB_ActivateEndpoint+0x6d0>)
 8003f50:	430a      	orrs	r2, r1
 8003f52:	b292      	uxth	r2, r2
 8003f54:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003f56:	687a      	ldr	r2, [r7, #4]
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	781b      	ldrb	r3, [r3, #0]
 8003f5c:	009b      	lsls	r3, r3, #2
 8003f5e:	18d3      	adds	r3, r2, r3
 8003f60:	881b      	ldrh	r3, [r3, #0]
 8003f62:	b29a      	uxth	r2, r3
 8003f64:	2036      	movs	r0, #54	; 0x36
 8003f66:	183b      	adds	r3, r7, r0
 8003f68:	4960      	ldr	r1, [pc, #384]	; (80040ec <USB_ActivateEndpoint+0x6e4>)
 8003f6a:	400a      	ands	r2, r1
 8003f6c:	801a      	strh	r2, [r3, #0]
 8003f6e:	687a      	ldr	r2, [r7, #4]
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	781b      	ldrb	r3, [r3, #0]
 8003f74:	009b      	lsls	r3, r3, #2
 8003f76:	18d3      	adds	r3, r2, r3
 8003f78:	183a      	adds	r2, r7, r0
 8003f7a:	8812      	ldrh	r2, [r2, #0]
 8003f7c:	4956      	ldr	r1, [pc, #344]	; (80040d8 <USB_ActivateEndpoint+0x6d0>)
 8003f7e:	430a      	orrs	r2, r1
 8003f80:	b292      	uxth	r2, r2
 8003f82:	801a      	strh	r2, [r3, #0]
 8003f84:	e09a      	b.n	80040bc <USB_ActivateEndpoint+0x6b4>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003f86:	687a      	ldr	r2, [r7, #4]
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	781b      	ldrb	r3, [r3, #0]
 8003f8c:	009b      	lsls	r3, r3, #2
 8003f8e:	18d2      	adds	r2, r2, r3
 8003f90:	214e      	movs	r1, #78	; 0x4e
 8003f92:	187b      	adds	r3, r7, r1
 8003f94:	8812      	ldrh	r2, [r2, #0]
 8003f96:	801a      	strh	r2, [r3, #0]
 8003f98:	187b      	adds	r3, r7, r1
 8003f9a:	881a      	ldrh	r2, [r3, #0]
 8003f9c:	2380      	movs	r3, #128	; 0x80
 8003f9e:	01db      	lsls	r3, r3, #7
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	d016      	beq.n	8003fd2 <USB_ActivateEndpoint+0x5ca>
 8003fa4:	687a      	ldr	r2, [r7, #4]
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	781b      	ldrb	r3, [r3, #0]
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	18d3      	adds	r3, r2, r3
 8003fae:	881b      	ldrh	r3, [r3, #0]
 8003fb0:	b29a      	uxth	r2, r3
 8003fb2:	204c      	movs	r0, #76	; 0x4c
 8003fb4:	183b      	adds	r3, r7, r0
 8003fb6:	4945      	ldr	r1, [pc, #276]	; (80040cc <USB_ActivateEndpoint+0x6c4>)
 8003fb8:	400a      	ands	r2, r1
 8003fba:	801a      	strh	r2, [r3, #0]
 8003fbc:	687a      	ldr	r2, [r7, #4]
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	781b      	ldrb	r3, [r3, #0]
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	18d3      	adds	r3, r2, r3
 8003fc6:	183a      	adds	r2, r7, r0
 8003fc8:	8812      	ldrh	r2, [r2, #0]
 8003fca:	4945      	ldr	r1, [pc, #276]	; (80040e0 <USB_ActivateEndpoint+0x6d8>)
 8003fcc:	430a      	orrs	r2, r1
 8003fce:	b292      	uxth	r2, r2
 8003fd0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003fd2:	687a      	ldr	r2, [r7, #4]
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	781b      	ldrb	r3, [r3, #0]
 8003fd8:	009b      	lsls	r3, r3, #2
 8003fda:	18d2      	adds	r2, r2, r3
 8003fdc:	214a      	movs	r1, #74	; 0x4a
 8003fde:	187b      	adds	r3, r7, r1
 8003fe0:	8812      	ldrh	r2, [r2, #0]
 8003fe2:	801a      	strh	r2, [r3, #0]
 8003fe4:	187b      	adds	r3, r7, r1
 8003fe6:	881b      	ldrh	r3, [r3, #0]
 8003fe8:	2240      	movs	r2, #64	; 0x40
 8003fea:	4013      	ands	r3, r2
 8003fec:	d016      	beq.n	800401c <USB_ActivateEndpoint+0x614>
 8003fee:	687a      	ldr	r2, [r7, #4]
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	781b      	ldrb	r3, [r3, #0]
 8003ff4:	009b      	lsls	r3, r3, #2
 8003ff6:	18d3      	adds	r3, r2, r3
 8003ff8:	881b      	ldrh	r3, [r3, #0]
 8003ffa:	b29a      	uxth	r2, r3
 8003ffc:	2048      	movs	r0, #72	; 0x48
 8003ffe:	183b      	adds	r3, r7, r0
 8004000:	4932      	ldr	r1, [pc, #200]	; (80040cc <USB_ActivateEndpoint+0x6c4>)
 8004002:	400a      	ands	r2, r1
 8004004:	801a      	strh	r2, [r3, #0]
 8004006:	687a      	ldr	r2, [r7, #4]
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	781b      	ldrb	r3, [r3, #0]
 800400c:	009b      	lsls	r3, r3, #2
 800400e:	18d3      	adds	r3, r2, r3
 8004010:	183a      	adds	r2, r7, r0
 8004012:	8812      	ldrh	r2, [r2, #0]
 8004014:	4933      	ldr	r1, [pc, #204]	; (80040e4 <USB_ActivateEndpoint+0x6dc>)
 8004016:	430a      	orrs	r2, r1
 8004018:	b292      	uxth	r2, r2
 800401a:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	78db      	ldrb	r3, [r3, #3]
 8004020:	2b01      	cmp	r3, #1
 8004022:	d01d      	beq.n	8004060 <USB_ActivateEndpoint+0x658>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004024:	687a      	ldr	r2, [r7, #4]
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	781b      	ldrb	r3, [r3, #0]
 800402a:	009b      	lsls	r3, r3, #2
 800402c:	18d3      	adds	r3, r2, r3
 800402e:	881b      	ldrh	r3, [r3, #0]
 8004030:	b29a      	uxth	r2, r3
 8004032:	2044      	movs	r0, #68	; 0x44
 8004034:	183b      	adds	r3, r7, r0
 8004036:	492d      	ldr	r1, [pc, #180]	; (80040ec <USB_ActivateEndpoint+0x6e4>)
 8004038:	400a      	ands	r2, r1
 800403a:	801a      	strh	r2, [r3, #0]
 800403c:	183b      	adds	r3, r7, r0
 800403e:	183a      	adds	r2, r7, r0
 8004040:	8812      	ldrh	r2, [r2, #0]
 8004042:	2120      	movs	r1, #32
 8004044:	404a      	eors	r2, r1
 8004046:	801a      	strh	r2, [r3, #0]
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	781b      	ldrb	r3, [r3, #0]
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	18d3      	adds	r3, r2, r3
 8004052:	183a      	adds	r2, r7, r0
 8004054:	8812      	ldrh	r2, [r2, #0]
 8004056:	4920      	ldr	r1, [pc, #128]	; (80040d8 <USB_ActivateEndpoint+0x6d0>)
 8004058:	430a      	orrs	r2, r1
 800405a:	b292      	uxth	r2, r2
 800405c:	801a      	strh	r2, [r3, #0]
 800405e:	e016      	b.n	800408e <USB_ActivateEndpoint+0x686>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	781b      	ldrb	r3, [r3, #0]
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	18d3      	adds	r3, r2, r3
 800406a:	881b      	ldrh	r3, [r3, #0]
 800406c:	b29a      	uxth	r2, r3
 800406e:	2046      	movs	r0, #70	; 0x46
 8004070:	183b      	adds	r3, r7, r0
 8004072:	491e      	ldr	r1, [pc, #120]	; (80040ec <USB_ActivateEndpoint+0x6e4>)
 8004074:	400a      	ands	r2, r1
 8004076:	801a      	strh	r2, [r3, #0]
 8004078:	687a      	ldr	r2, [r7, #4]
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	781b      	ldrb	r3, [r3, #0]
 800407e:	009b      	lsls	r3, r3, #2
 8004080:	18d3      	adds	r3, r2, r3
 8004082:	183a      	adds	r2, r7, r0
 8004084:	8812      	ldrh	r2, [r2, #0]
 8004086:	4914      	ldr	r1, [pc, #80]	; (80040d8 <USB_ActivateEndpoint+0x6d0>)
 8004088:	430a      	orrs	r2, r1
 800408a:	b292      	uxth	r2, r2
 800408c:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	781b      	ldrb	r3, [r3, #0]
 8004094:	009b      	lsls	r3, r3, #2
 8004096:	18d3      	adds	r3, r2, r3
 8004098:	881b      	ldrh	r3, [r3, #0]
 800409a:	b29a      	uxth	r2, r3
 800409c:	2042      	movs	r0, #66	; 0x42
 800409e:	183b      	adds	r3, r7, r0
 80040a0:	4911      	ldr	r1, [pc, #68]	; (80040e8 <USB_ActivateEndpoint+0x6e0>)
 80040a2:	400a      	ands	r2, r1
 80040a4:	801a      	strh	r2, [r3, #0]
 80040a6:	687a      	ldr	r2, [r7, #4]
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	781b      	ldrb	r3, [r3, #0]
 80040ac:	009b      	lsls	r3, r3, #2
 80040ae:	18d3      	adds	r3, r2, r3
 80040b0:	183a      	adds	r2, r7, r0
 80040b2:	8812      	ldrh	r2, [r2, #0]
 80040b4:	4908      	ldr	r1, [pc, #32]	; (80040d8 <USB_ActivateEndpoint+0x6d0>)
 80040b6:	430a      	orrs	r2, r1
 80040b8:	b292      	uxth	r2, r2
 80040ba:	801a      	strh	r2, [r3, #0]
    }
  }

  return ret;
 80040bc:	236f      	movs	r3, #111	; 0x6f
 80040be:	18fb      	adds	r3, r7, r3
 80040c0:	781b      	ldrb	r3, [r3, #0]
}
 80040c2:	0018      	movs	r0, r3
 80040c4:	46bd      	mov	sp, r7
 80040c6:	b01c      	add	sp, #112	; 0x70
 80040c8:	bd80      	pop	{r7, pc}
 80040ca:	46c0      	nop			; (mov r8, r8)
 80040cc:	ffff8f8f 	.word	0xffff8f8f
 80040d0:	ffff8180 	.word	0xffff8180
 80040d4:	ffff8e8f 	.word	0xffff8e8f
 80040d8:	ffff8080 	.word	0xffff8080
 80040dc:	00000404 	.word	0x00000404
 80040e0:	ffffc080 	.word	0xffffc080
 80040e4:	ffff80c0 	.word	0xffff80c0
 80040e8:	ffffbf8f 	.word	0xffffbf8f
 80040ec:	ffff8fbf 	.word	0xffff8fbf

080040f0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b08c      	sub	sp, #48	; 0x30
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
 80040f8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	7b1b      	ldrb	r3, [r3, #12]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d000      	beq.n	8004104 <USB_DeactivateEndpoint+0x14>
 8004102:	e07e      	b.n	8004202 <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	785b      	ldrb	r3, [r3, #1]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d03c      	beq.n	8004186 <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800410c:	687a      	ldr	r2, [r7, #4]
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	781b      	ldrb	r3, [r3, #0]
 8004112:	009b      	lsls	r3, r3, #2
 8004114:	18d2      	adds	r2, r2, r3
 8004116:	210c      	movs	r1, #12
 8004118:	187b      	adds	r3, r7, r1
 800411a:	8812      	ldrh	r2, [r2, #0]
 800411c:	801a      	strh	r2, [r3, #0]
 800411e:	187b      	adds	r3, r7, r1
 8004120:	881b      	ldrh	r3, [r3, #0]
 8004122:	2240      	movs	r2, #64	; 0x40
 8004124:	4013      	ands	r3, r2
 8004126:	d016      	beq.n	8004156 <USB_DeactivateEndpoint+0x66>
 8004128:	687a      	ldr	r2, [r7, #4]
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	781b      	ldrb	r3, [r3, #0]
 800412e:	009b      	lsls	r3, r3, #2
 8004130:	18d3      	adds	r3, r2, r3
 8004132:	881b      	ldrh	r3, [r3, #0]
 8004134:	b29a      	uxth	r2, r3
 8004136:	200a      	movs	r0, #10
 8004138:	183b      	adds	r3, r7, r0
 800413a:	49c7      	ldr	r1, [pc, #796]	; (8004458 <USB_DeactivateEndpoint+0x368>)
 800413c:	400a      	ands	r2, r1
 800413e:	801a      	strh	r2, [r3, #0]
 8004140:	687a      	ldr	r2, [r7, #4]
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	781b      	ldrb	r3, [r3, #0]
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	18d3      	adds	r3, r2, r3
 800414a:	183a      	adds	r2, r7, r0
 800414c:	8812      	ldrh	r2, [r2, #0]
 800414e:	49c3      	ldr	r1, [pc, #780]	; (800445c <USB_DeactivateEndpoint+0x36c>)
 8004150:	430a      	orrs	r2, r1
 8004152:	b292      	uxth	r2, r2
 8004154:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	781b      	ldrb	r3, [r3, #0]
 800415c:	009b      	lsls	r3, r3, #2
 800415e:	18d3      	adds	r3, r2, r3
 8004160:	881b      	ldrh	r3, [r3, #0]
 8004162:	b29a      	uxth	r2, r3
 8004164:	2008      	movs	r0, #8
 8004166:	183b      	adds	r3, r7, r0
 8004168:	49bd      	ldr	r1, [pc, #756]	; (8004460 <USB_DeactivateEndpoint+0x370>)
 800416a:	400a      	ands	r2, r1
 800416c:	801a      	strh	r2, [r3, #0]
 800416e:	687a      	ldr	r2, [r7, #4]
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	781b      	ldrb	r3, [r3, #0]
 8004174:	009b      	lsls	r3, r3, #2
 8004176:	18d3      	adds	r3, r2, r3
 8004178:	183a      	adds	r2, r7, r0
 800417a:	8812      	ldrh	r2, [r2, #0]
 800417c:	49b9      	ldr	r1, [pc, #740]	; (8004464 <USB_DeactivateEndpoint+0x374>)
 800417e:	430a      	orrs	r2, r1
 8004180:	b292      	uxth	r2, r2
 8004182:	801a      	strh	r2, [r3, #0]
 8004184:	e163      	b.n	800444e <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004186:	687a      	ldr	r2, [r7, #4]
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	781b      	ldrb	r3, [r3, #0]
 800418c:	009b      	lsls	r3, r3, #2
 800418e:	18d2      	adds	r2, r2, r3
 8004190:	2112      	movs	r1, #18
 8004192:	187b      	adds	r3, r7, r1
 8004194:	8812      	ldrh	r2, [r2, #0]
 8004196:	801a      	strh	r2, [r3, #0]
 8004198:	187b      	adds	r3, r7, r1
 800419a:	881a      	ldrh	r2, [r3, #0]
 800419c:	2380      	movs	r3, #128	; 0x80
 800419e:	01db      	lsls	r3, r3, #7
 80041a0:	4013      	ands	r3, r2
 80041a2:	d016      	beq.n	80041d2 <USB_DeactivateEndpoint+0xe2>
 80041a4:	687a      	ldr	r2, [r7, #4]
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	781b      	ldrb	r3, [r3, #0]
 80041aa:	009b      	lsls	r3, r3, #2
 80041ac:	18d3      	adds	r3, r2, r3
 80041ae:	881b      	ldrh	r3, [r3, #0]
 80041b0:	b29a      	uxth	r2, r3
 80041b2:	2010      	movs	r0, #16
 80041b4:	183b      	adds	r3, r7, r0
 80041b6:	49a8      	ldr	r1, [pc, #672]	; (8004458 <USB_DeactivateEndpoint+0x368>)
 80041b8:	400a      	ands	r2, r1
 80041ba:	801a      	strh	r2, [r3, #0]
 80041bc:	687a      	ldr	r2, [r7, #4]
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	781b      	ldrb	r3, [r3, #0]
 80041c2:	009b      	lsls	r3, r3, #2
 80041c4:	18d3      	adds	r3, r2, r3
 80041c6:	183a      	adds	r2, r7, r0
 80041c8:	8812      	ldrh	r2, [r2, #0]
 80041ca:	49a7      	ldr	r1, [pc, #668]	; (8004468 <USB_DeactivateEndpoint+0x378>)
 80041cc:	430a      	orrs	r2, r1
 80041ce:	b292      	uxth	r2, r2
 80041d0:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	781b      	ldrb	r3, [r3, #0]
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	18d3      	adds	r3, r2, r3
 80041dc:	881b      	ldrh	r3, [r3, #0]
 80041de:	b29a      	uxth	r2, r3
 80041e0:	200e      	movs	r0, #14
 80041e2:	183b      	adds	r3, r7, r0
 80041e4:	49a1      	ldr	r1, [pc, #644]	; (800446c <USB_DeactivateEndpoint+0x37c>)
 80041e6:	400a      	ands	r2, r1
 80041e8:	801a      	strh	r2, [r3, #0]
 80041ea:	687a      	ldr	r2, [r7, #4]
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	781b      	ldrb	r3, [r3, #0]
 80041f0:	009b      	lsls	r3, r3, #2
 80041f2:	18d3      	adds	r3, r2, r3
 80041f4:	183a      	adds	r2, r7, r0
 80041f6:	8812      	ldrh	r2, [r2, #0]
 80041f8:	499a      	ldr	r1, [pc, #616]	; (8004464 <USB_DeactivateEndpoint+0x374>)
 80041fa:	430a      	orrs	r2, r1
 80041fc:	b292      	uxth	r2, r2
 80041fe:	801a      	strh	r2, [r3, #0]
 8004200:	e125      	b.n	800444e <USB_DeactivateEndpoint+0x35e>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	785b      	ldrb	r3, [r3, #1]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d000      	beq.n	800420c <USB_DeactivateEndpoint+0x11c>
 800420a:	e090      	b.n	800432e <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800420c:	687a      	ldr	r2, [r7, #4]
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	781b      	ldrb	r3, [r3, #0]
 8004212:	009b      	lsls	r3, r3, #2
 8004214:	18d2      	adds	r2, r2, r3
 8004216:	2120      	movs	r1, #32
 8004218:	187b      	adds	r3, r7, r1
 800421a:	8812      	ldrh	r2, [r2, #0]
 800421c:	801a      	strh	r2, [r3, #0]
 800421e:	187b      	adds	r3, r7, r1
 8004220:	881a      	ldrh	r2, [r3, #0]
 8004222:	2380      	movs	r3, #128	; 0x80
 8004224:	01db      	lsls	r3, r3, #7
 8004226:	4013      	ands	r3, r2
 8004228:	d016      	beq.n	8004258 <USB_DeactivateEndpoint+0x168>
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	781b      	ldrb	r3, [r3, #0]
 8004230:	009b      	lsls	r3, r3, #2
 8004232:	18d3      	adds	r3, r2, r3
 8004234:	881b      	ldrh	r3, [r3, #0]
 8004236:	b29a      	uxth	r2, r3
 8004238:	201e      	movs	r0, #30
 800423a:	183b      	adds	r3, r7, r0
 800423c:	4986      	ldr	r1, [pc, #536]	; (8004458 <USB_DeactivateEndpoint+0x368>)
 800423e:	400a      	ands	r2, r1
 8004240:	801a      	strh	r2, [r3, #0]
 8004242:	687a      	ldr	r2, [r7, #4]
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	781b      	ldrb	r3, [r3, #0]
 8004248:	009b      	lsls	r3, r3, #2
 800424a:	18d3      	adds	r3, r2, r3
 800424c:	183a      	adds	r2, r7, r0
 800424e:	8812      	ldrh	r2, [r2, #0]
 8004250:	4985      	ldr	r1, [pc, #532]	; (8004468 <USB_DeactivateEndpoint+0x378>)
 8004252:	430a      	orrs	r2, r1
 8004254:	b292      	uxth	r2, r2
 8004256:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004258:	687a      	ldr	r2, [r7, #4]
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	781b      	ldrb	r3, [r3, #0]
 800425e:	009b      	lsls	r3, r3, #2
 8004260:	18d2      	adds	r2, r2, r3
 8004262:	211c      	movs	r1, #28
 8004264:	187b      	adds	r3, r7, r1
 8004266:	8812      	ldrh	r2, [r2, #0]
 8004268:	801a      	strh	r2, [r3, #0]
 800426a:	187b      	adds	r3, r7, r1
 800426c:	881b      	ldrh	r3, [r3, #0]
 800426e:	2240      	movs	r2, #64	; 0x40
 8004270:	4013      	ands	r3, r2
 8004272:	d016      	beq.n	80042a2 <USB_DeactivateEndpoint+0x1b2>
 8004274:	687a      	ldr	r2, [r7, #4]
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	781b      	ldrb	r3, [r3, #0]
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	18d3      	adds	r3, r2, r3
 800427e:	881b      	ldrh	r3, [r3, #0]
 8004280:	b29a      	uxth	r2, r3
 8004282:	201a      	movs	r0, #26
 8004284:	183b      	adds	r3, r7, r0
 8004286:	4974      	ldr	r1, [pc, #464]	; (8004458 <USB_DeactivateEndpoint+0x368>)
 8004288:	400a      	ands	r2, r1
 800428a:	801a      	strh	r2, [r3, #0]
 800428c:	687a      	ldr	r2, [r7, #4]
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	781b      	ldrb	r3, [r3, #0]
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	18d3      	adds	r3, r2, r3
 8004296:	183a      	adds	r2, r7, r0
 8004298:	8812      	ldrh	r2, [r2, #0]
 800429a:	4970      	ldr	r1, [pc, #448]	; (800445c <USB_DeactivateEndpoint+0x36c>)
 800429c:	430a      	orrs	r2, r1
 800429e:	b292      	uxth	r2, r2
 80042a0:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	781b      	ldrb	r3, [r3, #0]
 80042a8:	009b      	lsls	r3, r3, #2
 80042aa:	18d3      	adds	r3, r2, r3
 80042ac:	881b      	ldrh	r3, [r3, #0]
 80042ae:	b29a      	uxth	r2, r3
 80042b0:	2018      	movs	r0, #24
 80042b2:	183b      	adds	r3, r7, r0
 80042b4:	4968      	ldr	r1, [pc, #416]	; (8004458 <USB_DeactivateEndpoint+0x368>)
 80042b6:	400a      	ands	r2, r1
 80042b8:	801a      	strh	r2, [r3, #0]
 80042ba:	687a      	ldr	r2, [r7, #4]
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	781b      	ldrb	r3, [r3, #0]
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	18d3      	adds	r3, r2, r3
 80042c4:	183a      	adds	r2, r7, r0
 80042c6:	8812      	ldrh	r2, [r2, #0]
 80042c8:	4964      	ldr	r1, [pc, #400]	; (800445c <USB_DeactivateEndpoint+0x36c>)
 80042ca:	430a      	orrs	r2, r1
 80042cc:	b292      	uxth	r2, r2
 80042ce:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80042d0:	687a      	ldr	r2, [r7, #4]
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	781b      	ldrb	r3, [r3, #0]
 80042d6:	009b      	lsls	r3, r3, #2
 80042d8:	18d3      	adds	r3, r2, r3
 80042da:	881b      	ldrh	r3, [r3, #0]
 80042dc:	b29a      	uxth	r2, r3
 80042de:	2016      	movs	r0, #22
 80042e0:	183b      	adds	r3, r7, r0
 80042e2:	4962      	ldr	r1, [pc, #392]	; (800446c <USB_DeactivateEndpoint+0x37c>)
 80042e4:	400a      	ands	r2, r1
 80042e6:	801a      	strh	r2, [r3, #0]
 80042e8:	687a      	ldr	r2, [r7, #4]
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	781b      	ldrb	r3, [r3, #0]
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	18d3      	adds	r3, r2, r3
 80042f2:	183a      	adds	r2, r7, r0
 80042f4:	8812      	ldrh	r2, [r2, #0]
 80042f6:	495b      	ldr	r1, [pc, #364]	; (8004464 <USB_DeactivateEndpoint+0x374>)
 80042f8:	430a      	orrs	r2, r1
 80042fa:	b292      	uxth	r2, r2
 80042fc:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80042fe:	687a      	ldr	r2, [r7, #4]
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	781b      	ldrb	r3, [r3, #0]
 8004304:	009b      	lsls	r3, r3, #2
 8004306:	18d3      	adds	r3, r2, r3
 8004308:	881b      	ldrh	r3, [r3, #0]
 800430a:	b29a      	uxth	r2, r3
 800430c:	2014      	movs	r0, #20
 800430e:	183b      	adds	r3, r7, r0
 8004310:	4953      	ldr	r1, [pc, #332]	; (8004460 <USB_DeactivateEndpoint+0x370>)
 8004312:	400a      	ands	r2, r1
 8004314:	801a      	strh	r2, [r3, #0]
 8004316:	687a      	ldr	r2, [r7, #4]
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	781b      	ldrb	r3, [r3, #0]
 800431c:	009b      	lsls	r3, r3, #2
 800431e:	18d3      	adds	r3, r2, r3
 8004320:	183a      	adds	r2, r7, r0
 8004322:	8812      	ldrh	r2, [r2, #0]
 8004324:	494f      	ldr	r1, [pc, #316]	; (8004464 <USB_DeactivateEndpoint+0x374>)
 8004326:	430a      	orrs	r2, r1
 8004328:	b292      	uxth	r2, r2
 800432a:	801a      	strh	r2, [r3, #0]
 800432c:	e08f      	b.n	800444e <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800432e:	687a      	ldr	r2, [r7, #4]
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	781b      	ldrb	r3, [r3, #0]
 8004334:	009b      	lsls	r3, r3, #2
 8004336:	18d2      	adds	r2, r2, r3
 8004338:	212e      	movs	r1, #46	; 0x2e
 800433a:	187b      	adds	r3, r7, r1
 800433c:	8812      	ldrh	r2, [r2, #0]
 800433e:	801a      	strh	r2, [r3, #0]
 8004340:	187b      	adds	r3, r7, r1
 8004342:	881a      	ldrh	r2, [r3, #0]
 8004344:	2380      	movs	r3, #128	; 0x80
 8004346:	01db      	lsls	r3, r3, #7
 8004348:	4013      	ands	r3, r2
 800434a:	d016      	beq.n	800437a <USB_DeactivateEndpoint+0x28a>
 800434c:	687a      	ldr	r2, [r7, #4]
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	781b      	ldrb	r3, [r3, #0]
 8004352:	009b      	lsls	r3, r3, #2
 8004354:	18d3      	adds	r3, r2, r3
 8004356:	881b      	ldrh	r3, [r3, #0]
 8004358:	b29a      	uxth	r2, r3
 800435a:	202c      	movs	r0, #44	; 0x2c
 800435c:	183b      	adds	r3, r7, r0
 800435e:	493e      	ldr	r1, [pc, #248]	; (8004458 <USB_DeactivateEndpoint+0x368>)
 8004360:	400a      	ands	r2, r1
 8004362:	801a      	strh	r2, [r3, #0]
 8004364:	687a      	ldr	r2, [r7, #4]
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	781b      	ldrb	r3, [r3, #0]
 800436a:	009b      	lsls	r3, r3, #2
 800436c:	18d3      	adds	r3, r2, r3
 800436e:	183a      	adds	r2, r7, r0
 8004370:	8812      	ldrh	r2, [r2, #0]
 8004372:	493d      	ldr	r1, [pc, #244]	; (8004468 <USB_DeactivateEndpoint+0x378>)
 8004374:	430a      	orrs	r2, r1
 8004376:	b292      	uxth	r2, r2
 8004378:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800437a:	687a      	ldr	r2, [r7, #4]
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	781b      	ldrb	r3, [r3, #0]
 8004380:	009b      	lsls	r3, r3, #2
 8004382:	18d2      	adds	r2, r2, r3
 8004384:	212a      	movs	r1, #42	; 0x2a
 8004386:	187b      	adds	r3, r7, r1
 8004388:	8812      	ldrh	r2, [r2, #0]
 800438a:	801a      	strh	r2, [r3, #0]
 800438c:	187b      	adds	r3, r7, r1
 800438e:	881b      	ldrh	r3, [r3, #0]
 8004390:	2240      	movs	r2, #64	; 0x40
 8004392:	4013      	ands	r3, r2
 8004394:	d016      	beq.n	80043c4 <USB_DeactivateEndpoint+0x2d4>
 8004396:	687a      	ldr	r2, [r7, #4]
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	781b      	ldrb	r3, [r3, #0]
 800439c:	009b      	lsls	r3, r3, #2
 800439e:	18d3      	adds	r3, r2, r3
 80043a0:	881b      	ldrh	r3, [r3, #0]
 80043a2:	b29a      	uxth	r2, r3
 80043a4:	2028      	movs	r0, #40	; 0x28
 80043a6:	183b      	adds	r3, r7, r0
 80043a8:	492b      	ldr	r1, [pc, #172]	; (8004458 <USB_DeactivateEndpoint+0x368>)
 80043aa:	400a      	ands	r2, r1
 80043ac:	801a      	strh	r2, [r3, #0]
 80043ae:	687a      	ldr	r2, [r7, #4]
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	781b      	ldrb	r3, [r3, #0]
 80043b4:	009b      	lsls	r3, r3, #2
 80043b6:	18d3      	adds	r3, r2, r3
 80043b8:	183a      	adds	r2, r7, r0
 80043ba:	8812      	ldrh	r2, [r2, #0]
 80043bc:	4927      	ldr	r1, [pc, #156]	; (800445c <USB_DeactivateEndpoint+0x36c>)
 80043be:	430a      	orrs	r2, r1
 80043c0:	b292      	uxth	r2, r2
 80043c2:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80043c4:	687a      	ldr	r2, [r7, #4]
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	781b      	ldrb	r3, [r3, #0]
 80043ca:	009b      	lsls	r3, r3, #2
 80043cc:	18d3      	adds	r3, r2, r3
 80043ce:	881b      	ldrh	r3, [r3, #0]
 80043d0:	b29a      	uxth	r2, r3
 80043d2:	2026      	movs	r0, #38	; 0x26
 80043d4:	183b      	adds	r3, r7, r0
 80043d6:	4920      	ldr	r1, [pc, #128]	; (8004458 <USB_DeactivateEndpoint+0x368>)
 80043d8:	400a      	ands	r2, r1
 80043da:	801a      	strh	r2, [r3, #0]
 80043dc:	687a      	ldr	r2, [r7, #4]
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	781b      	ldrb	r3, [r3, #0]
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	18d3      	adds	r3, r2, r3
 80043e6:	183a      	adds	r2, r7, r0
 80043e8:	8812      	ldrh	r2, [r2, #0]
 80043ea:	491f      	ldr	r1, [pc, #124]	; (8004468 <USB_DeactivateEndpoint+0x378>)
 80043ec:	430a      	orrs	r2, r1
 80043ee:	b292      	uxth	r2, r2
 80043f0:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80043f2:	687a      	ldr	r2, [r7, #4]
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	781b      	ldrb	r3, [r3, #0]
 80043f8:	009b      	lsls	r3, r3, #2
 80043fa:	18d3      	adds	r3, r2, r3
 80043fc:	881b      	ldrh	r3, [r3, #0]
 80043fe:	b29a      	uxth	r2, r3
 8004400:	2024      	movs	r0, #36	; 0x24
 8004402:	183b      	adds	r3, r7, r0
 8004404:	4916      	ldr	r1, [pc, #88]	; (8004460 <USB_DeactivateEndpoint+0x370>)
 8004406:	400a      	ands	r2, r1
 8004408:	801a      	strh	r2, [r3, #0]
 800440a:	687a      	ldr	r2, [r7, #4]
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	781b      	ldrb	r3, [r3, #0]
 8004410:	009b      	lsls	r3, r3, #2
 8004412:	18d3      	adds	r3, r2, r3
 8004414:	183a      	adds	r2, r7, r0
 8004416:	8812      	ldrh	r2, [r2, #0]
 8004418:	4912      	ldr	r1, [pc, #72]	; (8004464 <USB_DeactivateEndpoint+0x374>)
 800441a:	430a      	orrs	r2, r1
 800441c:	b292      	uxth	r2, r2
 800441e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004420:	687a      	ldr	r2, [r7, #4]
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	781b      	ldrb	r3, [r3, #0]
 8004426:	009b      	lsls	r3, r3, #2
 8004428:	18d3      	adds	r3, r2, r3
 800442a:	881b      	ldrh	r3, [r3, #0]
 800442c:	b29a      	uxth	r2, r3
 800442e:	2022      	movs	r0, #34	; 0x22
 8004430:	183b      	adds	r3, r7, r0
 8004432:	490e      	ldr	r1, [pc, #56]	; (800446c <USB_DeactivateEndpoint+0x37c>)
 8004434:	400a      	ands	r2, r1
 8004436:	801a      	strh	r2, [r3, #0]
 8004438:	687a      	ldr	r2, [r7, #4]
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	781b      	ldrb	r3, [r3, #0]
 800443e:	009b      	lsls	r3, r3, #2
 8004440:	18d3      	adds	r3, r2, r3
 8004442:	183a      	adds	r2, r7, r0
 8004444:	8812      	ldrh	r2, [r2, #0]
 8004446:	4907      	ldr	r1, [pc, #28]	; (8004464 <USB_DeactivateEndpoint+0x374>)
 8004448:	430a      	orrs	r2, r1
 800444a:	b292      	uxth	r2, r2
 800444c:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 800444e:	2300      	movs	r3, #0
}
 8004450:	0018      	movs	r0, r3
 8004452:	46bd      	mov	sp, r7
 8004454:	b00c      	add	sp, #48	; 0x30
 8004456:	bd80      	pop	{r7, pc}
 8004458:	ffff8f8f 	.word	0xffff8f8f
 800445c:	ffff80c0 	.word	0xffff80c0
 8004460:	ffff8fbf 	.word	0xffff8fbf
 8004464:	ffff8080 	.word	0xffff8080
 8004468:	ffffc080 	.word	0xffffc080
 800446c:	ffffbf8f 	.word	0xffffbf8f

08004470 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004470:	b590      	push	{r4, r7, lr}
 8004472:	b0c3      	sub	sp, #268	; 0x10c
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
 8004478:	6039      	str	r1, [r7, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	785b      	ldrb	r3, [r3, #1]
 800447e:	2b01      	cmp	r3, #1
 8004480:	d001      	beq.n	8004486 <USB_EPStartXfer+0x16>
 8004482:	f000 fcef 	bl	8004e64 <USB_EPStartXfer+0x9f4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	699a      	ldr	r2, [r3, #24]
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	691b      	ldr	r3, [r3, #16]
 800448e:	429a      	cmp	r2, r3
 8004490:	d905      	bls.n	800449e <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	691b      	ldr	r3, [r3, #16]
 8004496:	1d7a      	adds	r2, r7, #5
 8004498:	32ff      	adds	r2, #255	; 0xff
 800449a:	6013      	str	r3, [r2, #0]
 800449c:	e004      	b.n	80044a8 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	699b      	ldr	r3, [r3, #24]
 80044a2:	1d7a      	adds	r2, r7, #5
 80044a4:	32ff      	adds	r2, #255	; 0xff
 80044a6:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	7b1b      	ldrb	r3, [r3, #12]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d125      	bne.n	80044fc <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	6959      	ldr	r1, [r3, #20]
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	88da      	ldrh	r2, [r3, #6]
 80044b8:	1d7b      	adds	r3, r7, #5
 80044ba:	33ff      	adds	r3, #255	; 0xff
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	b29b      	uxth	r3, r3
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	f001 f9c9 	bl	8005858 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	613b      	str	r3, [r7, #16]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2250      	movs	r2, #80	; 0x50
 80044ce:	5a9b      	ldrh	r3, [r3, r2]
 80044d0:	b29b      	uxth	r3, r3
 80044d2:	001a      	movs	r2, r3
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	189b      	adds	r3, r3, r2
 80044d8:	613b      	str	r3, [r7, #16]
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	781b      	ldrb	r3, [r3, #0]
 80044de:	00da      	lsls	r2, r3, #3
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	18d3      	adds	r3, r2, r3
 80044e4:	4acc      	ldr	r2, [pc, #816]	; (8004818 <USB_EPStartXfer+0x3a8>)
 80044e6:	4694      	mov	ip, r2
 80044e8:	4463      	add	r3, ip
 80044ea:	60fb      	str	r3, [r7, #12]
 80044ec:	1d7b      	adds	r3, r7, #5
 80044ee:	33ff      	adds	r3, #255	; 0xff
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	b29a      	uxth	r2, r3
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	801a      	strh	r2, [r3, #0]
 80044f8:	f000 fc8f 	bl	8004e1a <USB_EPStartXfer+0x9aa>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	78db      	ldrb	r3, [r3, #3]
 8004500:	2b02      	cmp	r3, #2
 8004502:	d000      	beq.n	8004506 <USB_EPStartXfer+0x96>
 8004504:	e33a      	b.n	8004b7c <USB_EPStartXfer+0x70c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	6a1a      	ldr	r2, [r3, #32]
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	691b      	ldr	r3, [r3, #16]
 800450e:	429a      	cmp	r2, r3
 8004510:	d800      	bhi.n	8004514 <USB_EPStartXfer+0xa4>
 8004512:	e2df      	b.n	8004ad4 <USB_EPStartXfer+0x664>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004514:	687a      	ldr	r2, [r7, #4]
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	781b      	ldrb	r3, [r3, #0]
 800451a:	009b      	lsls	r3, r3, #2
 800451c:	18d3      	adds	r3, r2, r3
 800451e:	881b      	ldrh	r3, [r3, #0]
 8004520:	b29a      	uxth	r2, r3
 8004522:	2056      	movs	r0, #86	; 0x56
 8004524:	183b      	adds	r3, r7, r0
 8004526:	49bd      	ldr	r1, [pc, #756]	; (800481c <USB_EPStartXfer+0x3ac>)
 8004528:	400a      	ands	r2, r1
 800452a:	801a      	strh	r2, [r3, #0]
 800452c:	687a      	ldr	r2, [r7, #4]
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	781b      	ldrb	r3, [r3, #0]
 8004532:	009b      	lsls	r3, r3, #2
 8004534:	18d3      	adds	r3, r2, r3
 8004536:	183a      	adds	r2, r7, r0
 8004538:	8812      	ldrh	r2, [r2, #0]
 800453a:	49b9      	ldr	r1, [pc, #740]	; (8004820 <USB_EPStartXfer+0x3b0>)
 800453c:	430a      	orrs	r2, r1
 800453e:	b292      	uxth	r2, r2
 8004540:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	6a1a      	ldr	r2, [r3, #32]
 8004546:	1d7b      	adds	r3, r7, #5
 8004548:	33ff      	adds	r3, #255	; 0xff
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	1ad2      	subs	r2, r2, r3
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004552:	687a      	ldr	r2, [r7, #4]
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	781b      	ldrb	r3, [r3, #0]
 8004558:	009b      	lsls	r3, r3, #2
 800455a:	18d3      	adds	r3, r2, r3
 800455c:	881b      	ldrh	r3, [r3, #0]
 800455e:	b29b      	uxth	r3, r3
 8004560:	001a      	movs	r2, r3
 8004562:	2340      	movs	r3, #64	; 0x40
 8004564:	4013      	ands	r3, r2
 8004566:	d100      	bne.n	800456a <USB_EPStartXfer+0xfa>
 8004568:	e162      	b.n	8004830 <USB_EPStartXfer+0x3c0>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	633b      	str	r3, [r7, #48]	; 0x30
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	785b      	ldrb	r3, [r3, #1]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d16a      	bne.n	800464c <USB_EPStartXfer+0x1dc>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	62bb      	str	r3, [r7, #40]	; 0x28
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2250      	movs	r2, #80	; 0x50
 800457e:	5a9b      	ldrh	r3, [r3, r2]
 8004580:	b29b      	uxth	r3, r3
 8004582:	001a      	movs	r2, r3
 8004584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004586:	189b      	adds	r3, r3, r2
 8004588:	62bb      	str	r3, [r7, #40]	; 0x28
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	781b      	ldrb	r3, [r3, #0]
 800458e:	00da      	lsls	r2, r3, #3
 8004590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004592:	18d3      	adds	r3, r2, r3
 8004594:	4aa3      	ldr	r2, [pc, #652]	; (8004824 <USB_EPStartXfer+0x3b4>)
 8004596:	4694      	mov	ip, r2
 8004598:	4463      	add	r3, ip
 800459a:	627b      	str	r3, [r7, #36]	; 0x24
 800459c:	1d7b      	adds	r3, r7, #5
 800459e:	33ff      	adds	r3, #255	; 0xff
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d110      	bne.n	80045c8 <USB_EPStartXfer+0x158>
 80045a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a8:	881b      	ldrh	r3, [r3, #0]
 80045aa:	b29b      	uxth	r3, r3
 80045ac:	4a9e      	ldr	r2, [pc, #632]	; (8004828 <USB_EPStartXfer+0x3b8>)
 80045ae:	4013      	ands	r3, r2
 80045b0:	b29a      	uxth	r2, r3
 80045b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b4:	801a      	strh	r2, [r3, #0]
 80045b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b8:	881b      	ldrh	r3, [r3, #0]
 80045ba:	b29b      	uxth	r3, r3
 80045bc:	4a9b      	ldr	r2, [pc, #620]	; (800482c <USB_EPStartXfer+0x3bc>)
 80045be:	4313      	orrs	r3, r2
 80045c0:	b29a      	uxth	r2, r3
 80045c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c4:	801a      	strh	r2, [r3, #0]
 80045c6:	e05c      	b.n	8004682 <USB_EPStartXfer+0x212>
 80045c8:	1d7b      	adds	r3, r7, #5
 80045ca:	33ff      	adds	r3, #255	; 0xff
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	2b3e      	cmp	r3, #62	; 0x3e
 80045d0:	d81c      	bhi.n	800460c <USB_EPStartXfer+0x19c>
 80045d2:	1d7b      	adds	r3, r7, #5
 80045d4:	33ff      	adds	r3, #255	; 0xff
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	085b      	lsrs	r3, r3, #1
 80045da:	1c7a      	adds	r2, r7, #1
 80045dc:	32ff      	adds	r2, #255	; 0xff
 80045de:	6013      	str	r3, [r2, #0]
 80045e0:	1d7b      	adds	r3, r7, #5
 80045e2:	33ff      	adds	r3, #255	; 0xff
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	2201      	movs	r2, #1
 80045e8:	4013      	ands	r3, r2
 80045ea:	d006      	beq.n	80045fa <USB_EPStartXfer+0x18a>
 80045ec:	1c7b      	adds	r3, r7, #1
 80045ee:	33ff      	adds	r3, #255	; 0xff
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	3301      	adds	r3, #1
 80045f4:	1c7a      	adds	r2, r7, #1
 80045f6:	32ff      	adds	r2, #255	; 0xff
 80045f8:	6013      	str	r3, [r2, #0]
 80045fa:	1c7b      	adds	r3, r7, #1
 80045fc:	33ff      	adds	r3, #255	; 0xff
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	b29b      	uxth	r3, r3
 8004602:	029b      	lsls	r3, r3, #10
 8004604:	b29a      	uxth	r2, r3
 8004606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004608:	801a      	strh	r2, [r3, #0]
 800460a:	e03a      	b.n	8004682 <USB_EPStartXfer+0x212>
 800460c:	1d7b      	adds	r3, r7, #5
 800460e:	33ff      	adds	r3, #255	; 0xff
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	095b      	lsrs	r3, r3, #5
 8004614:	1c7a      	adds	r2, r7, #1
 8004616:	32ff      	adds	r2, #255	; 0xff
 8004618:	6013      	str	r3, [r2, #0]
 800461a:	1d7b      	adds	r3, r7, #5
 800461c:	33ff      	adds	r3, #255	; 0xff
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	221f      	movs	r2, #31
 8004622:	4013      	ands	r3, r2
 8004624:	d106      	bne.n	8004634 <USB_EPStartXfer+0x1c4>
 8004626:	1c7b      	adds	r3, r7, #1
 8004628:	33ff      	adds	r3, #255	; 0xff
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	3b01      	subs	r3, #1
 800462e:	1c7a      	adds	r2, r7, #1
 8004630:	32ff      	adds	r2, #255	; 0xff
 8004632:	6013      	str	r3, [r2, #0]
 8004634:	1c7b      	adds	r3, r7, #1
 8004636:	33ff      	adds	r3, #255	; 0xff
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	b29b      	uxth	r3, r3
 800463c:	029b      	lsls	r3, r3, #10
 800463e:	b29b      	uxth	r3, r3
 8004640:	4a7a      	ldr	r2, [pc, #488]	; (800482c <USB_EPStartXfer+0x3bc>)
 8004642:	4313      	orrs	r3, r2
 8004644:	b29a      	uxth	r2, r3
 8004646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004648:	801a      	strh	r2, [r3, #0]
 800464a:	e01a      	b.n	8004682 <USB_EPStartXfer+0x212>
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	785b      	ldrb	r3, [r3, #1]
 8004650:	2b01      	cmp	r3, #1
 8004652:	d116      	bne.n	8004682 <USB_EPStartXfer+0x212>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2250      	movs	r2, #80	; 0x50
 8004658:	5a9b      	ldrh	r3, [r3, r2]
 800465a:	b29b      	uxth	r3, r3
 800465c:	001a      	movs	r2, r3
 800465e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004660:	189b      	adds	r3, r3, r2
 8004662:	633b      	str	r3, [r7, #48]	; 0x30
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	781b      	ldrb	r3, [r3, #0]
 8004668:	00da      	lsls	r2, r3, #3
 800466a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800466c:	18d3      	adds	r3, r2, r3
 800466e:	4a6d      	ldr	r2, [pc, #436]	; (8004824 <USB_EPStartXfer+0x3b4>)
 8004670:	4694      	mov	ip, r2
 8004672:	4463      	add	r3, ip
 8004674:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004676:	1d7b      	adds	r3, r7, #5
 8004678:	33ff      	adds	r3, #255	; 0xff
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	b29a      	uxth	r2, r3
 800467e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004680:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004682:	2076      	movs	r0, #118	; 0x76
 8004684:	183b      	adds	r3, r7, r0
 8004686:	683a      	ldr	r2, [r7, #0]
 8004688:	8952      	ldrh	r2, [r2, #10]
 800468a:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	6959      	ldr	r1, [r3, #20]
 8004690:	1d7b      	adds	r3, r7, #5
 8004692:	33ff      	adds	r3, #255	; 0xff
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	b29c      	uxth	r4, r3
 8004698:	183b      	adds	r3, r7, r0
 800469a:	881a      	ldrh	r2, [r3, #0]
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	0023      	movs	r3, r4
 80046a0:	f001 f8da 	bl	8005858 <USB_WritePMA>
            ep->xfer_buff += len;
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	695a      	ldr	r2, [r3, #20]
 80046a8:	1d7b      	adds	r3, r7, #5
 80046aa:	33ff      	adds	r3, #255	; 0xff
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	18d2      	adds	r2, r2, r3
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	6a1a      	ldr	r2, [r3, #32]
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	691b      	ldr	r3, [r3, #16]
 80046bc:	429a      	cmp	r2, r3
 80046be:	d908      	bls.n	80046d2 <USB_EPStartXfer+0x262>
            {
              ep->xfer_len_db -= len;
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	6a1a      	ldr	r2, [r3, #32]
 80046c4:	1d7b      	adds	r3, r7, #5
 80046c6:	33ff      	adds	r3, #255	; 0xff
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	1ad2      	subs	r2, r2, r3
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	621a      	str	r2, [r3, #32]
 80046d0:	e007      	b.n	80046e2 <USB_EPStartXfer+0x272>
            }
            else
            {
              len = ep->xfer_len_db;
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	6a1b      	ldr	r3, [r3, #32]
 80046d6:	1d7a      	adds	r2, r7, #5
 80046d8:	32ff      	adds	r2, #255	; 0xff
 80046da:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	2200      	movs	r2, #0
 80046e0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	785b      	ldrb	r3, [r3, #1]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d166      	bne.n	80047b8 <USB_EPStartXfer+0x348>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	61bb      	str	r3, [r7, #24]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2250      	movs	r2, #80	; 0x50
 80046f2:	5a9b      	ldrh	r3, [r3, r2]
 80046f4:	b29b      	uxth	r3, r3
 80046f6:	001a      	movs	r2, r3
 80046f8:	69bb      	ldr	r3, [r7, #24]
 80046fa:	189b      	adds	r3, r3, r2
 80046fc:	61bb      	str	r3, [r7, #24]
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	781b      	ldrb	r3, [r3, #0]
 8004702:	00da      	lsls	r2, r3, #3
 8004704:	69bb      	ldr	r3, [r7, #24]
 8004706:	18d3      	adds	r3, r2, r3
 8004708:	4a43      	ldr	r2, [pc, #268]	; (8004818 <USB_EPStartXfer+0x3a8>)
 800470a:	4694      	mov	ip, r2
 800470c:	4463      	add	r3, ip
 800470e:	617b      	str	r3, [r7, #20]
 8004710:	1d7b      	adds	r3, r7, #5
 8004712:	33ff      	adds	r3, #255	; 0xff
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d110      	bne.n	800473c <USB_EPStartXfer+0x2cc>
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	881b      	ldrh	r3, [r3, #0]
 800471e:	b29b      	uxth	r3, r3
 8004720:	4a41      	ldr	r2, [pc, #260]	; (8004828 <USB_EPStartXfer+0x3b8>)
 8004722:	4013      	ands	r3, r2
 8004724:	b29a      	uxth	r2, r3
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	801a      	strh	r2, [r3, #0]
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	881b      	ldrh	r3, [r3, #0]
 800472e:	b29b      	uxth	r3, r3
 8004730:	4a3e      	ldr	r2, [pc, #248]	; (800482c <USB_EPStartXfer+0x3bc>)
 8004732:	4313      	orrs	r3, r2
 8004734:	b29a      	uxth	r2, r3
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	801a      	strh	r2, [r3, #0]
 800473a:	e05a      	b.n	80047f2 <USB_EPStartXfer+0x382>
 800473c:	1d7b      	adds	r3, r7, #5
 800473e:	33ff      	adds	r3, #255	; 0xff
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	2b3e      	cmp	r3, #62	; 0x3e
 8004744:	d81a      	bhi.n	800477c <USB_EPStartXfer+0x30c>
 8004746:	1d7b      	adds	r3, r7, #5
 8004748:	33ff      	adds	r3, #255	; 0xff
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	085b      	lsrs	r3, r3, #1
 800474e:	21fc      	movs	r1, #252	; 0xfc
 8004750:	187a      	adds	r2, r7, r1
 8004752:	6013      	str	r3, [r2, #0]
 8004754:	1d7b      	adds	r3, r7, #5
 8004756:	33ff      	adds	r3, #255	; 0xff
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	2201      	movs	r2, #1
 800475c:	4013      	ands	r3, r2
 800475e:	d004      	beq.n	800476a <USB_EPStartXfer+0x2fa>
 8004760:	187b      	adds	r3, r7, r1
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	3301      	adds	r3, #1
 8004766:	187a      	adds	r2, r7, r1
 8004768:	6013      	str	r3, [r2, #0]
 800476a:	23fc      	movs	r3, #252	; 0xfc
 800476c:	18fb      	adds	r3, r7, r3
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	b29b      	uxth	r3, r3
 8004772:	029b      	lsls	r3, r3, #10
 8004774:	b29a      	uxth	r2, r3
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	801a      	strh	r2, [r3, #0]
 800477a:	e03a      	b.n	80047f2 <USB_EPStartXfer+0x382>
 800477c:	1d7b      	adds	r3, r7, #5
 800477e:	33ff      	adds	r3, #255	; 0xff
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	095b      	lsrs	r3, r3, #5
 8004784:	21fc      	movs	r1, #252	; 0xfc
 8004786:	187a      	adds	r2, r7, r1
 8004788:	6013      	str	r3, [r2, #0]
 800478a:	1d7b      	adds	r3, r7, #5
 800478c:	33ff      	adds	r3, #255	; 0xff
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	221f      	movs	r2, #31
 8004792:	4013      	ands	r3, r2
 8004794:	d104      	bne.n	80047a0 <USB_EPStartXfer+0x330>
 8004796:	187b      	adds	r3, r7, r1
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	3b01      	subs	r3, #1
 800479c:	187a      	adds	r2, r7, r1
 800479e:	6013      	str	r3, [r2, #0]
 80047a0:	23fc      	movs	r3, #252	; 0xfc
 80047a2:	18fb      	adds	r3, r7, r3
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	b29b      	uxth	r3, r3
 80047a8:	029b      	lsls	r3, r3, #10
 80047aa:	b29b      	uxth	r3, r3
 80047ac:	4a1f      	ldr	r2, [pc, #124]	; (800482c <USB_EPStartXfer+0x3bc>)
 80047ae:	4313      	orrs	r3, r2
 80047b0:	b29a      	uxth	r2, r3
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	801a      	strh	r2, [r3, #0]
 80047b6:	e01c      	b.n	80047f2 <USB_EPStartXfer+0x382>
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	785b      	ldrb	r3, [r3, #1]
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d118      	bne.n	80047f2 <USB_EPStartXfer+0x382>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	623b      	str	r3, [r7, #32]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2250      	movs	r2, #80	; 0x50
 80047c8:	5a9b      	ldrh	r3, [r3, r2]
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	001a      	movs	r2, r3
 80047ce:	6a3b      	ldr	r3, [r7, #32]
 80047d0:	189b      	adds	r3, r3, r2
 80047d2:	623b      	str	r3, [r7, #32]
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	781b      	ldrb	r3, [r3, #0]
 80047d8:	00da      	lsls	r2, r3, #3
 80047da:	6a3b      	ldr	r3, [r7, #32]
 80047dc:	18d3      	adds	r3, r2, r3
 80047de:	4a0e      	ldr	r2, [pc, #56]	; (8004818 <USB_EPStartXfer+0x3a8>)
 80047e0:	4694      	mov	ip, r2
 80047e2:	4463      	add	r3, ip
 80047e4:	61fb      	str	r3, [r7, #28]
 80047e6:	1d7b      	adds	r3, r7, #5
 80047e8:	33ff      	adds	r3, #255	; 0xff
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	b29a      	uxth	r2, r3
 80047ee:	69fb      	ldr	r3, [r7, #28]
 80047f0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80047f2:	2076      	movs	r0, #118	; 0x76
 80047f4:	183b      	adds	r3, r7, r0
 80047f6:	683a      	ldr	r2, [r7, #0]
 80047f8:	8912      	ldrh	r2, [r2, #8]
 80047fa:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	6959      	ldr	r1, [r3, #20]
 8004800:	1d7b      	adds	r3, r7, #5
 8004802:	33ff      	adds	r3, #255	; 0xff
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	b29c      	uxth	r4, r3
 8004808:	183b      	adds	r3, r7, r0
 800480a:	881a      	ldrh	r2, [r3, #0]
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	0023      	movs	r3, r4
 8004810:	f001 f822 	bl	8005858 <USB_WritePMA>
 8004814:	e301      	b.n	8004e1a <USB_EPStartXfer+0x9aa>
 8004816:	46c0      	nop			; (mov r8, r8)
 8004818:	00000402 	.word	0x00000402
 800481c:	ffff8f8f 	.word	0xffff8f8f
 8004820:	ffff8180 	.word	0xffff8180
 8004824:	00000406 	.word	0x00000406
 8004828:	ffff83ff 	.word	0xffff83ff
 800482c:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	785b      	ldrb	r3, [r3, #1]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d166      	bne.n	8004906 <USB_EPStartXfer+0x496>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	64bb      	str	r3, [r7, #72]	; 0x48
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2250      	movs	r2, #80	; 0x50
 8004840:	5a9b      	ldrh	r3, [r3, r2]
 8004842:	b29b      	uxth	r3, r3
 8004844:	001a      	movs	r2, r3
 8004846:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004848:	189b      	adds	r3, r3, r2
 800484a:	64bb      	str	r3, [r7, #72]	; 0x48
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	781b      	ldrb	r3, [r3, #0]
 8004850:	00da      	lsls	r2, r3, #3
 8004852:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004854:	18d3      	adds	r3, r2, r3
 8004856:	4ac3      	ldr	r2, [pc, #780]	; (8004b64 <USB_EPStartXfer+0x6f4>)
 8004858:	4694      	mov	ip, r2
 800485a:	4463      	add	r3, ip
 800485c:	647b      	str	r3, [r7, #68]	; 0x44
 800485e:	1d7b      	adds	r3, r7, #5
 8004860:	33ff      	adds	r3, #255	; 0xff
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d110      	bne.n	800488a <USB_EPStartXfer+0x41a>
 8004868:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800486a:	881b      	ldrh	r3, [r3, #0]
 800486c:	b29b      	uxth	r3, r3
 800486e:	4abe      	ldr	r2, [pc, #760]	; (8004b68 <USB_EPStartXfer+0x6f8>)
 8004870:	4013      	ands	r3, r2
 8004872:	b29a      	uxth	r2, r3
 8004874:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004876:	801a      	strh	r2, [r3, #0]
 8004878:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800487a:	881b      	ldrh	r3, [r3, #0]
 800487c:	b29b      	uxth	r3, r3
 800487e:	4abb      	ldr	r2, [pc, #748]	; (8004b6c <USB_EPStartXfer+0x6fc>)
 8004880:	4313      	orrs	r3, r2
 8004882:	b29a      	uxth	r2, r3
 8004884:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004886:	801a      	strh	r2, [r3, #0]
 8004888:	e05a      	b.n	8004940 <USB_EPStartXfer+0x4d0>
 800488a:	1d7b      	adds	r3, r7, #5
 800488c:	33ff      	adds	r3, #255	; 0xff
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	2b3e      	cmp	r3, #62	; 0x3e
 8004892:	d81a      	bhi.n	80048ca <USB_EPStartXfer+0x45a>
 8004894:	1d7b      	adds	r3, r7, #5
 8004896:	33ff      	adds	r3, #255	; 0xff
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	085b      	lsrs	r3, r3, #1
 800489c:	21f8      	movs	r1, #248	; 0xf8
 800489e:	187a      	adds	r2, r7, r1
 80048a0:	6013      	str	r3, [r2, #0]
 80048a2:	1d7b      	adds	r3, r7, #5
 80048a4:	33ff      	adds	r3, #255	; 0xff
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	2201      	movs	r2, #1
 80048aa:	4013      	ands	r3, r2
 80048ac:	d004      	beq.n	80048b8 <USB_EPStartXfer+0x448>
 80048ae:	187b      	adds	r3, r7, r1
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	3301      	adds	r3, #1
 80048b4:	187a      	adds	r2, r7, r1
 80048b6:	6013      	str	r3, [r2, #0]
 80048b8:	23f8      	movs	r3, #248	; 0xf8
 80048ba:	18fb      	adds	r3, r7, r3
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	b29b      	uxth	r3, r3
 80048c0:	029b      	lsls	r3, r3, #10
 80048c2:	b29a      	uxth	r2, r3
 80048c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048c6:	801a      	strh	r2, [r3, #0]
 80048c8:	e03a      	b.n	8004940 <USB_EPStartXfer+0x4d0>
 80048ca:	1d7b      	adds	r3, r7, #5
 80048cc:	33ff      	adds	r3, #255	; 0xff
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	095b      	lsrs	r3, r3, #5
 80048d2:	21f8      	movs	r1, #248	; 0xf8
 80048d4:	187a      	adds	r2, r7, r1
 80048d6:	6013      	str	r3, [r2, #0]
 80048d8:	1d7b      	adds	r3, r7, #5
 80048da:	33ff      	adds	r3, #255	; 0xff
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	221f      	movs	r2, #31
 80048e0:	4013      	ands	r3, r2
 80048e2:	d104      	bne.n	80048ee <USB_EPStartXfer+0x47e>
 80048e4:	187b      	adds	r3, r7, r1
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	3b01      	subs	r3, #1
 80048ea:	187a      	adds	r2, r7, r1
 80048ec:	6013      	str	r3, [r2, #0]
 80048ee:	23f8      	movs	r3, #248	; 0xf8
 80048f0:	18fb      	adds	r3, r7, r3
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	b29b      	uxth	r3, r3
 80048f6:	029b      	lsls	r3, r3, #10
 80048f8:	b29b      	uxth	r3, r3
 80048fa:	4a9c      	ldr	r2, [pc, #624]	; (8004b6c <USB_EPStartXfer+0x6fc>)
 80048fc:	4313      	orrs	r3, r2
 80048fe:	b29a      	uxth	r2, r3
 8004900:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004902:	801a      	strh	r2, [r3, #0]
 8004904:	e01c      	b.n	8004940 <USB_EPStartXfer+0x4d0>
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	785b      	ldrb	r3, [r3, #1]
 800490a:	2b01      	cmp	r3, #1
 800490c:	d118      	bne.n	8004940 <USB_EPStartXfer+0x4d0>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	653b      	str	r3, [r7, #80]	; 0x50
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2250      	movs	r2, #80	; 0x50
 8004916:	5a9b      	ldrh	r3, [r3, r2]
 8004918:	b29b      	uxth	r3, r3
 800491a:	001a      	movs	r2, r3
 800491c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800491e:	189b      	adds	r3, r3, r2
 8004920:	653b      	str	r3, [r7, #80]	; 0x50
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	781b      	ldrb	r3, [r3, #0]
 8004926:	00da      	lsls	r2, r3, #3
 8004928:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800492a:	18d3      	adds	r3, r2, r3
 800492c:	4a8d      	ldr	r2, [pc, #564]	; (8004b64 <USB_EPStartXfer+0x6f4>)
 800492e:	4694      	mov	ip, r2
 8004930:	4463      	add	r3, ip
 8004932:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004934:	1d7b      	adds	r3, r7, #5
 8004936:	33ff      	adds	r3, #255	; 0xff
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	b29a      	uxth	r2, r3
 800493c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800493e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004940:	2076      	movs	r0, #118	; 0x76
 8004942:	183b      	adds	r3, r7, r0
 8004944:	683a      	ldr	r2, [r7, #0]
 8004946:	8912      	ldrh	r2, [r2, #8]
 8004948:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	6959      	ldr	r1, [r3, #20]
 800494e:	1d7b      	adds	r3, r7, #5
 8004950:	33ff      	adds	r3, #255	; 0xff
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	b29c      	uxth	r4, r3
 8004956:	183b      	adds	r3, r7, r0
 8004958:	881a      	ldrh	r2, [r3, #0]
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	0023      	movs	r3, r4
 800495e:	f000 ff7b 	bl	8005858 <USB_WritePMA>
            ep->xfer_buff += len;
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	695a      	ldr	r2, [r3, #20]
 8004966:	1d7b      	adds	r3, r7, #5
 8004968:	33ff      	adds	r3, #255	; 0xff
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	18d2      	adds	r2, r2, r3
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	6a1a      	ldr	r2, [r3, #32]
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	691b      	ldr	r3, [r3, #16]
 800497a:	429a      	cmp	r2, r3
 800497c:	d908      	bls.n	8004990 <USB_EPStartXfer+0x520>
            {
              ep->xfer_len_db -= len;
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	6a1a      	ldr	r2, [r3, #32]
 8004982:	1d7b      	adds	r3, r7, #5
 8004984:	33ff      	adds	r3, #255	; 0xff
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	1ad2      	subs	r2, r2, r3
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	621a      	str	r2, [r3, #32]
 800498e:	e007      	b.n	80049a0 <USB_EPStartXfer+0x530>
            }
            else
            {
              len = ep->xfer_len_db;
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	6a1b      	ldr	r3, [r3, #32]
 8004994:	1d7a      	adds	r2, r7, #5
 8004996:	32ff      	adds	r2, #255	; 0xff
 8004998:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	2200      	movs	r2, #0
 800499e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	643b      	str	r3, [r7, #64]	; 0x40
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	785b      	ldrb	r3, [r3, #1]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d166      	bne.n	8004a7a <USB_EPStartXfer+0x60a>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2250      	movs	r2, #80	; 0x50
 80049b4:	5a9b      	ldrh	r3, [r3, r2]
 80049b6:	b29b      	uxth	r3, r3
 80049b8:	001a      	movs	r2, r3
 80049ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049bc:	189b      	adds	r3, r3, r2
 80049be:	63bb      	str	r3, [r7, #56]	; 0x38
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	781b      	ldrb	r3, [r3, #0]
 80049c4:	00da      	lsls	r2, r3, #3
 80049c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049c8:	18d3      	adds	r3, r2, r3
 80049ca:	4a69      	ldr	r2, [pc, #420]	; (8004b70 <USB_EPStartXfer+0x700>)
 80049cc:	4694      	mov	ip, r2
 80049ce:	4463      	add	r3, ip
 80049d0:	637b      	str	r3, [r7, #52]	; 0x34
 80049d2:	1d7b      	adds	r3, r7, #5
 80049d4:	33ff      	adds	r3, #255	; 0xff
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d110      	bne.n	80049fe <USB_EPStartXfer+0x58e>
 80049dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049de:	881b      	ldrh	r3, [r3, #0]
 80049e0:	b29b      	uxth	r3, r3
 80049e2:	4a61      	ldr	r2, [pc, #388]	; (8004b68 <USB_EPStartXfer+0x6f8>)
 80049e4:	4013      	ands	r3, r2
 80049e6:	b29a      	uxth	r2, r3
 80049e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049ea:	801a      	strh	r2, [r3, #0]
 80049ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049ee:	881b      	ldrh	r3, [r3, #0]
 80049f0:	b29b      	uxth	r3, r3
 80049f2:	4a5e      	ldr	r2, [pc, #376]	; (8004b6c <USB_EPStartXfer+0x6fc>)
 80049f4:	4313      	orrs	r3, r2
 80049f6:	b29a      	uxth	r2, r3
 80049f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049fa:	801a      	strh	r2, [r3, #0]
 80049fc:	e058      	b.n	8004ab0 <USB_EPStartXfer+0x640>
 80049fe:	1d7b      	adds	r3, r7, #5
 8004a00:	33ff      	adds	r3, #255	; 0xff
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	2b3e      	cmp	r3, #62	; 0x3e
 8004a06:	d81a      	bhi.n	8004a3e <USB_EPStartXfer+0x5ce>
 8004a08:	1d7b      	adds	r3, r7, #5
 8004a0a:	33ff      	adds	r3, #255	; 0xff
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	085b      	lsrs	r3, r3, #1
 8004a10:	21f4      	movs	r1, #244	; 0xf4
 8004a12:	187a      	adds	r2, r7, r1
 8004a14:	6013      	str	r3, [r2, #0]
 8004a16:	1d7b      	adds	r3, r7, #5
 8004a18:	33ff      	adds	r3, #255	; 0xff
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	4013      	ands	r3, r2
 8004a20:	d004      	beq.n	8004a2c <USB_EPStartXfer+0x5bc>
 8004a22:	187b      	adds	r3, r7, r1
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	3301      	adds	r3, #1
 8004a28:	187a      	adds	r2, r7, r1
 8004a2a:	6013      	str	r3, [r2, #0]
 8004a2c:	23f4      	movs	r3, #244	; 0xf4
 8004a2e:	18fb      	adds	r3, r7, r3
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	b29b      	uxth	r3, r3
 8004a34:	029b      	lsls	r3, r3, #10
 8004a36:	b29a      	uxth	r2, r3
 8004a38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a3a:	801a      	strh	r2, [r3, #0]
 8004a3c:	e038      	b.n	8004ab0 <USB_EPStartXfer+0x640>
 8004a3e:	1d7b      	adds	r3, r7, #5
 8004a40:	33ff      	adds	r3, #255	; 0xff
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	095b      	lsrs	r3, r3, #5
 8004a46:	21f4      	movs	r1, #244	; 0xf4
 8004a48:	187a      	adds	r2, r7, r1
 8004a4a:	6013      	str	r3, [r2, #0]
 8004a4c:	1d7b      	adds	r3, r7, #5
 8004a4e:	33ff      	adds	r3, #255	; 0xff
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	221f      	movs	r2, #31
 8004a54:	4013      	ands	r3, r2
 8004a56:	d104      	bne.n	8004a62 <USB_EPStartXfer+0x5f2>
 8004a58:	187b      	adds	r3, r7, r1
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	3b01      	subs	r3, #1
 8004a5e:	187a      	adds	r2, r7, r1
 8004a60:	6013      	str	r3, [r2, #0]
 8004a62:	23f4      	movs	r3, #244	; 0xf4
 8004a64:	18fb      	adds	r3, r7, r3
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	b29b      	uxth	r3, r3
 8004a6a:	029b      	lsls	r3, r3, #10
 8004a6c:	b29b      	uxth	r3, r3
 8004a6e:	4a3f      	ldr	r2, [pc, #252]	; (8004b6c <USB_EPStartXfer+0x6fc>)
 8004a70:	4313      	orrs	r3, r2
 8004a72:	b29a      	uxth	r2, r3
 8004a74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a76:	801a      	strh	r2, [r3, #0]
 8004a78:	e01a      	b.n	8004ab0 <USB_EPStartXfer+0x640>
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	785b      	ldrb	r3, [r3, #1]
 8004a7e:	2b01      	cmp	r3, #1
 8004a80:	d116      	bne.n	8004ab0 <USB_EPStartXfer+0x640>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2250      	movs	r2, #80	; 0x50
 8004a86:	5a9b      	ldrh	r3, [r3, r2]
 8004a88:	b29b      	uxth	r3, r3
 8004a8a:	001a      	movs	r2, r3
 8004a8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a8e:	189b      	adds	r3, r3, r2
 8004a90:	643b      	str	r3, [r7, #64]	; 0x40
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	781b      	ldrb	r3, [r3, #0]
 8004a96:	00da      	lsls	r2, r3, #3
 8004a98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a9a:	18d3      	adds	r3, r2, r3
 8004a9c:	4a34      	ldr	r2, [pc, #208]	; (8004b70 <USB_EPStartXfer+0x700>)
 8004a9e:	4694      	mov	ip, r2
 8004aa0:	4463      	add	r3, ip
 8004aa2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004aa4:	1d7b      	adds	r3, r7, #5
 8004aa6:	33ff      	adds	r3, #255	; 0xff
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	b29a      	uxth	r2, r3
 8004aac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004aae:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004ab0:	2076      	movs	r0, #118	; 0x76
 8004ab2:	183b      	adds	r3, r7, r0
 8004ab4:	683a      	ldr	r2, [r7, #0]
 8004ab6:	8952      	ldrh	r2, [r2, #10]
 8004ab8:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	6959      	ldr	r1, [r3, #20]
 8004abe:	1d7b      	adds	r3, r7, #5
 8004ac0:	33ff      	adds	r3, #255	; 0xff
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	b29c      	uxth	r4, r3
 8004ac6:	183b      	adds	r3, r7, r0
 8004ac8:	881a      	ldrh	r2, [r3, #0]
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	0023      	movs	r3, r4
 8004ace:	f000 fec3 	bl	8005858 <USB_WritePMA>
 8004ad2:	e1a2      	b.n	8004e1a <USB_EPStartXfer+0x9aa>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	6a1b      	ldr	r3, [r3, #32]
 8004ad8:	1d7a      	adds	r2, r7, #5
 8004ada:	32ff      	adds	r2, #255	; 0xff
 8004adc:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	781b      	ldrb	r3, [r3, #0]
 8004ae4:	009b      	lsls	r3, r3, #2
 8004ae6:	18d3      	adds	r3, r2, r3
 8004ae8:	881b      	ldrh	r3, [r3, #0]
 8004aea:	b29a      	uxth	r2, r3
 8004aec:	2062      	movs	r0, #98	; 0x62
 8004aee:	183b      	adds	r3, r7, r0
 8004af0:	4920      	ldr	r1, [pc, #128]	; (8004b74 <USB_EPStartXfer+0x704>)
 8004af2:	400a      	ands	r2, r1
 8004af4:	801a      	strh	r2, [r3, #0]
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	781b      	ldrb	r3, [r3, #0]
 8004afc:	009b      	lsls	r3, r3, #2
 8004afe:	18d3      	adds	r3, r2, r3
 8004b00:	183a      	adds	r2, r7, r0
 8004b02:	8812      	ldrh	r2, [r2, #0]
 8004b04:	491c      	ldr	r1, [pc, #112]	; (8004b78 <USB_EPStartXfer+0x708>)
 8004b06:	430a      	orrs	r2, r1
 8004b08:	b292      	uxth	r2, r2
 8004b0a:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2250      	movs	r2, #80	; 0x50
 8004b14:	5a9b      	ldrh	r3, [r3, r2]
 8004b16:	b29b      	uxth	r3, r3
 8004b18:	001a      	movs	r2, r3
 8004b1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b1c:	189b      	adds	r3, r3, r2
 8004b1e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	781b      	ldrb	r3, [r3, #0]
 8004b24:	00da      	lsls	r2, r3, #3
 8004b26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b28:	18d3      	adds	r3, r2, r3
 8004b2a:	4a0e      	ldr	r2, [pc, #56]	; (8004b64 <USB_EPStartXfer+0x6f4>)
 8004b2c:	4694      	mov	ip, r2
 8004b2e:	4463      	add	r3, ip
 8004b30:	65bb      	str	r3, [r7, #88]	; 0x58
 8004b32:	1d7b      	adds	r3, r7, #5
 8004b34:	33ff      	adds	r3, #255	; 0xff
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	b29a      	uxth	r2, r3
 8004b3a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b3c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004b3e:	2076      	movs	r0, #118	; 0x76
 8004b40:	183b      	adds	r3, r7, r0
 8004b42:	683a      	ldr	r2, [r7, #0]
 8004b44:	8912      	ldrh	r2, [r2, #8]
 8004b46:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	6959      	ldr	r1, [r3, #20]
 8004b4c:	1d7b      	adds	r3, r7, #5
 8004b4e:	33ff      	adds	r3, #255	; 0xff
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	b29c      	uxth	r4, r3
 8004b54:	183b      	adds	r3, r7, r0
 8004b56:	881a      	ldrh	r2, [r3, #0]
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	0023      	movs	r3, r4
 8004b5c:	f000 fe7c 	bl	8005858 <USB_WritePMA>
 8004b60:	e15b      	b.n	8004e1a <USB_EPStartXfer+0x9aa>
 8004b62:	46c0      	nop			; (mov r8, r8)
 8004b64:	00000402 	.word	0x00000402
 8004b68:	ffff83ff 	.word	0xffff83ff
 8004b6c:	ffff8000 	.word	0xffff8000
 8004b70:	00000406 	.word	0x00000406
 8004b74:	ffff8e8f 	.word	0xffff8e8f
 8004b78:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	6a1a      	ldr	r2, [r3, #32]
 8004b80:	1d7b      	adds	r3, r7, #5
 8004b82:	33ff      	adds	r3, #255	; 0xff
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	1ad2      	subs	r2, r2, r3
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004b8c:	687a      	ldr	r2, [r7, #4]
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	781b      	ldrb	r3, [r3, #0]
 8004b92:	009b      	lsls	r3, r3, #2
 8004b94:	18d3      	adds	r3, r2, r3
 8004b96:	881b      	ldrh	r3, [r3, #0]
 8004b98:	b29b      	uxth	r3, r3
 8004b9a:	001a      	movs	r2, r3
 8004b9c:	2340      	movs	r3, #64	; 0x40
 8004b9e:	4013      	ands	r3, r2
 8004ba0:	d100      	bne.n	8004ba4 <USB_EPStartXfer+0x734>
 8004ba2:	e099      	b.n	8004cd8 <USB_EPStartXfer+0x868>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	673b      	str	r3, [r7, #112]	; 0x70
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	785b      	ldrb	r3, [r3, #1]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d166      	bne.n	8004c7e <USB_EPStartXfer+0x80e>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	66bb      	str	r3, [r7, #104]	; 0x68
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2250      	movs	r2, #80	; 0x50
 8004bb8:	5a9b      	ldrh	r3, [r3, r2]
 8004bba:	b29b      	uxth	r3, r3
 8004bbc:	001a      	movs	r2, r3
 8004bbe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004bc0:	189b      	adds	r3, r3, r2
 8004bc2:	66bb      	str	r3, [r7, #104]	; 0x68
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	781b      	ldrb	r3, [r3, #0]
 8004bc8:	00da      	lsls	r2, r3, #3
 8004bca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004bcc:	18d3      	adds	r3, r2, r3
 8004bce:	4ad0      	ldr	r2, [pc, #832]	; (8004f10 <USB_EPStartXfer+0xaa0>)
 8004bd0:	4694      	mov	ip, r2
 8004bd2:	4463      	add	r3, ip
 8004bd4:	667b      	str	r3, [r7, #100]	; 0x64
 8004bd6:	1d7b      	adds	r3, r7, #5
 8004bd8:	33ff      	adds	r3, #255	; 0xff
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d110      	bne.n	8004c02 <USB_EPStartXfer+0x792>
 8004be0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004be2:	881b      	ldrh	r3, [r3, #0]
 8004be4:	b29b      	uxth	r3, r3
 8004be6:	4acb      	ldr	r2, [pc, #812]	; (8004f14 <USB_EPStartXfer+0xaa4>)
 8004be8:	4013      	ands	r3, r2
 8004bea:	b29a      	uxth	r2, r3
 8004bec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004bee:	801a      	strh	r2, [r3, #0]
 8004bf0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004bf2:	881b      	ldrh	r3, [r3, #0]
 8004bf4:	b29b      	uxth	r3, r3
 8004bf6:	4ac8      	ldr	r2, [pc, #800]	; (8004f18 <USB_EPStartXfer+0xaa8>)
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	b29a      	uxth	r2, r3
 8004bfc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004bfe:	801a      	strh	r2, [r3, #0]
 8004c00:	e058      	b.n	8004cb4 <USB_EPStartXfer+0x844>
 8004c02:	1d7b      	adds	r3, r7, #5
 8004c04:	33ff      	adds	r3, #255	; 0xff
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	2b3e      	cmp	r3, #62	; 0x3e
 8004c0a:	d81a      	bhi.n	8004c42 <USB_EPStartXfer+0x7d2>
 8004c0c:	1d7b      	adds	r3, r7, #5
 8004c0e:	33ff      	adds	r3, #255	; 0xff
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	085b      	lsrs	r3, r3, #1
 8004c14:	21f0      	movs	r1, #240	; 0xf0
 8004c16:	187a      	adds	r2, r7, r1
 8004c18:	6013      	str	r3, [r2, #0]
 8004c1a:	1d7b      	adds	r3, r7, #5
 8004c1c:	33ff      	adds	r3, #255	; 0xff
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	2201      	movs	r2, #1
 8004c22:	4013      	ands	r3, r2
 8004c24:	d004      	beq.n	8004c30 <USB_EPStartXfer+0x7c0>
 8004c26:	187b      	adds	r3, r7, r1
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	3301      	adds	r3, #1
 8004c2c:	187a      	adds	r2, r7, r1
 8004c2e:	6013      	str	r3, [r2, #0]
 8004c30:	23f0      	movs	r3, #240	; 0xf0
 8004c32:	18fb      	adds	r3, r7, r3
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	029b      	lsls	r3, r3, #10
 8004c3a:	b29a      	uxth	r2, r3
 8004c3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c3e:	801a      	strh	r2, [r3, #0]
 8004c40:	e038      	b.n	8004cb4 <USB_EPStartXfer+0x844>
 8004c42:	1d7b      	adds	r3, r7, #5
 8004c44:	33ff      	adds	r3, #255	; 0xff
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	095b      	lsrs	r3, r3, #5
 8004c4a:	21f0      	movs	r1, #240	; 0xf0
 8004c4c:	187a      	adds	r2, r7, r1
 8004c4e:	6013      	str	r3, [r2, #0]
 8004c50:	1d7b      	adds	r3, r7, #5
 8004c52:	33ff      	adds	r3, #255	; 0xff
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	221f      	movs	r2, #31
 8004c58:	4013      	ands	r3, r2
 8004c5a:	d104      	bne.n	8004c66 <USB_EPStartXfer+0x7f6>
 8004c5c:	187b      	adds	r3, r7, r1
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	3b01      	subs	r3, #1
 8004c62:	187a      	adds	r2, r7, r1
 8004c64:	6013      	str	r3, [r2, #0]
 8004c66:	23f0      	movs	r3, #240	; 0xf0
 8004c68:	18fb      	adds	r3, r7, r3
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	029b      	lsls	r3, r3, #10
 8004c70:	b29b      	uxth	r3, r3
 8004c72:	4aa9      	ldr	r2, [pc, #676]	; (8004f18 <USB_EPStartXfer+0xaa8>)
 8004c74:	4313      	orrs	r3, r2
 8004c76:	b29a      	uxth	r2, r3
 8004c78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c7a:	801a      	strh	r2, [r3, #0]
 8004c7c:	e01a      	b.n	8004cb4 <USB_EPStartXfer+0x844>
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	785b      	ldrb	r3, [r3, #1]
 8004c82:	2b01      	cmp	r3, #1
 8004c84:	d116      	bne.n	8004cb4 <USB_EPStartXfer+0x844>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2250      	movs	r2, #80	; 0x50
 8004c8a:	5a9b      	ldrh	r3, [r3, r2]
 8004c8c:	b29b      	uxth	r3, r3
 8004c8e:	001a      	movs	r2, r3
 8004c90:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004c92:	189b      	adds	r3, r3, r2
 8004c94:	673b      	str	r3, [r7, #112]	; 0x70
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	781b      	ldrb	r3, [r3, #0]
 8004c9a:	00da      	lsls	r2, r3, #3
 8004c9c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004c9e:	18d3      	adds	r3, r2, r3
 8004ca0:	4a9b      	ldr	r2, [pc, #620]	; (8004f10 <USB_EPStartXfer+0xaa0>)
 8004ca2:	4694      	mov	ip, r2
 8004ca4:	4463      	add	r3, ip
 8004ca6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004ca8:	1d7b      	adds	r3, r7, #5
 8004caa:	33ff      	adds	r3, #255	; 0xff
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	b29a      	uxth	r2, r3
 8004cb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cb2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8004cb4:	2076      	movs	r0, #118	; 0x76
 8004cb6:	183b      	adds	r3, r7, r0
 8004cb8:	683a      	ldr	r2, [r7, #0]
 8004cba:	8952      	ldrh	r2, [r2, #10]
 8004cbc:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	6959      	ldr	r1, [r3, #20]
 8004cc2:	1d7b      	adds	r3, r7, #5
 8004cc4:	33ff      	adds	r3, #255	; 0xff
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	b29c      	uxth	r4, r3
 8004cca:	183b      	adds	r3, r7, r0
 8004ccc:	881a      	ldrh	r2, [r3, #0]
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	0023      	movs	r3, r4
 8004cd2:	f000 fdc1 	bl	8005858 <USB_WritePMA>
 8004cd6:	e0a0      	b.n	8004e1a <USB_EPStartXfer+0x9aa>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	785b      	ldrb	r3, [r3, #1]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d166      	bne.n	8004dae <USB_EPStartXfer+0x93e>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2250      	movs	r2, #80	; 0x50
 8004ce8:	5a9b      	ldrh	r3, [r3, r2]
 8004cea:	b29b      	uxth	r3, r3
 8004cec:	001a      	movs	r2, r3
 8004cee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004cf0:	189b      	adds	r3, r3, r2
 8004cf2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	781b      	ldrb	r3, [r3, #0]
 8004cf8:	00da      	lsls	r2, r3, #3
 8004cfa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004cfc:	18d3      	adds	r3, r2, r3
 8004cfe:	4a87      	ldr	r2, [pc, #540]	; (8004f1c <USB_EPStartXfer+0xaac>)
 8004d00:	4694      	mov	ip, r2
 8004d02:	4463      	add	r3, ip
 8004d04:	67bb      	str	r3, [r7, #120]	; 0x78
 8004d06:	1d7b      	adds	r3, r7, #5
 8004d08:	33ff      	adds	r3, #255	; 0xff
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d110      	bne.n	8004d32 <USB_EPStartXfer+0x8c2>
 8004d10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d12:	881b      	ldrh	r3, [r3, #0]
 8004d14:	b29b      	uxth	r3, r3
 8004d16:	4a7f      	ldr	r2, [pc, #508]	; (8004f14 <USB_EPStartXfer+0xaa4>)
 8004d18:	4013      	ands	r3, r2
 8004d1a:	b29a      	uxth	r2, r3
 8004d1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d1e:	801a      	strh	r2, [r3, #0]
 8004d20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d22:	881b      	ldrh	r3, [r3, #0]
 8004d24:	b29b      	uxth	r3, r3
 8004d26:	4a7c      	ldr	r2, [pc, #496]	; (8004f18 <USB_EPStartXfer+0xaa8>)
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	b29a      	uxth	r2, r3
 8004d2c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d2e:	801a      	strh	r2, [r3, #0]
 8004d30:	e062      	b.n	8004df8 <USB_EPStartXfer+0x988>
 8004d32:	1d7b      	adds	r3, r7, #5
 8004d34:	33ff      	adds	r3, #255	; 0xff
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	2b3e      	cmp	r3, #62	; 0x3e
 8004d3a:	d81a      	bhi.n	8004d72 <USB_EPStartXfer+0x902>
 8004d3c:	1d7b      	adds	r3, r7, #5
 8004d3e:	33ff      	adds	r3, #255	; 0xff
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	085b      	lsrs	r3, r3, #1
 8004d44:	21ec      	movs	r1, #236	; 0xec
 8004d46:	187a      	adds	r2, r7, r1
 8004d48:	6013      	str	r3, [r2, #0]
 8004d4a:	1d7b      	adds	r3, r7, #5
 8004d4c:	33ff      	adds	r3, #255	; 0xff
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	2201      	movs	r2, #1
 8004d52:	4013      	ands	r3, r2
 8004d54:	d004      	beq.n	8004d60 <USB_EPStartXfer+0x8f0>
 8004d56:	187b      	adds	r3, r7, r1
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	3301      	adds	r3, #1
 8004d5c:	187a      	adds	r2, r7, r1
 8004d5e:	6013      	str	r3, [r2, #0]
 8004d60:	23ec      	movs	r3, #236	; 0xec
 8004d62:	18fb      	adds	r3, r7, r3
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	029b      	lsls	r3, r3, #10
 8004d6a:	b29a      	uxth	r2, r3
 8004d6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d6e:	801a      	strh	r2, [r3, #0]
 8004d70:	e042      	b.n	8004df8 <USB_EPStartXfer+0x988>
 8004d72:	1d7b      	adds	r3, r7, #5
 8004d74:	33ff      	adds	r3, #255	; 0xff
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	095b      	lsrs	r3, r3, #5
 8004d7a:	21ec      	movs	r1, #236	; 0xec
 8004d7c:	187a      	adds	r2, r7, r1
 8004d7e:	6013      	str	r3, [r2, #0]
 8004d80:	1d7b      	adds	r3, r7, #5
 8004d82:	33ff      	adds	r3, #255	; 0xff
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	221f      	movs	r2, #31
 8004d88:	4013      	ands	r3, r2
 8004d8a:	d104      	bne.n	8004d96 <USB_EPStartXfer+0x926>
 8004d8c:	187b      	adds	r3, r7, r1
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	3b01      	subs	r3, #1
 8004d92:	187a      	adds	r2, r7, r1
 8004d94:	6013      	str	r3, [r2, #0]
 8004d96:	23ec      	movs	r3, #236	; 0xec
 8004d98:	18fb      	adds	r3, r7, r3
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	b29b      	uxth	r3, r3
 8004d9e:	029b      	lsls	r3, r3, #10
 8004da0:	b29b      	uxth	r3, r3
 8004da2:	4a5d      	ldr	r2, [pc, #372]	; (8004f18 <USB_EPStartXfer+0xaa8>)
 8004da4:	4313      	orrs	r3, r2
 8004da6:	b29a      	uxth	r2, r3
 8004da8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004daa:	801a      	strh	r2, [r3, #0]
 8004dac:	e024      	b.n	8004df8 <USB_EPStartXfer+0x988>
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	785b      	ldrb	r3, [r3, #1]
 8004db2:	2b01      	cmp	r3, #1
 8004db4:	d120      	bne.n	8004df8 <USB_EPStartXfer+0x988>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2184      	movs	r1, #132	; 0x84
 8004dba:	187a      	adds	r2, r7, r1
 8004dbc:	6013      	str	r3, [r2, #0]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2250      	movs	r2, #80	; 0x50
 8004dc2:	5a9b      	ldrh	r3, [r3, r2]
 8004dc4:	b29b      	uxth	r3, r3
 8004dc6:	001a      	movs	r2, r3
 8004dc8:	187b      	adds	r3, r7, r1
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	189b      	adds	r3, r3, r2
 8004dce:	187a      	adds	r2, r7, r1
 8004dd0:	6013      	str	r3, [r2, #0]
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	781b      	ldrb	r3, [r3, #0]
 8004dd6:	00da      	lsls	r2, r3, #3
 8004dd8:	187b      	adds	r3, r7, r1
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	18d3      	adds	r3, r2, r3
 8004dde:	4a4f      	ldr	r2, [pc, #316]	; (8004f1c <USB_EPStartXfer+0xaac>)
 8004de0:	4694      	mov	ip, r2
 8004de2:	4463      	add	r3, ip
 8004de4:	2180      	movs	r1, #128	; 0x80
 8004de6:	187a      	adds	r2, r7, r1
 8004de8:	6013      	str	r3, [r2, #0]
 8004dea:	1d7b      	adds	r3, r7, #5
 8004dec:	33ff      	adds	r3, #255	; 0xff
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	b29a      	uxth	r2, r3
 8004df2:	187b      	adds	r3, r7, r1
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004df8:	2076      	movs	r0, #118	; 0x76
 8004dfa:	183b      	adds	r3, r7, r0
 8004dfc:	683a      	ldr	r2, [r7, #0]
 8004dfe:	8912      	ldrh	r2, [r2, #8]
 8004e00:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	6959      	ldr	r1, [r3, #20]
 8004e06:	1d7b      	adds	r3, r7, #5
 8004e08:	33ff      	adds	r3, #255	; 0xff
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	b29c      	uxth	r4, r3
 8004e0e:	183b      	adds	r3, r7, r0
 8004e10:	881a      	ldrh	r2, [r3, #0]
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	0023      	movs	r3, r4
 8004e16:	f000 fd1f 	bl	8005858 <USB_WritePMA>
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004e1a:	687a      	ldr	r2, [r7, #4]
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	781b      	ldrb	r3, [r3, #0]
 8004e20:	009b      	lsls	r3, r3, #2
 8004e22:	18d3      	adds	r3, r2, r3
 8004e24:	881b      	ldrh	r3, [r3, #0]
 8004e26:	b29a      	uxth	r2, r3
 8004e28:	200a      	movs	r0, #10
 8004e2a:	183b      	adds	r3, r7, r0
 8004e2c:	493c      	ldr	r1, [pc, #240]	; (8004f20 <USB_EPStartXfer+0xab0>)
 8004e2e:	400a      	ands	r2, r1
 8004e30:	801a      	strh	r2, [r3, #0]
 8004e32:	183b      	adds	r3, r7, r0
 8004e34:	183a      	adds	r2, r7, r0
 8004e36:	8812      	ldrh	r2, [r2, #0]
 8004e38:	2110      	movs	r1, #16
 8004e3a:	404a      	eors	r2, r1
 8004e3c:	801a      	strh	r2, [r3, #0]
 8004e3e:	183b      	adds	r3, r7, r0
 8004e40:	183a      	adds	r2, r7, r0
 8004e42:	8812      	ldrh	r2, [r2, #0]
 8004e44:	2120      	movs	r1, #32
 8004e46:	404a      	eors	r2, r1
 8004e48:	801a      	strh	r2, [r3, #0]
 8004e4a:	687a      	ldr	r2, [r7, #4]
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	781b      	ldrb	r3, [r3, #0]
 8004e50:	009b      	lsls	r3, r3, #2
 8004e52:	18d3      	adds	r3, r2, r3
 8004e54:	183a      	adds	r2, r7, r0
 8004e56:	8812      	ldrh	r2, [r2, #0]
 8004e58:	4932      	ldr	r1, [pc, #200]	; (8004f24 <USB_EPStartXfer+0xab4>)
 8004e5a:	430a      	orrs	r2, r1
 8004e5c:	b292      	uxth	r2, r2
 8004e5e:	801a      	strh	r2, [r3, #0]
 8004e60:	f000 fbaf 	bl	80055c2 <USB_EPStartXfer+0x1152>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	7b1b      	ldrb	r3, [r3, #12]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d000      	beq.n	8004e6e <USB_EPStartXfer+0x9fe>
 8004e6c:	e09e      	b.n	8004fac <USB_EPStartXfer+0xb3c>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	699a      	ldr	r2, [r3, #24]
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	691b      	ldr	r3, [r3, #16]
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d90d      	bls.n	8004e96 <USB_EPStartXfer+0xa26>
      {
        len = ep->maxpacket;
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	691b      	ldr	r3, [r3, #16]
 8004e7e:	1d7a      	adds	r2, r7, #5
 8004e80:	32ff      	adds	r2, #255	; 0xff
 8004e82:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	699a      	ldr	r2, [r3, #24]
 8004e88:	1d7b      	adds	r3, r7, #5
 8004e8a:	33ff      	adds	r3, #255	; 0xff
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	1ad2      	subs	r2, r2, r3
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	619a      	str	r2, [r3, #24]
 8004e94:	e007      	b.n	8004ea6 <USB_EPStartXfer+0xa36>
      }
      else
      {
        len = ep->xfer_len;
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	699b      	ldr	r3, [r3, #24]
 8004e9a:	1d7a      	adds	r2, r7, #5
 8004e9c:	32ff      	adds	r2, #255	; 0xff
 8004e9e:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2190      	movs	r1, #144	; 0x90
 8004eaa:	187a      	adds	r2, r7, r1
 8004eac:	6013      	str	r3, [r2, #0]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2250      	movs	r2, #80	; 0x50
 8004eb2:	5a9b      	ldrh	r3, [r3, r2]
 8004eb4:	b29b      	uxth	r3, r3
 8004eb6:	001a      	movs	r2, r3
 8004eb8:	187b      	adds	r3, r7, r1
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	189b      	adds	r3, r3, r2
 8004ebe:	187a      	adds	r2, r7, r1
 8004ec0:	6013      	str	r3, [r2, #0]
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	781b      	ldrb	r3, [r3, #0]
 8004ec6:	00da      	lsls	r2, r3, #3
 8004ec8:	187b      	adds	r3, r7, r1
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	18d3      	adds	r3, r2, r3
 8004ece:	4a10      	ldr	r2, [pc, #64]	; (8004f10 <USB_EPStartXfer+0xaa0>)
 8004ed0:	4694      	mov	ip, r2
 8004ed2:	4463      	add	r3, ip
 8004ed4:	218c      	movs	r1, #140	; 0x8c
 8004ed6:	187a      	adds	r2, r7, r1
 8004ed8:	6013      	str	r3, [r2, #0]
 8004eda:	1d7b      	adds	r3, r7, #5
 8004edc:	33ff      	adds	r3, #255	; 0xff
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d121      	bne.n	8004f28 <USB_EPStartXfer+0xab8>
 8004ee4:	187b      	adds	r3, r7, r1
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	881b      	ldrh	r3, [r3, #0]
 8004eea:	b29b      	uxth	r3, r3
 8004eec:	4a09      	ldr	r2, [pc, #36]	; (8004f14 <USB_EPStartXfer+0xaa4>)
 8004eee:	4013      	ands	r3, r2
 8004ef0:	b29a      	uxth	r2, r3
 8004ef2:	187b      	adds	r3, r7, r1
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	801a      	strh	r2, [r3, #0]
 8004ef8:	187b      	adds	r3, r7, r1
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	881b      	ldrh	r3, [r3, #0]
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	4a05      	ldr	r2, [pc, #20]	; (8004f18 <USB_EPStartXfer+0xaa8>)
 8004f02:	4313      	orrs	r3, r2
 8004f04:	b29a      	uxth	r2, r3
 8004f06:	187b      	adds	r3, r7, r1
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	801a      	strh	r2, [r3, #0]
 8004f0c:	e334      	b.n	8005578 <USB_EPStartXfer+0x1108>
 8004f0e:	46c0      	nop			; (mov r8, r8)
 8004f10:	00000406 	.word	0x00000406
 8004f14:	ffff83ff 	.word	0xffff83ff
 8004f18:	ffff8000 	.word	0xffff8000
 8004f1c:	00000402 	.word	0x00000402
 8004f20:	ffff8fbf 	.word	0xffff8fbf
 8004f24:	ffff8080 	.word	0xffff8080
 8004f28:	1d7b      	adds	r3, r7, #5
 8004f2a:	33ff      	adds	r3, #255	; 0xff
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	2b3e      	cmp	r3, #62	; 0x3e
 8004f30:	d81c      	bhi.n	8004f6c <USB_EPStartXfer+0xafc>
 8004f32:	1d7b      	adds	r3, r7, #5
 8004f34:	33ff      	adds	r3, #255	; 0xff
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	085b      	lsrs	r3, r3, #1
 8004f3a:	21e8      	movs	r1, #232	; 0xe8
 8004f3c:	187a      	adds	r2, r7, r1
 8004f3e:	6013      	str	r3, [r2, #0]
 8004f40:	1d7b      	adds	r3, r7, #5
 8004f42:	33ff      	adds	r3, #255	; 0xff
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	2201      	movs	r2, #1
 8004f48:	4013      	ands	r3, r2
 8004f4a:	d004      	beq.n	8004f56 <USB_EPStartXfer+0xae6>
 8004f4c:	187b      	adds	r3, r7, r1
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	3301      	adds	r3, #1
 8004f52:	187a      	adds	r2, r7, r1
 8004f54:	6013      	str	r3, [r2, #0]
 8004f56:	23e8      	movs	r3, #232	; 0xe8
 8004f58:	18fb      	adds	r3, r7, r3
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	b29b      	uxth	r3, r3
 8004f5e:	029b      	lsls	r3, r3, #10
 8004f60:	b29a      	uxth	r2, r3
 8004f62:	238c      	movs	r3, #140	; 0x8c
 8004f64:	18fb      	adds	r3, r7, r3
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	801a      	strh	r2, [r3, #0]
 8004f6a:	e305      	b.n	8005578 <USB_EPStartXfer+0x1108>
 8004f6c:	1d7b      	adds	r3, r7, #5
 8004f6e:	33ff      	adds	r3, #255	; 0xff
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	095b      	lsrs	r3, r3, #5
 8004f74:	21e8      	movs	r1, #232	; 0xe8
 8004f76:	187a      	adds	r2, r7, r1
 8004f78:	6013      	str	r3, [r2, #0]
 8004f7a:	1d7b      	adds	r3, r7, #5
 8004f7c:	33ff      	adds	r3, #255	; 0xff
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	221f      	movs	r2, #31
 8004f82:	4013      	ands	r3, r2
 8004f84:	d104      	bne.n	8004f90 <USB_EPStartXfer+0xb20>
 8004f86:	187b      	adds	r3, r7, r1
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	3b01      	subs	r3, #1
 8004f8c:	187a      	adds	r2, r7, r1
 8004f8e:	6013      	str	r3, [r2, #0]
 8004f90:	23e8      	movs	r3, #232	; 0xe8
 8004f92:	18fb      	adds	r3, r7, r3
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	b29b      	uxth	r3, r3
 8004f98:	029b      	lsls	r3, r3, #10
 8004f9a:	b29b      	uxth	r3, r3
 8004f9c:	4aca      	ldr	r2, [pc, #808]	; (80052c8 <USB_EPStartXfer+0xe58>)
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	b29a      	uxth	r2, r3
 8004fa2:	238c      	movs	r3, #140	; 0x8c
 8004fa4:	18fb      	adds	r3, r7, r3
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	801a      	strh	r2, [r3, #0]
 8004faa:	e2e5      	b.n	8005578 <USB_EPStartXfer+0x1108>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	78db      	ldrb	r3, [r3, #3]
 8004fb0:	2b02      	cmp	r3, #2
 8004fb2:	d000      	beq.n	8004fb6 <USB_EPStartXfer+0xb46>
 8004fb4:	e16f      	b.n	8005296 <USB_EPStartXfer+0xe26>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	785b      	ldrb	r3, [r3, #1]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d16f      	bne.n	800509e <USB_EPStartXfer+0xc2e>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	21ac      	movs	r1, #172	; 0xac
 8004fc2:	187a      	adds	r2, r7, r1
 8004fc4:	6013      	str	r3, [r2, #0]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2250      	movs	r2, #80	; 0x50
 8004fca:	5a9b      	ldrh	r3, [r3, r2]
 8004fcc:	b29b      	uxth	r3, r3
 8004fce:	001a      	movs	r2, r3
 8004fd0:	187b      	adds	r3, r7, r1
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	189b      	adds	r3, r3, r2
 8004fd6:	187a      	adds	r2, r7, r1
 8004fd8:	6013      	str	r3, [r2, #0]
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	781b      	ldrb	r3, [r3, #0]
 8004fde:	00da      	lsls	r2, r3, #3
 8004fe0:	187b      	adds	r3, r7, r1
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	18d3      	adds	r3, r2, r3
 8004fe6:	4ab9      	ldr	r2, [pc, #740]	; (80052cc <USB_EPStartXfer+0xe5c>)
 8004fe8:	4694      	mov	ip, r2
 8004fea:	4463      	add	r3, ip
 8004fec:	21a8      	movs	r1, #168	; 0xa8
 8004fee:	187a      	adds	r2, r7, r1
 8004ff0:	6013      	str	r3, [r2, #0]
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	691b      	ldr	r3, [r3, #16]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d114      	bne.n	8005024 <USB_EPStartXfer+0xbb4>
 8004ffa:	187b      	adds	r3, r7, r1
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	881b      	ldrh	r3, [r3, #0]
 8005000:	b29b      	uxth	r3, r3
 8005002:	4ab3      	ldr	r2, [pc, #716]	; (80052d0 <USB_EPStartXfer+0xe60>)
 8005004:	4013      	ands	r3, r2
 8005006:	b29a      	uxth	r2, r3
 8005008:	187b      	adds	r3, r7, r1
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	801a      	strh	r2, [r3, #0]
 800500e:	187b      	adds	r3, r7, r1
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	881b      	ldrh	r3, [r3, #0]
 8005014:	b29b      	uxth	r3, r3
 8005016:	4aac      	ldr	r2, [pc, #688]	; (80052c8 <USB_EPStartXfer+0xe58>)
 8005018:	4313      	orrs	r3, r2
 800501a:	b29a      	uxth	r2, r3
 800501c:	187b      	adds	r3, r7, r1
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	801a      	strh	r2, [r3, #0]
 8005022:	e060      	b.n	80050e6 <USB_EPStartXfer+0xc76>
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	691b      	ldr	r3, [r3, #16]
 8005028:	2b3e      	cmp	r3, #62	; 0x3e
 800502a:	d81a      	bhi.n	8005062 <USB_EPStartXfer+0xbf2>
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	691b      	ldr	r3, [r3, #16]
 8005030:	085b      	lsrs	r3, r3, #1
 8005032:	21e4      	movs	r1, #228	; 0xe4
 8005034:	187a      	adds	r2, r7, r1
 8005036:	6013      	str	r3, [r2, #0]
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	691b      	ldr	r3, [r3, #16]
 800503c:	2201      	movs	r2, #1
 800503e:	4013      	ands	r3, r2
 8005040:	d004      	beq.n	800504c <USB_EPStartXfer+0xbdc>
 8005042:	187b      	adds	r3, r7, r1
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	3301      	adds	r3, #1
 8005048:	187a      	adds	r2, r7, r1
 800504a:	6013      	str	r3, [r2, #0]
 800504c:	23e4      	movs	r3, #228	; 0xe4
 800504e:	18fb      	adds	r3, r7, r3
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	b29b      	uxth	r3, r3
 8005054:	029b      	lsls	r3, r3, #10
 8005056:	b29a      	uxth	r2, r3
 8005058:	23a8      	movs	r3, #168	; 0xa8
 800505a:	18fb      	adds	r3, r7, r3
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	801a      	strh	r2, [r3, #0]
 8005060:	e041      	b.n	80050e6 <USB_EPStartXfer+0xc76>
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	691b      	ldr	r3, [r3, #16]
 8005066:	095b      	lsrs	r3, r3, #5
 8005068:	21e4      	movs	r1, #228	; 0xe4
 800506a:	187a      	adds	r2, r7, r1
 800506c:	6013      	str	r3, [r2, #0]
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	691b      	ldr	r3, [r3, #16]
 8005072:	221f      	movs	r2, #31
 8005074:	4013      	ands	r3, r2
 8005076:	d104      	bne.n	8005082 <USB_EPStartXfer+0xc12>
 8005078:	187b      	adds	r3, r7, r1
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	3b01      	subs	r3, #1
 800507e:	187a      	adds	r2, r7, r1
 8005080:	6013      	str	r3, [r2, #0]
 8005082:	23e4      	movs	r3, #228	; 0xe4
 8005084:	18fb      	adds	r3, r7, r3
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	b29b      	uxth	r3, r3
 800508a:	029b      	lsls	r3, r3, #10
 800508c:	b29b      	uxth	r3, r3
 800508e:	4a8e      	ldr	r2, [pc, #568]	; (80052c8 <USB_EPStartXfer+0xe58>)
 8005090:	4313      	orrs	r3, r2
 8005092:	b29a      	uxth	r2, r3
 8005094:	23a8      	movs	r3, #168	; 0xa8
 8005096:	18fb      	adds	r3, r7, r3
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	801a      	strh	r2, [r3, #0]
 800509c:	e023      	b.n	80050e6 <USB_EPStartXfer+0xc76>
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	785b      	ldrb	r3, [r3, #1]
 80050a2:	2b01      	cmp	r3, #1
 80050a4:	d11f      	bne.n	80050e6 <USB_EPStartXfer+0xc76>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	21b4      	movs	r1, #180	; 0xb4
 80050aa:	187a      	adds	r2, r7, r1
 80050ac:	6013      	str	r3, [r2, #0]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2250      	movs	r2, #80	; 0x50
 80050b2:	5a9b      	ldrh	r3, [r3, r2]
 80050b4:	b29b      	uxth	r3, r3
 80050b6:	001a      	movs	r2, r3
 80050b8:	187b      	adds	r3, r7, r1
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	189b      	adds	r3, r3, r2
 80050be:	187a      	adds	r2, r7, r1
 80050c0:	6013      	str	r3, [r2, #0]
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	781b      	ldrb	r3, [r3, #0]
 80050c6:	00da      	lsls	r2, r3, #3
 80050c8:	187b      	adds	r3, r7, r1
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	18d3      	adds	r3, r2, r3
 80050ce:	4a7f      	ldr	r2, [pc, #508]	; (80052cc <USB_EPStartXfer+0xe5c>)
 80050d0:	4694      	mov	ip, r2
 80050d2:	4463      	add	r3, ip
 80050d4:	21b0      	movs	r1, #176	; 0xb0
 80050d6:	187a      	adds	r2, r7, r1
 80050d8:	6013      	str	r3, [r2, #0]
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	691b      	ldr	r3, [r3, #16]
 80050de:	b29a      	uxth	r2, r3
 80050e0:	187b      	adds	r3, r7, r1
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	801a      	strh	r2, [r3, #0]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	22a4      	movs	r2, #164	; 0xa4
 80050ea:	18ba      	adds	r2, r7, r2
 80050ec:	6013      	str	r3, [r2, #0]
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	785b      	ldrb	r3, [r3, #1]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d16f      	bne.n	80051d6 <USB_EPStartXfer+0xd66>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	219c      	movs	r1, #156	; 0x9c
 80050fa:	187a      	adds	r2, r7, r1
 80050fc:	6013      	str	r3, [r2, #0]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2250      	movs	r2, #80	; 0x50
 8005102:	5a9b      	ldrh	r3, [r3, r2]
 8005104:	b29b      	uxth	r3, r3
 8005106:	001a      	movs	r2, r3
 8005108:	187b      	adds	r3, r7, r1
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	189b      	adds	r3, r3, r2
 800510e:	187a      	adds	r2, r7, r1
 8005110:	6013      	str	r3, [r2, #0]
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	781b      	ldrb	r3, [r3, #0]
 8005116:	00da      	lsls	r2, r3, #3
 8005118:	187b      	adds	r3, r7, r1
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	18d3      	adds	r3, r2, r3
 800511e:	4a6d      	ldr	r2, [pc, #436]	; (80052d4 <USB_EPStartXfer+0xe64>)
 8005120:	4694      	mov	ip, r2
 8005122:	4463      	add	r3, ip
 8005124:	2198      	movs	r1, #152	; 0x98
 8005126:	187a      	adds	r2, r7, r1
 8005128:	6013      	str	r3, [r2, #0]
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	691b      	ldr	r3, [r3, #16]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d114      	bne.n	800515c <USB_EPStartXfer+0xcec>
 8005132:	187b      	adds	r3, r7, r1
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	881b      	ldrh	r3, [r3, #0]
 8005138:	b29b      	uxth	r3, r3
 800513a:	4a65      	ldr	r2, [pc, #404]	; (80052d0 <USB_EPStartXfer+0xe60>)
 800513c:	4013      	ands	r3, r2
 800513e:	b29a      	uxth	r2, r3
 8005140:	187b      	adds	r3, r7, r1
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	801a      	strh	r2, [r3, #0]
 8005146:	187b      	adds	r3, r7, r1
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	881b      	ldrh	r3, [r3, #0]
 800514c:	b29b      	uxth	r3, r3
 800514e:	4a5e      	ldr	r2, [pc, #376]	; (80052c8 <USB_EPStartXfer+0xe58>)
 8005150:	4313      	orrs	r3, r2
 8005152:	b29a      	uxth	r2, r3
 8005154:	187b      	adds	r3, r7, r1
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	801a      	strh	r2, [r3, #0]
 800515a:	e05d      	b.n	8005218 <USB_EPStartXfer+0xda8>
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	691b      	ldr	r3, [r3, #16]
 8005160:	2b3e      	cmp	r3, #62	; 0x3e
 8005162:	d81a      	bhi.n	800519a <USB_EPStartXfer+0xd2a>
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	691b      	ldr	r3, [r3, #16]
 8005168:	085b      	lsrs	r3, r3, #1
 800516a:	21e0      	movs	r1, #224	; 0xe0
 800516c:	187a      	adds	r2, r7, r1
 800516e:	6013      	str	r3, [r2, #0]
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	691b      	ldr	r3, [r3, #16]
 8005174:	2201      	movs	r2, #1
 8005176:	4013      	ands	r3, r2
 8005178:	d004      	beq.n	8005184 <USB_EPStartXfer+0xd14>
 800517a:	187b      	adds	r3, r7, r1
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	3301      	adds	r3, #1
 8005180:	187a      	adds	r2, r7, r1
 8005182:	6013      	str	r3, [r2, #0]
 8005184:	23e0      	movs	r3, #224	; 0xe0
 8005186:	18fb      	adds	r3, r7, r3
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	b29b      	uxth	r3, r3
 800518c:	029b      	lsls	r3, r3, #10
 800518e:	b29a      	uxth	r2, r3
 8005190:	2398      	movs	r3, #152	; 0x98
 8005192:	18fb      	adds	r3, r7, r3
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	801a      	strh	r2, [r3, #0]
 8005198:	e03e      	b.n	8005218 <USB_EPStartXfer+0xda8>
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	691b      	ldr	r3, [r3, #16]
 800519e:	095b      	lsrs	r3, r3, #5
 80051a0:	21e0      	movs	r1, #224	; 0xe0
 80051a2:	187a      	adds	r2, r7, r1
 80051a4:	6013      	str	r3, [r2, #0]
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	691b      	ldr	r3, [r3, #16]
 80051aa:	221f      	movs	r2, #31
 80051ac:	4013      	ands	r3, r2
 80051ae:	d104      	bne.n	80051ba <USB_EPStartXfer+0xd4a>
 80051b0:	187b      	adds	r3, r7, r1
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	3b01      	subs	r3, #1
 80051b6:	187a      	adds	r2, r7, r1
 80051b8:	6013      	str	r3, [r2, #0]
 80051ba:	23e0      	movs	r3, #224	; 0xe0
 80051bc:	18fb      	adds	r3, r7, r3
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	b29b      	uxth	r3, r3
 80051c2:	029b      	lsls	r3, r3, #10
 80051c4:	b29b      	uxth	r3, r3
 80051c6:	4a40      	ldr	r2, [pc, #256]	; (80052c8 <USB_EPStartXfer+0xe58>)
 80051c8:	4313      	orrs	r3, r2
 80051ca:	b29a      	uxth	r2, r3
 80051cc:	2398      	movs	r3, #152	; 0x98
 80051ce:	18fb      	adds	r3, r7, r3
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	801a      	strh	r2, [r3, #0]
 80051d4:	e020      	b.n	8005218 <USB_EPStartXfer+0xda8>
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	785b      	ldrb	r3, [r3, #1]
 80051da:	2b01      	cmp	r3, #1
 80051dc:	d11c      	bne.n	8005218 <USB_EPStartXfer+0xda8>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2250      	movs	r2, #80	; 0x50
 80051e2:	5a9b      	ldrh	r3, [r3, r2]
 80051e4:	b29b      	uxth	r3, r3
 80051e6:	001a      	movs	r2, r3
 80051e8:	21a4      	movs	r1, #164	; 0xa4
 80051ea:	187b      	adds	r3, r7, r1
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	189b      	adds	r3, r3, r2
 80051f0:	187a      	adds	r2, r7, r1
 80051f2:	6013      	str	r3, [r2, #0]
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	781b      	ldrb	r3, [r3, #0]
 80051f8:	00da      	lsls	r2, r3, #3
 80051fa:	187b      	adds	r3, r7, r1
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	18d3      	adds	r3, r2, r3
 8005200:	4a34      	ldr	r2, [pc, #208]	; (80052d4 <USB_EPStartXfer+0xe64>)
 8005202:	4694      	mov	ip, r2
 8005204:	4463      	add	r3, ip
 8005206:	21a0      	movs	r1, #160	; 0xa0
 8005208:	187a      	adds	r2, r7, r1
 800520a:	6013      	str	r3, [r2, #0]
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	691b      	ldr	r3, [r3, #16]
 8005210:	b29a      	uxth	r2, r3
 8005212:	187b      	adds	r3, r7, r1
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	69db      	ldr	r3, [r3, #28]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d100      	bne.n	8005222 <USB_EPStartXfer+0xdb2>
 8005220:	e1aa      	b.n	8005578 <USB_EPStartXfer+0x1108>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005222:	687a      	ldr	r2, [r7, #4]
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	781b      	ldrb	r3, [r3, #0]
 8005228:	009b      	lsls	r3, r3, #2
 800522a:	18d2      	adds	r2, r2, r3
 800522c:	2196      	movs	r1, #150	; 0x96
 800522e:	187b      	adds	r3, r7, r1
 8005230:	8812      	ldrh	r2, [r2, #0]
 8005232:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005234:	187b      	adds	r3, r7, r1
 8005236:	881a      	ldrh	r2, [r3, #0]
 8005238:	2380      	movs	r3, #128	; 0x80
 800523a:	01db      	lsls	r3, r3, #7
 800523c:	4013      	ands	r3, r2
 800523e:	d004      	beq.n	800524a <USB_EPStartXfer+0xdda>
 8005240:	187b      	adds	r3, r7, r1
 8005242:	881b      	ldrh	r3, [r3, #0]
 8005244:	2240      	movs	r2, #64	; 0x40
 8005246:	4013      	ands	r3, r2
 8005248:	d10d      	bne.n	8005266 <USB_EPStartXfer+0xdf6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800524a:	2196      	movs	r1, #150	; 0x96
 800524c:	187b      	adds	r3, r7, r1
 800524e:	881a      	ldrh	r2, [r3, #0]
 8005250:	2380      	movs	r3, #128	; 0x80
 8005252:	01db      	lsls	r3, r3, #7
 8005254:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005256:	d000      	beq.n	800525a <USB_EPStartXfer+0xdea>
 8005258:	e18e      	b.n	8005578 <USB_EPStartXfer+0x1108>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800525a:	187b      	adds	r3, r7, r1
 800525c:	881b      	ldrh	r3, [r3, #0]
 800525e:	2240      	movs	r2, #64	; 0x40
 8005260:	4013      	ands	r3, r2
 8005262:	d000      	beq.n	8005266 <USB_EPStartXfer+0xdf6>
 8005264:	e188      	b.n	8005578 <USB_EPStartXfer+0x1108>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8005266:	687a      	ldr	r2, [r7, #4]
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	781b      	ldrb	r3, [r3, #0]
 800526c:	009b      	lsls	r3, r3, #2
 800526e:	18d3      	adds	r3, r2, r3
 8005270:	881b      	ldrh	r3, [r3, #0]
 8005272:	b29a      	uxth	r2, r3
 8005274:	2094      	movs	r0, #148	; 0x94
 8005276:	183b      	adds	r3, r7, r0
 8005278:	4917      	ldr	r1, [pc, #92]	; (80052d8 <USB_EPStartXfer+0xe68>)
 800527a:	400a      	ands	r2, r1
 800527c:	801a      	strh	r2, [r3, #0]
 800527e:	687a      	ldr	r2, [r7, #4]
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	781b      	ldrb	r3, [r3, #0]
 8005284:	009b      	lsls	r3, r3, #2
 8005286:	18d3      	adds	r3, r2, r3
 8005288:	183a      	adds	r2, r7, r0
 800528a:	8812      	ldrh	r2, [r2, #0]
 800528c:	4913      	ldr	r1, [pc, #76]	; (80052dc <USB_EPStartXfer+0xe6c>)
 800528e:	430a      	orrs	r2, r1
 8005290:	b292      	uxth	r2, r2
 8005292:	801a      	strh	r2, [r3, #0]
 8005294:	e170      	b.n	8005578 <USB_EPStartXfer+0x1108>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	78db      	ldrb	r3, [r3, #3]
 800529a:	2b01      	cmp	r3, #1
 800529c:	d000      	beq.n	80052a0 <USB_EPStartXfer+0xe30>
 800529e:	e169      	b.n	8005574 <USB_EPStartXfer+0x1104>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	699a      	ldr	r2, [r3, #24]
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	691b      	ldr	r3, [r3, #16]
 80052a8:	429a      	cmp	r2, r3
 80052aa:	d919      	bls.n	80052e0 <USB_EPStartXfer+0xe70>
        {
          len = ep->maxpacket;
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	691b      	ldr	r3, [r3, #16]
 80052b0:	1d7a      	adds	r2, r7, #5
 80052b2:	32ff      	adds	r2, #255	; 0xff
 80052b4:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	699a      	ldr	r2, [r3, #24]
 80052ba:	1d7b      	adds	r3, r7, #5
 80052bc:	33ff      	adds	r3, #255	; 0xff
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	1ad2      	subs	r2, r2, r3
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	619a      	str	r2, [r3, #24]
 80052c6:	e013      	b.n	80052f0 <USB_EPStartXfer+0xe80>
 80052c8:	ffff8000 	.word	0xffff8000
 80052cc:	00000402 	.word	0x00000402
 80052d0:	ffff83ff 	.word	0xffff83ff
 80052d4:	00000406 	.word	0x00000406
 80052d8:	ffff8f8f 	.word	0xffff8f8f
 80052dc:	ffff80c0 	.word	0xffff80c0
        }
        else
        {
          len = ep->xfer_len;
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	699b      	ldr	r3, [r3, #24]
 80052e4:	1d7a      	adds	r2, r7, #5
 80052e6:	32ff      	adds	r2, #255	; 0xff
 80052e8:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	2200      	movs	r2, #0
 80052ee:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	785b      	ldrb	r3, [r3, #1]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d000      	beq.n	80052fa <USB_EPStartXfer+0xe8a>
 80052f8:	e075      	b.n	80053e6 <USB_EPStartXfer+0xf76>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	21cc      	movs	r1, #204	; 0xcc
 80052fe:	187a      	adds	r2, r7, r1
 8005300:	6013      	str	r3, [r2, #0]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2250      	movs	r2, #80	; 0x50
 8005306:	5a9b      	ldrh	r3, [r3, r2]
 8005308:	b29b      	uxth	r3, r3
 800530a:	001a      	movs	r2, r3
 800530c:	187b      	adds	r3, r7, r1
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	189b      	adds	r3, r3, r2
 8005312:	187a      	adds	r2, r7, r1
 8005314:	6013      	str	r3, [r2, #0]
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	781b      	ldrb	r3, [r3, #0]
 800531a:	00da      	lsls	r2, r3, #3
 800531c:	187b      	adds	r3, r7, r1
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	18d3      	adds	r3, r2, r3
 8005322:	4aaa      	ldr	r2, [pc, #680]	; (80055cc <USB_EPStartXfer+0x115c>)
 8005324:	4694      	mov	ip, r2
 8005326:	4463      	add	r3, ip
 8005328:	21c8      	movs	r1, #200	; 0xc8
 800532a:	187a      	adds	r2, r7, r1
 800532c:	6013      	str	r3, [r2, #0]
 800532e:	1d7b      	adds	r3, r7, #5
 8005330:	33ff      	adds	r3, #255	; 0xff
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d114      	bne.n	8005362 <USB_EPStartXfer+0xef2>
 8005338:	187b      	adds	r3, r7, r1
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	881b      	ldrh	r3, [r3, #0]
 800533e:	b29b      	uxth	r3, r3
 8005340:	4aa3      	ldr	r2, [pc, #652]	; (80055d0 <USB_EPStartXfer+0x1160>)
 8005342:	4013      	ands	r3, r2
 8005344:	b29a      	uxth	r2, r3
 8005346:	187b      	adds	r3, r7, r1
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	801a      	strh	r2, [r3, #0]
 800534c:	187b      	adds	r3, r7, r1
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	881b      	ldrh	r3, [r3, #0]
 8005352:	b29b      	uxth	r3, r3
 8005354:	4a9f      	ldr	r2, [pc, #636]	; (80055d4 <USB_EPStartXfer+0x1164>)
 8005356:	4313      	orrs	r3, r2
 8005358:	b29a      	uxth	r2, r3
 800535a:	187b      	adds	r3, r7, r1
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	801a      	strh	r2, [r3, #0]
 8005360:	e066      	b.n	8005430 <USB_EPStartXfer+0xfc0>
 8005362:	1d7b      	adds	r3, r7, #5
 8005364:	33ff      	adds	r3, #255	; 0xff
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	2b3e      	cmp	r3, #62	; 0x3e
 800536a:	d81c      	bhi.n	80053a6 <USB_EPStartXfer+0xf36>
 800536c:	1d7b      	adds	r3, r7, #5
 800536e:	33ff      	adds	r3, #255	; 0xff
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	085b      	lsrs	r3, r3, #1
 8005374:	21dc      	movs	r1, #220	; 0xdc
 8005376:	187a      	adds	r2, r7, r1
 8005378:	6013      	str	r3, [r2, #0]
 800537a:	1d7b      	adds	r3, r7, #5
 800537c:	33ff      	adds	r3, #255	; 0xff
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	2201      	movs	r2, #1
 8005382:	4013      	ands	r3, r2
 8005384:	d004      	beq.n	8005390 <USB_EPStartXfer+0xf20>
 8005386:	187b      	adds	r3, r7, r1
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	3301      	adds	r3, #1
 800538c:	187a      	adds	r2, r7, r1
 800538e:	6013      	str	r3, [r2, #0]
 8005390:	23dc      	movs	r3, #220	; 0xdc
 8005392:	18fb      	adds	r3, r7, r3
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	b29b      	uxth	r3, r3
 8005398:	029b      	lsls	r3, r3, #10
 800539a:	b29a      	uxth	r2, r3
 800539c:	23c8      	movs	r3, #200	; 0xc8
 800539e:	18fb      	adds	r3, r7, r3
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	801a      	strh	r2, [r3, #0]
 80053a4:	e044      	b.n	8005430 <USB_EPStartXfer+0xfc0>
 80053a6:	1d7b      	adds	r3, r7, #5
 80053a8:	33ff      	adds	r3, #255	; 0xff
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	095b      	lsrs	r3, r3, #5
 80053ae:	21dc      	movs	r1, #220	; 0xdc
 80053b0:	187a      	adds	r2, r7, r1
 80053b2:	6013      	str	r3, [r2, #0]
 80053b4:	1d7b      	adds	r3, r7, #5
 80053b6:	33ff      	adds	r3, #255	; 0xff
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	221f      	movs	r2, #31
 80053bc:	4013      	ands	r3, r2
 80053be:	d104      	bne.n	80053ca <USB_EPStartXfer+0xf5a>
 80053c0:	187b      	adds	r3, r7, r1
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	3b01      	subs	r3, #1
 80053c6:	187a      	adds	r2, r7, r1
 80053c8:	6013      	str	r3, [r2, #0]
 80053ca:	23dc      	movs	r3, #220	; 0xdc
 80053cc:	18fb      	adds	r3, r7, r3
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	b29b      	uxth	r3, r3
 80053d2:	029b      	lsls	r3, r3, #10
 80053d4:	b29b      	uxth	r3, r3
 80053d6:	4a7f      	ldr	r2, [pc, #508]	; (80055d4 <USB_EPStartXfer+0x1164>)
 80053d8:	4313      	orrs	r3, r2
 80053da:	b29a      	uxth	r2, r3
 80053dc:	23c8      	movs	r3, #200	; 0xc8
 80053de:	18fb      	adds	r3, r7, r3
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	801a      	strh	r2, [r3, #0]
 80053e4:	e024      	b.n	8005430 <USB_EPStartXfer+0xfc0>
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	785b      	ldrb	r3, [r3, #1]
 80053ea:	2b01      	cmp	r3, #1
 80053ec:	d120      	bne.n	8005430 <USB_EPStartXfer+0xfc0>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	21d4      	movs	r1, #212	; 0xd4
 80053f2:	187a      	adds	r2, r7, r1
 80053f4:	6013      	str	r3, [r2, #0]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2250      	movs	r2, #80	; 0x50
 80053fa:	5a9b      	ldrh	r3, [r3, r2]
 80053fc:	b29b      	uxth	r3, r3
 80053fe:	001a      	movs	r2, r3
 8005400:	187b      	adds	r3, r7, r1
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	189b      	adds	r3, r3, r2
 8005406:	187a      	adds	r2, r7, r1
 8005408:	6013      	str	r3, [r2, #0]
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	781b      	ldrb	r3, [r3, #0]
 800540e:	00da      	lsls	r2, r3, #3
 8005410:	187b      	adds	r3, r7, r1
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	18d3      	adds	r3, r2, r3
 8005416:	4a6d      	ldr	r2, [pc, #436]	; (80055cc <USB_EPStartXfer+0x115c>)
 8005418:	4694      	mov	ip, r2
 800541a:	4463      	add	r3, ip
 800541c:	21d0      	movs	r1, #208	; 0xd0
 800541e:	187a      	adds	r2, r7, r1
 8005420:	6013      	str	r3, [r2, #0]
 8005422:	1d7b      	adds	r3, r7, #5
 8005424:	33ff      	adds	r3, #255	; 0xff
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	b29a      	uxth	r2, r3
 800542a:	187b      	adds	r3, r7, r1
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	801a      	strh	r2, [r3, #0]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	22c4      	movs	r2, #196	; 0xc4
 8005434:	18ba      	adds	r2, r7, r2
 8005436:	6013      	str	r3, [r2, #0]
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	785b      	ldrb	r3, [r3, #1]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d000      	beq.n	8005442 <USB_EPStartXfer+0xfd2>
 8005440:	e075      	b.n	800552e <USB_EPStartXfer+0x10be>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	21bc      	movs	r1, #188	; 0xbc
 8005446:	187a      	adds	r2, r7, r1
 8005448:	6013      	str	r3, [r2, #0]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2250      	movs	r2, #80	; 0x50
 800544e:	5a9b      	ldrh	r3, [r3, r2]
 8005450:	b29b      	uxth	r3, r3
 8005452:	001a      	movs	r2, r3
 8005454:	187b      	adds	r3, r7, r1
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	189b      	adds	r3, r3, r2
 800545a:	187a      	adds	r2, r7, r1
 800545c:	6013      	str	r3, [r2, #0]
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	781b      	ldrb	r3, [r3, #0]
 8005462:	00da      	lsls	r2, r3, #3
 8005464:	187b      	adds	r3, r7, r1
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	18d3      	adds	r3, r2, r3
 800546a:	4a5b      	ldr	r2, [pc, #364]	; (80055d8 <USB_EPStartXfer+0x1168>)
 800546c:	4694      	mov	ip, r2
 800546e:	4463      	add	r3, ip
 8005470:	21b8      	movs	r1, #184	; 0xb8
 8005472:	187a      	adds	r2, r7, r1
 8005474:	6013      	str	r3, [r2, #0]
 8005476:	1d7b      	adds	r3, r7, #5
 8005478:	33ff      	adds	r3, #255	; 0xff
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d114      	bne.n	80054aa <USB_EPStartXfer+0x103a>
 8005480:	187b      	adds	r3, r7, r1
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	881b      	ldrh	r3, [r3, #0]
 8005486:	b29b      	uxth	r3, r3
 8005488:	4a51      	ldr	r2, [pc, #324]	; (80055d0 <USB_EPStartXfer+0x1160>)
 800548a:	4013      	ands	r3, r2
 800548c:	b29a      	uxth	r2, r3
 800548e:	187b      	adds	r3, r7, r1
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	801a      	strh	r2, [r3, #0]
 8005494:	187b      	adds	r3, r7, r1
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	881b      	ldrh	r3, [r3, #0]
 800549a:	b29b      	uxth	r3, r3
 800549c:	4a4d      	ldr	r2, [pc, #308]	; (80055d4 <USB_EPStartXfer+0x1164>)
 800549e:	4313      	orrs	r3, r2
 80054a0:	b29a      	uxth	r2, r3
 80054a2:	187b      	adds	r3, r7, r1
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	801a      	strh	r2, [r3, #0]
 80054a8:	e066      	b.n	8005578 <USB_EPStartXfer+0x1108>
 80054aa:	1d7b      	adds	r3, r7, #5
 80054ac:	33ff      	adds	r3, #255	; 0xff
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	2b3e      	cmp	r3, #62	; 0x3e
 80054b2:	d81c      	bhi.n	80054ee <USB_EPStartXfer+0x107e>
 80054b4:	1d7b      	adds	r3, r7, #5
 80054b6:	33ff      	adds	r3, #255	; 0xff
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	085b      	lsrs	r3, r3, #1
 80054bc:	21d8      	movs	r1, #216	; 0xd8
 80054be:	187a      	adds	r2, r7, r1
 80054c0:	6013      	str	r3, [r2, #0]
 80054c2:	1d7b      	adds	r3, r7, #5
 80054c4:	33ff      	adds	r3, #255	; 0xff
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	2201      	movs	r2, #1
 80054ca:	4013      	ands	r3, r2
 80054cc:	d004      	beq.n	80054d8 <USB_EPStartXfer+0x1068>
 80054ce:	187b      	adds	r3, r7, r1
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	3301      	adds	r3, #1
 80054d4:	187a      	adds	r2, r7, r1
 80054d6:	6013      	str	r3, [r2, #0]
 80054d8:	23d8      	movs	r3, #216	; 0xd8
 80054da:	18fb      	adds	r3, r7, r3
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	b29b      	uxth	r3, r3
 80054e0:	029b      	lsls	r3, r3, #10
 80054e2:	b29a      	uxth	r2, r3
 80054e4:	23b8      	movs	r3, #184	; 0xb8
 80054e6:	18fb      	adds	r3, r7, r3
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	801a      	strh	r2, [r3, #0]
 80054ec:	e044      	b.n	8005578 <USB_EPStartXfer+0x1108>
 80054ee:	1d7b      	adds	r3, r7, #5
 80054f0:	33ff      	adds	r3, #255	; 0xff
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	095b      	lsrs	r3, r3, #5
 80054f6:	21d8      	movs	r1, #216	; 0xd8
 80054f8:	187a      	adds	r2, r7, r1
 80054fa:	6013      	str	r3, [r2, #0]
 80054fc:	1d7b      	adds	r3, r7, #5
 80054fe:	33ff      	adds	r3, #255	; 0xff
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	221f      	movs	r2, #31
 8005504:	4013      	ands	r3, r2
 8005506:	d104      	bne.n	8005512 <USB_EPStartXfer+0x10a2>
 8005508:	187b      	adds	r3, r7, r1
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	3b01      	subs	r3, #1
 800550e:	187a      	adds	r2, r7, r1
 8005510:	6013      	str	r3, [r2, #0]
 8005512:	23d8      	movs	r3, #216	; 0xd8
 8005514:	18fb      	adds	r3, r7, r3
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	b29b      	uxth	r3, r3
 800551a:	029b      	lsls	r3, r3, #10
 800551c:	b29b      	uxth	r3, r3
 800551e:	4a2d      	ldr	r2, [pc, #180]	; (80055d4 <USB_EPStartXfer+0x1164>)
 8005520:	4313      	orrs	r3, r2
 8005522:	b29a      	uxth	r2, r3
 8005524:	23b8      	movs	r3, #184	; 0xb8
 8005526:	18fb      	adds	r3, r7, r3
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	801a      	strh	r2, [r3, #0]
 800552c:	e024      	b.n	8005578 <USB_EPStartXfer+0x1108>
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	785b      	ldrb	r3, [r3, #1]
 8005532:	2b01      	cmp	r3, #1
 8005534:	d120      	bne.n	8005578 <USB_EPStartXfer+0x1108>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2250      	movs	r2, #80	; 0x50
 800553a:	5a9b      	ldrh	r3, [r3, r2]
 800553c:	b29b      	uxth	r3, r3
 800553e:	001a      	movs	r2, r3
 8005540:	21c4      	movs	r1, #196	; 0xc4
 8005542:	187b      	adds	r3, r7, r1
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	189b      	adds	r3, r3, r2
 8005548:	187a      	adds	r2, r7, r1
 800554a:	6013      	str	r3, [r2, #0]
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	781b      	ldrb	r3, [r3, #0]
 8005550:	00da      	lsls	r2, r3, #3
 8005552:	187b      	adds	r3, r7, r1
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	18d3      	adds	r3, r2, r3
 8005558:	4a1f      	ldr	r2, [pc, #124]	; (80055d8 <USB_EPStartXfer+0x1168>)
 800555a:	4694      	mov	ip, r2
 800555c:	4463      	add	r3, ip
 800555e:	21c0      	movs	r1, #192	; 0xc0
 8005560:	187a      	adds	r2, r7, r1
 8005562:	6013      	str	r3, [r2, #0]
 8005564:	1d7b      	adds	r3, r7, #5
 8005566:	33ff      	adds	r3, #255	; 0xff
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	b29a      	uxth	r2, r3
 800556c:	187b      	adds	r3, r7, r1
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	801a      	strh	r2, [r3, #0]
 8005572:	e001      	b.n	8005578 <USB_EPStartXfer+0x1108>
      }
      else
      {
        return HAL_ERROR;
 8005574:	2301      	movs	r3, #1
 8005576:	e025      	b.n	80055c4 <USB_EPStartXfer+0x1154>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005578:	687a      	ldr	r2, [r7, #4]
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	781b      	ldrb	r3, [r3, #0]
 800557e:	009b      	lsls	r3, r3, #2
 8005580:	18d3      	adds	r3, r2, r3
 8005582:	881b      	ldrh	r3, [r3, #0]
 8005584:	b29a      	uxth	r2, r3
 8005586:	208a      	movs	r0, #138	; 0x8a
 8005588:	183b      	adds	r3, r7, r0
 800558a:	4914      	ldr	r1, [pc, #80]	; (80055dc <USB_EPStartXfer+0x116c>)
 800558c:	400a      	ands	r2, r1
 800558e:	801a      	strh	r2, [r3, #0]
 8005590:	183b      	adds	r3, r7, r0
 8005592:	183a      	adds	r2, r7, r0
 8005594:	8812      	ldrh	r2, [r2, #0]
 8005596:	2180      	movs	r1, #128	; 0x80
 8005598:	0149      	lsls	r1, r1, #5
 800559a:	404a      	eors	r2, r1
 800559c:	801a      	strh	r2, [r3, #0]
 800559e:	183b      	adds	r3, r7, r0
 80055a0:	183a      	adds	r2, r7, r0
 80055a2:	8812      	ldrh	r2, [r2, #0]
 80055a4:	2180      	movs	r1, #128	; 0x80
 80055a6:	0189      	lsls	r1, r1, #6
 80055a8:	404a      	eors	r2, r1
 80055aa:	801a      	strh	r2, [r3, #0]
 80055ac:	687a      	ldr	r2, [r7, #4]
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	781b      	ldrb	r3, [r3, #0]
 80055b2:	009b      	lsls	r3, r3, #2
 80055b4:	18d3      	adds	r3, r2, r3
 80055b6:	183a      	adds	r2, r7, r0
 80055b8:	8812      	ldrh	r2, [r2, #0]
 80055ba:	4909      	ldr	r1, [pc, #36]	; (80055e0 <USB_EPStartXfer+0x1170>)
 80055bc:	430a      	orrs	r2, r1
 80055be:	b292      	uxth	r2, r2
 80055c0:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 80055c2:	2300      	movs	r3, #0
}
 80055c4:	0018      	movs	r0, r3
 80055c6:	46bd      	mov	sp, r7
 80055c8:	b043      	add	sp, #268	; 0x10c
 80055ca:	bd90      	pop	{r4, r7, pc}
 80055cc:	00000402 	.word	0x00000402
 80055d0:	ffff83ff 	.word	0xffff83ff
 80055d4:	ffff8000 	.word	0xffff8000
 80055d8:	00000406 	.word	0x00000406
 80055dc:	ffffbf8f 	.word	0xffffbf8f
 80055e0:	ffff8080 	.word	0xffff8080

080055e4 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b084      	sub	sp, #16
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
 80055ec:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	785b      	ldrb	r3, [r3, #1]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d01d      	beq.n	8005632 <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80055f6:	687a      	ldr	r2, [r7, #4]
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	781b      	ldrb	r3, [r3, #0]
 80055fc:	009b      	lsls	r3, r3, #2
 80055fe:	18d3      	adds	r3, r2, r3
 8005600:	881b      	ldrh	r3, [r3, #0]
 8005602:	b29a      	uxth	r2, r3
 8005604:	200c      	movs	r0, #12
 8005606:	183b      	adds	r3, r7, r0
 8005608:	491b      	ldr	r1, [pc, #108]	; (8005678 <USB_EPSetStall+0x94>)
 800560a:	400a      	ands	r2, r1
 800560c:	801a      	strh	r2, [r3, #0]
 800560e:	183b      	adds	r3, r7, r0
 8005610:	183a      	adds	r2, r7, r0
 8005612:	8812      	ldrh	r2, [r2, #0]
 8005614:	2110      	movs	r1, #16
 8005616:	404a      	eors	r2, r1
 8005618:	801a      	strh	r2, [r3, #0]
 800561a:	687a      	ldr	r2, [r7, #4]
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	781b      	ldrb	r3, [r3, #0]
 8005620:	009b      	lsls	r3, r3, #2
 8005622:	18d3      	adds	r3, r2, r3
 8005624:	183a      	adds	r2, r7, r0
 8005626:	8812      	ldrh	r2, [r2, #0]
 8005628:	4914      	ldr	r1, [pc, #80]	; (800567c <USB_EPSetStall+0x98>)
 800562a:	430a      	orrs	r2, r1
 800562c:	b292      	uxth	r2, r2
 800562e:	801a      	strh	r2, [r3, #0]
 8005630:	e01d      	b.n	800566e <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005632:	687a      	ldr	r2, [r7, #4]
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	781b      	ldrb	r3, [r3, #0]
 8005638:	009b      	lsls	r3, r3, #2
 800563a:	18d3      	adds	r3, r2, r3
 800563c:	881b      	ldrh	r3, [r3, #0]
 800563e:	b29a      	uxth	r2, r3
 8005640:	200e      	movs	r0, #14
 8005642:	183b      	adds	r3, r7, r0
 8005644:	490e      	ldr	r1, [pc, #56]	; (8005680 <USB_EPSetStall+0x9c>)
 8005646:	400a      	ands	r2, r1
 8005648:	801a      	strh	r2, [r3, #0]
 800564a:	183b      	adds	r3, r7, r0
 800564c:	183a      	adds	r2, r7, r0
 800564e:	8812      	ldrh	r2, [r2, #0]
 8005650:	2180      	movs	r1, #128	; 0x80
 8005652:	0149      	lsls	r1, r1, #5
 8005654:	404a      	eors	r2, r1
 8005656:	801a      	strh	r2, [r3, #0]
 8005658:	687a      	ldr	r2, [r7, #4]
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	781b      	ldrb	r3, [r3, #0]
 800565e:	009b      	lsls	r3, r3, #2
 8005660:	18d3      	adds	r3, r2, r3
 8005662:	183a      	adds	r2, r7, r0
 8005664:	8812      	ldrh	r2, [r2, #0]
 8005666:	4905      	ldr	r1, [pc, #20]	; (800567c <USB_EPSetStall+0x98>)
 8005668:	430a      	orrs	r2, r1
 800566a:	b292      	uxth	r2, r2
 800566c:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 800566e:	2300      	movs	r3, #0
}
 8005670:	0018      	movs	r0, r3
 8005672:	46bd      	mov	sp, r7
 8005674:	b004      	add	sp, #16
 8005676:	bd80      	pop	{r7, pc}
 8005678:	ffff8fbf 	.word	0xffff8fbf
 800567c:	ffff8080 	.word	0xffff8080
 8005680:	ffffbf8f 	.word	0xffffbf8f

08005684 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b086      	sub	sp, #24
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
 800568c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	7b1b      	ldrb	r3, [r3, #12]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d000      	beq.n	8005698 <USB_EPClearStall+0x14>
 8005696:	e095      	b.n	80057c4 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	785b      	ldrb	r3, [r3, #1]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d046      	beq.n	800572e <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80056a0:	687a      	ldr	r2, [r7, #4]
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	781b      	ldrb	r3, [r3, #0]
 80056a6:	009b      	lsls	r3, r3, #2
 80056a8:	18d2      	adds	r2, r2, r3
 80056aa:	2110      	movs	r1, #16
 80056ac:	187b      	adds	r3, r7, r1
 80056ae:	8812      	ldrh	r2, [r2, #0]
 80056b0:	801a      	strh	r2, [r3, #0]
 80056b2:	187b      	adds	r3, r7, r1
 80056b4:	881b      	ldrh	r3, [r3, #0]
 80056b6:	2240      	movs	r2, #64	; 0x40
 80056b8:	4013      	ands	r3, r2
 80056ba:	d016      	beq.n	80056ea <USB_EPClearStall+0x66>
 80056bc:	687a      	ldr	r2, [r7, #4]
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	781b      	ldrb	r3, [r3, #0]
 80056c2:	009b      	lsls	r3, r3, #2
 80056c4:	18d3      	adds	r3, r2, r3
 80056c6:	881b      	ldrh	r3, [r3, #0]
 80056c8:	b29a      	uxth	r2, r3
 80056ca:	200e      	movs	r0, #14
 80056cc:	183b      	adds	r3, r7, r0
 80056ce:	4940      	ldr	r1, [pc, #256]	; (80057d0 <USB_EPClearStall+0x14c>)
 80056d0:	400a      	ands	r2, r1
 80056d2:	801a      	strh	r2, [r3, #0]
 80056d4:	687a      	ldr	r2, [r7, #4]
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	781b      	ldrb	r3, [r3, #0]
 80056da:	009b      	lsls	r3, r3, #2
 80056dc:	18d3      	adds	r3, r2, r3
 80056de:	183a      	adds	r2, r7, r0
 80056e0:	8812      	ldrh	r2, [r2, #0]
 80056e2:	493c      	ldr	r1, [pc, #240]	; (80057d4 <USB_EPClearStall+0x150>)
 80056e4:	430a      	orrs	r2, r1
 80056e6:	b292      	uxth	r2, r2
 80056e8:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	78db      	ldrb	r3, [r3, #3]
 80056ee:	2b01      	cmp	r3, #1
 80056f0:	d068      	beq.n	80057c4 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80056f2:	687a      	ldr	r2, [r7, #4]
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	781b      	ldrb	r3, [r3, #0]
 80056f8:	009b      	lsls	r3, r3, #2
 80056fa:	18d3      	adds	r3, r2, r3
 80056fc:	881b      	ldrh	r3, [r3, #0]
 80056fe:	b29a      	uxth	r2, r3
 8005700:	200c      	movs	r0, #12
 8005702:	183b      	adds	r3, r7, r0
 8005704:	4934      	ldr	r1, [pc, #208]	; (80057d8 <USB_EPClearStall+0x154>)
 8005706:	400a      	ands	r2, r1
 8005708:	801a      	strh	r2, [r3, #0]
 800570a:	183b      	adds	r3, r7, r0
 800570c:	183a      	adds	r2, r7, r0
 800570e:	8812      	ldrh	r2, [r2, #0]
 8005710:	2120      	movs	r1, #32
 8005712:	404a      	eors	r2, r1
 8005714:	801a      	strh	r2, [r3, #0]
 8005716:	687a      	ldr	r2, [r7, #4]
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	781b      	ldrb	r3, [r3, #0]
 800571c:	009b      	lsls	r3, r3, #2
 800571e:	18d3      	adds	r3, r2, r3
 8005720:	183a      	adds	r2, r7, r0
 8005722:	8812      	ldrh	r2, [r2, #0]
 8005724:	492d      	ldr	r1, [pc, #180]	; (80057dc <USB_EPClearStall+0x158>)
 8005726:	430a      	orrs	r2, r1
 8005728:	b292      	uxth	r2, r2
 800572a:	801a      	strh	r2, [r3, #0]
 800572c:	e04a      	b.n	80057c4 <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800572e:	687a      	ldr	r2, [r7, #4]
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	781b      	ldrb	r3, [r3, #0]
 8005734:	009b      	lsls	r3, r3, #2
 8005736:	18d2      	adds	r2, r2, r3
 8005738:	2116      	movs	r1, #22
 800573a:	187b      	adds	r3, r7, r1
 800573c:	8812      	ldrh	r2, [r2, #0]
 800573e:	801a      	strh	r2, [r3, #0]
 8005740:	187b      	adds	r3, r7, r1
 8005742:	881a      	ldrh	r2, [r3, #0]
 8005744:	2380      	movs	r3, #128	; 0x80
 8005746:	01db      	lsls	r3, r3, #7
 8005748:	4013      	ands	r3, r2
 800574a:	d016      	beq.n	800577a <USB_EPClearStall+0xf6>
 800574c:	687a      	ldr	r2, [r7, #4]
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	781b      	ldrb	r3, [r3, #0]
 8005752:	009b      	lsls	r3, r3, #2
 8005754:	18d3      	adds	r3, r2, r3
 8005756:	881b      	ldrh	r3, [r3, #0]
 8005758:	b29a      	uxth	r2, r3
 800575a:	2014      	movs	r0, #20
 800575c:	183b      	adds	r3, r7, r0
 800575e:	491c      	ldr	r1, [pc, #112]	; (80057d0 <USB_EPClearStall+0x14c>)
 8005760:	400a      	ands	r2, r1
 8005762:	801a      	strh	r2, [r3, #0]
 8005764:	687a      	ldr	r2, [r7, #4]
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	781b      	ldrb	r3, [r3, #0]
 800576a:	009b      	lsls	r3, r3, #2
 800576c:	18d3      	adds	r3, r2, r3
 800576e:	183a      	adds	r2, r7, r0
 8005770:	8812      	ldrh	r2, [r2, #0]
 8005772:	491b      	ldr	r1, [pc, #108]	; (80057e0 <USB_EPClearStall+0x15c>)
 8005774:	430a      	orrs	r2, r1
 8005776:	b292      	uxth	r2, r2
 8005778:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800577a:	687a      	ldr	r2, [r7, #4]
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	781b      	ldrb	r3, [r3, #0]
 8005780:	009b      	lsls	r3, r3, #2
 8005782:	18d3      	adds	r3, r2, r3
 8005784:	881b      	ldrh	r3, [r3, #0]
 8005786:	b29a      	uxth	r2, r3
 8005788:	2012      	movs	r0, #18
 800578a:	183b      	adds	r3, r7, r0
 800578c:	4915      	ldr	r1, [pc, #84]	; (80057e4 <USB_EPClearStall+0x160>)
 800578e:	400a      	ands	r2, r1
 8005790:	801a      	strh	r2, [r3, #0]
 8005792:	183b      	adds	r3, r7, r0
 8005794:	183a      	adds	r2, r7, r0
 8005796:	8812      	ldrh	r2, [r2, #0]
 8005798:	2180      	movs	r1, #128	; 0x80
 800579a:	0149      	lsls	r1, r1, #5
 800579c:	404a      	eors	r2, r1
 800579e:	801a      	strh	r2, [r3, #0]
 80057a0:	183b      	adds	r3, r7, r0
 80057a2:	183a      	adds	r2, r7, r0
 80057a4:	8812      	ldrh	r2, [r2, #0]
 80057a6:	2180      	movs	r1, #128	; 0x80
 80057a8:	0189      	lsls	r1, r1, #6
 80057aa:	404a      	eors	r2, r1
 80057ac:	801a      	strh	r2, [r3, #0]
 80057ae:	687a      	ldr	r2, [r7, #4]
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	781b      	ldrb	r3, [r3, #0]
 80057b4:	009b      	lsls	r3, r3, #2
 80057b6:	18d3      	adds	r3, r2, r3
 80057b8:	183a      	adds	r2, r7, r0
 80057ba:	8812      	ldrh	r2, [r2, #0]
 80057bc:	4907      	ldr	r1, [pc, #28]	; (80057dc <USB_EPClearStall+0x158>)
 80057be:	430a      	orrs	r2, r1
 80057c0:	b292      	uxth	r2, r2
 80057c2:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 80057c4:	2300      	movs	r3, #0
}
 80057c6:	0018      	movs	r0, r3
 80057c8:	46bd      	mov	sp, r7
 80057ca:	b006      	add	sp, #24
 80057cc:	bd80      	pop	{r7, pc}
 80057ce:	46c0      	nop			; (mov r8, r8)
 80057d0:	ffff8f8f 	.word	0xffff8f8f
 80057d4:	ffff80c0 	.word	0xffff80c0
 80057d8:	ffff8fbf 	.word	0xffff8fbf
 80057dc:	ffff8080 	.word	0xffff8080
 80057e0:	ffffc080 	.word	0xffffc080
 80057e4:	ffffbf8f 	.word	0xffffbf8f

080057e8 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b082      	sub	sp, #8
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
 80057f0:	000a      	movs	r2, r1
 80057f2:	1cfb      	adds	r3, r7, #3
 80057f4:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 80057f6:	1cfb      	adds	r3, r7, #3
 80057f8:	781b      	ldrb	r3, [r3, #0]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d103      	bne.n	8005806 <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	224c      	movs	r2, #76	; 0x4c
 8005802:	2180      	movs	r1, #128	; 0x80
 8005804:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 8005806:	2300      	movs	r3, #0
}
 8005808:	0018      	movs	r0, r3
 800580a:	46bd      	mov	sp, r7
 800580c:	b002      	add	sp, #8
 800580e:	bd80      	pop	{r7, pc}

08005810 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b082      	sub	sp, #8
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2258      	movs	r2, #88	; 0x58
 800581c:	5a9b      	ldrh	r3, [r3, r2]
 800581e:	b29b      	uxth	r3, r3
 8005820:	4a05      	ldr	r2, [pc, #20]	; (8005838 <USB_DevConnect+0x28>)
 8005822:	4313      	orrs	r3, r2
 8005824:	b299      	uxth	r1, r3
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2258      	movs	r2, #88	; 0x58
 800582a:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800582c:	2300      	movs	r3, #0
}
 800582e:	0018      	movs	r0, r3
 8005830:	46bd      	mov	sp, r7
 8005832:	b002      	add	sp, #8
 8005834:	bd80      	pop	{r7, pc}
 8005836:	46c0      	nop			; (mov r8, r8)
 8005838:	ffff8000 	.word	0xffff8000

0800583c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b084      	sub	sp, #16
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2244      	movs	r2, #68	; 0x44
 8005848:	5a9b      	ldrh	r3, [r3, r2]
 800584a:	b29b      	uxth	r3, r3
 800584c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800584e:	68fb      	ldr	r3, [r7, #12]
}
 8005850:	0018      	movs	r0, r3
 8005852:	46bd      	mov	sp, r7
 8005854:	b004      	add	sp, #16
 8005856:	bd80      	pop	{r7, pc}

08005858 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b08c      	sub	sp, #48	; 0x30
 800585c:	af00      	add	r7, sp, #0
 800585e:	60f8      	str	r0, [r7, #12]
 8005860:	60b9      	str	r1, [r7, #8]
 8005862:	0019      	movs	r1, r3
 8005864:	1dbb      	adds	r3, r7, #6
 8005866:	801a      	strh	r2, [r3, #0]
 8005868:	1d3b      	adds	r3, r7, #4
 800586a:	1c0a      	adds	r2, r1, #0
 800586c:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800586e:	1d3b      	adds	r3, r7, #4
 8005870:	881b      	ldrh	r3, [r3, #0]
 8005872:	3301      	adds	r3, #1
 8005874:	085b      	lsrs	r3, r3, #1
 8005876:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005880:	1dbb      	adds	r3, r7, #6
 8005882:	881a      	ldrh	r2, [r3, #0]
 8005884:	69fb      	ldr	r3, [r7, #28]
 8005886:	18d3      	adds	r3, r2, r3
 8005888:	2280      	movs	r2, #128	; 0x80
 800588a:	00d2      	lsls	r2, r2, #3
 800588c:	4694      	mov	ip, r2
 800588e:	4463      	add	r3, ip
 8005890:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8005892:	6a3b      	ldr	r3, [r7, #32]
 8005894:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005896:	e01b      	b.n	80058d0 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8005898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800589a:	781b      	ldrb	r3, [r3, #0]
 800589c:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800589e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a0:	3301      	adds	r3, #1
 80058a2:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80058a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a6:	781b      	ldrb	r3, [r3, #0]
 80058a8:	b29b      	uxth	r3, r3
 80058aa:	021b      	lsls	r3, r3, #8
 80058ac:	b29b      	uxth	r3, r3
 80058ae:	001a      	movs	r2, r3
 80058b0:	69bb      	ldr	r3, [r7, #24]
 80058b2:	4313      	orrs	r3, r2
 80058b4:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	b29a      	uxth	r2, r3
 80058ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058bc:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80058be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058c0:	3302      	adds	r3, #2
 80058c2:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 80058c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c6:	3301      	adds	r3, #1
 80058c8:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80058ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058cc:	3b01      	subs	r3, #1
 80058ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d1e0      	bne.n	8005898 <USB_WritePMA+0x40>
  }
}
 80058d6:	46c0      	nop			; (mov r8, r8)
 80058d8:	46c0      	nop			; (mov r8, r8)
 80058da:	46bd      	mov	sp, r7
 80058dc:	b00c      	add	sp, #48	; 0x30
 80058de:	bd80      	pop	{r7, pc}

080058e0 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b08a      	sub	sp, #40	; 0x28
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	60f8      	str	r0, [r7, #12]
 80058e8:	60b9      	str	r1, [r7, #8]
 80058ea:	0019      	movs	r1, r3
 80058ec:	1dbb      	adds	r3, r7, #6
 80058ee:	801a      	strh	r2, [r3, #0]
 80058f0:	1d3b      	adds	r3, r7, #4
 80058f2:	1c0a      	adds	r2, r1, #0
 80058f4:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80058f6:	1d3b      	adds	r3, r7, #4
 80058f8:	881b      	ldrh	r3, [r3, #0]
 80058fa:	085b      	lsrs	r3, r3, #1
 80058fc:	b29b      	uxth	r3, r3
 80058fe:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005908:	1dbb      	adds	r3, r7, #6
 800590a:	881a      	ldrh	r2, [r3, #0]
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	18d3      	adds	r3, r2, r3
 8005910:	2280      	movs	r2, #128	; 0x80
 8005912:	00d2      	lsls	r2, r2, #3
 8005914:	4694      	mov	ip, r2
 8005916:	4463      	add	r3, ip
 8005918:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800591a:	69bb      	ldr	r3, [r7, #24]
 800591c:	627b      	str	r3, [r7, #36]	; 0x24
 800591e:	e018      	b.n	8005952 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8005920:	6a3b      	ldr	r3, [r7, #32]
 8005922:	881b      	ldrh	r3, [r3, #0]
 8005924:	b29b      	uxth	r3, r3
 8005926:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8005928:	6a3b      	ldr	r3, [r7, #32]
 800592a:	3302      	adds	r3, #2
 800592c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	b2da      	uxtb	r2, r3
 8005932:	69fb      	ldr	r3, [r7, #28]
 8005934:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005936:	69fb      	ldr	r3, [r7, #28]
 8005938:	3301      	adds	r3, #1
 800593a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	0a1b      	lsrs	r3, r3, #8
 8005940:	b2da      	uxtb	r2, r3
 8005942:	69fb      	ldr	r3, [r7, #28]
 8005944:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005946:	69fb      	ldr	r3, [r7, #28]
 8005948:	3301      	adds	r3, #1
 800594a:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 800594c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800594e:	3b01      	subs	r3, #1
 8005950:	627b      	str	r3, [r7, #36]	; 0x24
 8005952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005954:	2b00      	cmp	r3, #0
 8005956:	d1e3      	bne.n	8005920 <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8005958:	1d3b      	adds	r3, r7, #4
 800595a:	881b      	ldrh	r3, [r3, #0]
 800595c:	2201      	movs	r2, #1
 800595e:	4013      	ands	r3, r2
 8005960:	b29b      	uxth	r3, r3
 8005962:	2b00      	cmp	r3, #0
 8005964:	d007      	beq.n	8005976 <USB_ReadPMA+0x96>
  {
    temp = *pdwVal;
 8005966:	6a3b      	ldr	r3, [r7, #32]
 8005968:	881b      	ldrh	r3, [r3, #0]
 800596a:	b29b      	uxth	r3, r3
 800596c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	b2da      	uxtb	r2, r3
 8005972:	69fb      	ldr	r3, [r7, #28]
 8005974:	701a      	strb	r2, [r3, #0]
  }
}
 8005976:	46c0      	nop			; (mov r8, r8)
 8005978:	46bd      	mov	sp, r7
 800597a:	b00a      	add	sp, #40	; 0x28
 800597c:	bd80      	pop	{r7, pc}

0800597e <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800597e:	b580      	push	{r7, lr}
 8005980:	b082      	sub	sp, #8
 8005982:	af00      	add	r7, sp, #0
 8005984:	6078      	str	r0, [r7, #4]
 8005986:	000a      	movs	r2, r1
 8005988:	1cfb      	adds	r3, r7, #3
 800598a:	701a      	strb	r2, [r3, #0]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	2304      	movs	r3, #4
 8005990:	2203      	movs	r2, #3
 8005992:	2181      	movs	r1, #129	; 0x81
 8005994:	f001 fe61 	bl	800765a <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2201      	movs	r2, #1
 800599c:	62da      	str	r2, [r3, #44]	; 0x2c

  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 800599e:	2010      	movs	r0, #16
 80059a0:	f001 ffde 	bl	8007960 <USBD_static_malloc>
 80059a4:	0001      	movs	r1, r0
 80059a6:	687a      	ldr	r2, [r7, #4]
 80059a8:	23ae      	movs	r3, #174	; 0xae
 80059aa:	009b      	lsls	r3, r3, #2
 80059ac:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 80059ae:	687a      	ldr	r2, [r7, #4]
 80059b0:	23ae      	movs	r3, #174	; 0xae
 80059b2:	009b      	lsls	r3, r3, #2
 80059b4:	58d3      	ldr	r3, [r2, r3]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d101      	bne.n	80059be <USBD_HID_Init+0x40>
  {
    return USBD_FAIL;
 80059ba:	2302      	movs	r3, #2
 80059bc:	e006      	b.n	80059cc <USBD_HID_Init+0x4e>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 80059be:	687a      	ldr	r2, [r7, #4]
 80059c0:	23ae      	movs	r3, #174	; 0xae
 80059c2:	009b      	lsls	r3, r3, #2
 80059c4:	58d3      	ldr	r3, [r2, r3]
 80059c6:	2200      	movs	r2, #0
 80059c8:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 80059ca:	2300      	movs	r3, #0
}
 80059cc:	0018      	movs	r0, r3
 80059ce:	46bd      	mov	sp, r7
 80059d0:	b002      	add	sp, #8
 80059d2:	bd80      	pop	{r7, pc}

080059d4 <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b082      	sub	sp, #8
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
 80059dc:	000a      	movs	r2, r1
 80059de:	1cfb      	adds	r3, r7, #3
 80059e0:	701a      	strb	r2, [r3, #0]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2181      	movs	r1, #129	; 0x81
 80059e6:	0018      	movs	r0, r3
 80059e8:	f001 fe6e 	bl	80076c8 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2200      	movs	r2, #0
 80059f0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 80059f2:	687a      	ldr	r2, [r7, #4]
 80059f4:	23ae      	movs	r3, #174	; 0xae
 80059f6:	009b      	lsls	r3, r3, #2
 80059f8:	58d3      	ldr	r3, [r2, r3]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d00b      	beq.n	8005a16 <USBD_HID_DeInit+0x42>
  {
    USBD_free(pdev->pClassData);
 80059fe:	687a      	ldr	r2, [r7, #4]
 8005a00:	23ae      	movs	r3, #174	; 0xae
 8005a02:	009b      	lsls	r3, r3, #2
 8005a04:	58d3      	ldr	r3, [r2, r3]
 8005a06:	0018      	movs	r0, r3
 8005a08:	f001 ffb6 	bl	8007978 <USBD_static_free>
    pdev->pClassData = NULL;
 8005a0c:	687a      	ldr	r2, [r7, #4]
 8005a0e:	23ae      	movs	r3, #174	; 0xae
 8005a10:	009b      	lsls	r3, r3, #2
 8005a12:	2100      	movs	r1, #0
 8005a14:	50d1      	str	r1, [r2, r3]
  }

  return USBD_OK;
 8005a16:	2300      	movs	r3, #0
}
 8005a18:	0018      	movs	r0, r3
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	b002      	add	sp, #8
 8005a1e:	bd80      	pop	{r7, pc}

08005a20 <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b088      	sub	sp, #32
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
 8005a28:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 8005a2a:	687a      	ldr	r2, [r7, #4]
 8005a2c:	23ae      	movs	r3, #174	; 0xae
 8005a2e:	009b      	lsls	r3, r3, #2
 8005a30:	58d3      	ldr	r3, [r2, r3]
 8005a32:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8005a34:	231e      	movs	r3, #30
 8005a36:	18fb      	adds	r3, r7, r3
 8005a38:	2200      	movs	r2, #0
 8005a3a:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8005a40:	230e      	movs	r3, #14
 8005a42:	18fb      	adds	r3, r7, r3
 8005a44:	2200      	movs	r2, #0
 8005a46:	801a      	strh	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005a48:	2317      	movs	r3, #23
 8005a4a:	18fb      	adds	r3, r7, r3
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	781b      	ldrb	r3, [r3, #0]
 8005a54:	001a      	movs	r2, r3
 8005a56:	2360      	movs	r3, #96	; 0x60
 8005a58:	4013      	ands	r3, r2
 8005a5a:	d03a      	beq.n	8005ad2 <USBD_HID_Setup+0xb2>
 8005a5c:	2b20      	cmp	r3, #32
 8005a5e:	d000      	beq.n	8005a62 <USBD_HID_Setup+0x42>
 8005a60:	e0d6      	b.n	8005c10 <USBD_HID_Setup+0x1f0>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	785b      	ldrb	r3, [r3, #1]
 8005a66:	2b0b      	cmp	r3, #11
 8005a68:	d008      	beq.n	8005a7c <USBD_HID_Setup+0x5c>
 8005a6a:	dc26      	bgt.n	8005aba <USBD_HID_Setup+0x9a>
 8005a6c:	2b0a      	cmp	r3, #10
 8005a6e:	d013      	beq.n	8005a98 <USBD_HID_Setup+0x78>
 8005a70:	dc23      	bgt.n	8005aba <USBD_HID_Setup+0x9a>
 8005a72:	2b02      	cmp	r3, #2
 8005a74:	d019      	beq.n	8005aaa <USBD_HID_Setup+0x8a>
 8005a76:	2b03      	cmp	r3, #3
 8005a78:	d007      	beq.n	8005a8a <USBD_HID_Setup+0x6a>
 8005a7a:	e01e      	b.n	8005aba <USBD_HID_Setup+0x9a>
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	885b      	ldrh	r3, [r3, #2]
 8005a80:	b2db      	uxtb	r3, r3
 8005a82:	001a      	movs	r2, r3
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	601a      	str	r2, [r3, #0]
          break;
 8005a88:	e022      	b.n	8005ad0 <USBD_HID_Setup+0xb0>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8005a8a:	6939      	ldr	r1, [r7, #16]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2201      	movs	r2, #1
 8005a90:	0018      	movs	r0, r3
 8005a92:	f001 fabf 	bl	8007014 <USBD_CtlSendData>
          break;
 8005a96:	e01b      	b.n	8005ad0 <USBD_HID_Setup+0xb0>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	885b      	ldrh	r3, [r3, #2]
 8005a9c:	0a1b      	lsrs	r3, r3, #8
 8005a9e:	b29b      	uxth	r3, r3
 8005aa0:	b2db      	uxtb	r3, r3
 8005aa2:	001a      	movs	r2, r3
 8005aa4:	693b      	ldr	r3, [r7, #16]
 8005aa6:	605a      	str	r2, [r3, #4]
          break;
 8005aa8:	e012      	b.n	8005ad0 <USBD_HID_Setup+0xb0>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	1d19      	adds	r1, r3, #4
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2201      	movs	r2, #1
 8005ab2:	0018      	movs	r0, r3
 8005ab4:	f001 faae 	bl	8007014 <USBD_CtlSendData>
          break;
 8005ab8:	e00a      	b.n	8005ad0 <USBD_HID_Setup+0xb0>

        default:
          USBD_CtlError(pdev, req);
 8005aba:	683a      	ldr	r2, [r7, #0]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	0011      	movs	r1, r2
 8005ac0:	0018      	movs	r0, r3
 8005ac2:	f001 fa29 	bl	8006f18 <USBD_CtlError>
          ret = USBD_FAIL;
 8005ac6:	2317      	movs	r3, #23
 8005ac8:	18fb      	adds	r3, r7, r3
 8005aca:	2202      	movs	r2, #2
 8005acc:	701a      	strb	r2, [r3, #0]
          break;
 8005ace:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8005ad0:	e0a9      	b.n	8005c26 <USBD_HID_Setup+0x206>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	785b      	ldrb	r3, [r3, #1]
 8005ad6:	2b0b      	cmp	r3, #11
 8005ad8:	d100      	bne.n	8005adc <USBD_HID_Setup+0xbc>
 8005ada:	e075      	b.n	8005bc8 <USBD_HID_Setup+0x1a8>
 8005adc:	dd00      	ble.n	8005ae0 <USBD_HID_Setup+0xc0>
 8005ade:	e08b      	b.n	8005bf8 <USBD_HID_Setup+0x1d8>
 8005ae0:	2b0a      	cmp	r3, #10
 8005ae2:	d057      	beq.n	8005b94 <USBD_HID_Setup+0x174>
 8005ae4:	dd00      	ble.n	8005ae8 <USBD_HID_Setup+0xc8>
 8005ae6:	e087      	b.n	8005bf8 <USBD_HID_Setup+0x1d8>
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d002      	beq.n	8005af2 <USBD_HID_Setup+0xd2>
 8005aec:	2b06      	cmp	r3, #6
 8005aee:	d019      	beq.n	8005b24 <USBD_HID_Setup+0x104>
 8005af0:	e082      	b.n	8005bf8 <USBD_HID_Setup+0x1d8>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005af2:	687a      	ldr	r2, [r7, #4]
 8005af4:	23a7      	movs	r3, #167	; 0xa7
 8005af6:	009b      	lsls	r3, r3, #2
 8005af8:	5cd3      	ldrb	r3, [r2, r3]
 8005afa:	2b03      	cmp	r3, #3
 8005afc:	d107      	bne.n	8005b0e <USBD_HID_Setup+0xee>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8005afe:	230e      	movs	r3, #14
 8005b00:	18f9      	adds	r1, r7, r3
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2202      	movs	r2, #2
 8005b06:	0018      	movs	r0, r3
 8005b08:	f001 fa84 	bl	8007014 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005b0c:	e07f      	b.n	8005c0e <USBD_HID_Setup+0x1ee>
            USBD_CtlError(pdev, req);
 8005b0e:	683a      	ldr	r2, [r7, #0]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	0011      	movs	r1, r2
 8005b14:	0018      	movs	r0, r3
 8005b16:	f001 f9ff 	bl	8006f18 <USBD_CtlError>
            ret = USBD_FAIL;
 8005b1a:	2317      	movs	r3, #23
 8005b1c:	18fb      	adds	r3, r7, r3
 8005b1e:	2202      	movs	r2, #2
 8005b20:	701a      	strb	r2, [r3, #0]
          break;
 8005b22:	e074      	b.n	8005c0e <USBD_HID_Setup+0x1ee>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	885b      	ldrh	r3, [r3, #2]
 8005b28:	0a1b      	lsrs	r3, r3, #8
 8005b2a:	b29b      	uxth	r3, r3
 8005b2c:	2b22      	cmp	r3, #34	; 0x22
 8005b2e:	d10b      	bne.n	8005b48 <USBD_HID_Setup+0x128>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	88db      	ldrh	r3, [r3, #6]
 8005b34:	221e      	movs	r2, #30
 8005b36:	18ba      	adds	r2, r7, r2
 8005b38:	b299      	uxth	r1, r3
 8005b3a:	293f      	cmp	r1, #63	; 0x3f
 8005b3c:	d900      	bls.n	8005b40 <USBD_HID_Setup+0x120>
 8005b3e:	233f      	movs	r3, #63	; 0x3f
 8005b40:	8013      	strh	r3, [r2, #0]
            pbuf = HID_MOUSE_ReportDesc;
 8005b42:	4b3c      	ldr	r3, [pc, #240]	; (8005c34 <USBD_HID_Setup+0x214>)
 8005b44:	61bb      	str	r3, [r7, #24]
 8005b46:	e01c      	b.n	8005b82 <USBD_HID_Setup+0x162>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	885b      	ldrh	r3, [r3, #2]
 8005b4c:	0a1b      	lsrs	r3, r3, #8
 8005b4e:	b29b      	uxth	r3, r3
 8005b50:	2b21      	cmp	r3, #33	; 0x21
 8005b52:	d10b      	bne.n	8005b6c <USBD_HID_Setup+0x14c>
          {
            pbuf = USBD_HID_Desc;
 8005b54:	4b38      	ldr	r3, [pc, #224]	; (8005c38 <USBD_HID_Setup+0x218>)
 8005b56:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	88db      	ldrh	r3, [r3, #6]
 8005b5c:	221e      	movs	r2, #30
 8005b5e:	18ba      	adds	r2, r7, r2
 8005b60:	b299      	uxth	r1, r3
 8005b62:	2909      	cmp	r1, #9
 8005b64:	d900      	bls.n	8005b68 <USBD_HID_Setup+0x148>
 8005b66:	2309      	movs	r3, #9
 8005b68:	8013      	strh	r3, [r2, #0]
 8005b6a:	e00a      	b.n	8005b82 <USBD_HID_Setup+0x162>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8005b6c:	683a      	ldr	r2, [r7, #0]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	0011      	movs	r1, r2
 8005b72:	0018      	movs	r0, r3
 8005b74:	f001 f9d0 	bl	8006f18 <USBD_CtlError>
            ret = USBD_FAIL;
 8005b78:	2317      	movs	r3, #23
 8005b7a:	18fb      	adds	r3, r7, r3
 8005b7c:	2202      	movs	r2, #2
 8005b7e:	701a      	strb	r2, [r3, #0]
            break;
 8005b80:	e045      	b.n	8005c0e <USBD_HID_Setup+0x1ee>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 8005b82:	231e      	movs	r3, #30
 8005b84:	18fb      	adds	r3, r7, r3
 8005b86:	881a      	ldrh	r2, [r3, #0]
 8005b88:	69b9      	ldr	r1, [r7, #24]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	0018      	movs	r0, r3
 8005b8e:	f001 fa41 	bl	8007014 <USBD_CtlSendData>
          break;
 8005b92:	e03c      	b.n	8005c0e <USBD_HID_Setup+0x1ee>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b94:	687a      	ldr	r2, [r7, #4]
 8005b96:	23a7      	movs	r3, #167	; 0xa7
 8005b98:	009b      	lsls	r3, r3, #2
 8005b9a:	5cd3      	ldrb	r3, [r2, r3]
 8005b9c:	2b03      	cmp	r3, #3
 8005b9e:	d108      	bne.n	8005bb2 <USBD_HID_Setup+0x192>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	3308      	adds	r3, #8
 8005ba4:	0019      	movs	r1, r3
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2201      	movs	r2, #1
 8005baa:	0018      	movs	r0, r3
 8005bac:	f001 fa32 	bl	8007014 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005bb0:	e02d      	b.n	8005c0e <USBD_HID_Setup+0x1ee>
            USBD_CtlError(pdev, req);
 8005bb2:	683a      	ldr	r2, [r7, #0]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	0011      	movs	r1, r2
 8005bb8:	0018      	movs	r0, r3
 8005bba:	f001 f9ad 	bl	8006f18 <USBD_CtlError>
            ret = USBD_FAIL;
 8005bbe:	2317      	movs	r3, #23
 8005bc0:	18fb      	adds	r3, r7, r3
 8005bc2:	2202      	movs	r2, #2
 8005bc4:	701a      	strb	r2, [r3, #0]
          break;
 8005bc6:	e022      	b.n	8005c0e <USBD_HID_Setup+0x1ee>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005bc8:	687a      	ldr	r2, [r7, #4]
 8005bca:	23a7      	movs	r3, #167	; 0xa7
 8005bcc:	009b      	lsls	r3, r3, #2
 8005bce:	5cd3      	ldrb	r3, [r2, r3]
 8005bd0:	2b03      	cmp	r3, #3
 8005bd2:	d106      	bne.n	8005be2 <USBD_HID_Setup+0x1c2>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	885b      	ldrh	r3, [r3, #2]
 8005bd8:	b2db      	uxtb	r3, r3
 8005bda:	001a      	movs	r2, r3
 8005bdc:	693b      	ldr	r3, [r7, #16]
 8005bde:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005be0:	e015      	b.n	8005c0e <USBD_HID_Setup+0x1ee>
            USBD_CtlError(pdev, req);
 8005be2:	683a      	ldr	r2, [r7, #0]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	0011      	movs	r1, r2
 8005be8:	0018      	movs	r0, r3
 8005bea:	f001 f995 	bl	8006f18 <USBD_CtlError>
            ret = USBD_FAIL;
 8005bee:	2317      	movs	r3, #23
 8005bf0:	18fb      	adds	r3, r7, r3
 8005bf2:	2202      	movs	r2, #2
 8005bf4:	701a      	strb	r2, [r3, #0]
          break;
 8005bf6:	e00a      	b.n	8005c0e <USBD_HID_Setup+0x1ee>

        default:
          USBD_CtlError(pdev, req);
 8005bf8:	683a      	ldr	r2, [r7, #0]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	0011      	movs	r1, r2
 8005bfe:	0018      	movs	r0, r3
 8005c00:	f001 f98a 	bl	8006f18 <USBD_CtlError>
          ret = USBD_FAIL;
 8005c04:	2317      	movs	r3, #23
 8005c06:	18fb      	adds	r3, r7, r3
 8005c08:	2202      	movs	r2, #2
 8005c0a:	701a      	strb	r2, [r3, #0]
          break;
 8005c0c:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8005c0e:	e00a      	b.n	8005c26 <USBD_HID_Setup+0x206>

    default:
      USBD_CtlError(pdev, req);
 8005c10:	683a      	ldr	r2, [r7, #0]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	0011      	movs	r1, r2
 8005c16:	0018      	movs	r0, r3
 8005c18:	f001 f97e 	bl	8006f18 <USBD_CtlError>
      ret = USBD_FAIL;
 8005c1c:	2317      	movs	r3, #23
 8005c1e:	18fb      	adds	r3, r7, r3
 8005c20:	2202      	movs	r2, #2
 8005c22:	701a      	strb	r2, [r3, #0]
      break;
 8005c24:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8005c26:	2317      	movs	r3, #23
 8005c28:	18fb      	adds	r3, r7, r3
 8005c2a:	781b      	ldrb	r3, [r3, #0]
}
 8005c2c:	0018      	movs	r0, r3
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	b008      	add	sp, #32
 8005c32:	bd80      	pop	{r7, pc}
 8005c34:	200000c8 	.word	0x200000c8
 8005c38:	200000b0 	.word	0x200000b0

08005c3c <USBD_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef  *pdev,
                            uint8_t *report,
                            uint16_t len)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b086      	sub	sp, #24
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	60f8      	str	r0, [r7, #12]
 8005c44:	60b9      	str	r1, [r7, #8]
 8005c46:	1dbb      	adds	r3, r7, #6
 8005c48:	801a      	strh	r2, [r3, #0]
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8005c4a:	68fa      	ldr	r2, [r7, #12]
 8005c4c:	23ae      	movs	r3, #174	; 0xae
 8005c4e:	009b      	lsls	r3, r3, #2
 8005c50:	58d3      	ldr	r3, [r2, r3]
 8005c52:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c54:	68fa      	ldr	r2, [r7, #12]
 8005c56:	23a7      	movs	r3, #167	; 0xa7
 8005c58:	009b      	lsls	r3, r3, #2
 8005c5a:	5cd3      	ldrb	r3, [r2, r3]
 8005c5c:	2b03      	cmp	r3, #3
 8005c5e:	d10d      	bne.n	8005c7c <USBD_HID_SendReport+0x40>
  {
    if (hhid->state == HID_IDLE)
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	7b1b      	ldrb	r3, [r3, #12]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d109      	bne.n	8005c7c <USBD_HID_SendReport+0x40>
    {
      hhid->state = HID_BUSY;
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	731a      	strb	r2, [r3, #12]
      USBD_LL_Transmit(pdev,
 8005c6e:	1dbb      	adds	r3, r7, #6
 8005c70:	881b      	ldrh	r3, [r3, #0]
 8005c72:	68ba      	ldr	r2, [r7, #8]
 8005c74:	68f8      	ldr	r0, [r7, #12]
 8005c76:	2181      	movs	r1, #129	; 0x81
 8005c78:	f001 fe03 	bl	8007882 <USBD_LL_Transmit>
                       HID_EPIN_ADDR,
                       report,
                       len);
    }
  }
  return USBD_OK;
 8005c7c:	2300      	movs	r3, #0
}
 8005c7e:	0018      	movs	r0, r3
 8005c80:	46bd      	mov	sp, r7
 8005c82:	b006      	add	sp, #24
 8005c84:	bd80      	pop	{r7, pc}
	...

08005c88 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b082      	sub	sp, #8
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2222      	movs	r2, #34	; 0x22
 8005c94:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 8005c96:	4b02      	ldr	r3, [pc, #8]	; (8005ca0 <USBD_HID_GetFSCfgDesc+0x18>)
}
 8005c98:	0018      	movs	r0, r3
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	b002      	add	sp, #8
 8005c9e:	bd80      	pop	{r7, pc}
 8005ca0:	20000044 	.word	0x20000044

08005ca4 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b082      	sub	sp, #8
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2222      	movs	r2, #34	; 0x22
 8005cb0:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 8005cb2:	4b02      	ldr	r3, [pc, #8]	; (8005cbc <USBD_HID_GetHSCfgDesc+0x18>)
}
 8005cb4:	0018      	movs	r0, r3
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	b002      	add	sp, #8
 8005cba:	bd80      	pop	{r7, pc}
 8005cbc:	20000068 	.word	0x20000068

08005cc0 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b082      	sub	sp, #8
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2222      	movs	r2, #34	; 0x22
 8005ccc:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 8005cce:	4b02      	ldr	r3, [pc, #8]	; (8005cd8 <USBD_HID_GetOtherSpeedCfgDesc+0x18>)
}
 8005cd0:	0018      	movs	r0, r3
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	b002      	add	sp, #8
 8005cd6:	bd80      	pop	{r7, pc}
 8005cd8:	2000008c 	.word	0x2000008c

08005cdc <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b082      	sub	sp, #8
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
 8005ce4:	000a      	movs	r2, r1
 8005ce6:	1cfb      	adds	r3, r7, #3
 8005ce8:	701a      	strb	r2, [r3, #0]

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8005cea:	687a      	ldr	r2, [r7, #4]
 8005cec:	23ae      	movs	r3, #174	; 0xae
 8005cee:	009b      	lsls	r3, r3, #2
 8005cf0:	58d3      	ldr	r3, [r2, r3]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 8005cf6:	2300      	movs	r3, #0
}
 8005cf8:	0018      	movs	r0, r3
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	b002      	add	sp, #8
 8005cfe:	bd80      	pop	{r7, pc}

08005d00 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b082      	sub	sp, #8
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	220a      	movs	r2, #10
 8005d0c:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 8005d0e:	4b02      	ldr	r3, [pc, #8]	; (8005d18 <USBD_HID_GetDeviceQualifierDesc+0x18>)
}
 8005d10:	0018      	movs	r0, r3
 8005d12:	46bd      	mov	sp, r7
 8005d14:	b002      	add	sp, #8
 8005d16:	bd80      	pop	{r7, pc}
 8005d18:	200000bc 	.word	0x200000bc

08005d1c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b084      	sub	sp, #16
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	60f8      	str	r0, [r7, #12]
 8005d24:	60b9      	str	r1, [r7, #8]
 8005d26:	1dfb      	adds	r3, r7, #7
 8005d28:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d101      	bne.n	8005d34 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005d30:	2302      	movs	r3, #2
 8005d32:	e020      	b.n	8005d76 <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8005d34:	68fa      	ldr	r2, [r7, #12]
 8005d36:	23ad      	movs	r3, #173	; 0xad
 8005d38:	009b      	lsls	r3, r3, #2
 8005d3a:	58d3      	ldr	r3, [r2, r3]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d004      	beq.n	8005d4a <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 8005d40:	68fa      	ldr	r2, [r7, #12]
 8005d42:	23ad      	movs	r3, #173	; 0xad
 8005d44:	009b      	lsls	r3, r3, #2
 8005d46:	2100      	movs	r1, #0
 8005d48:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d004      	beq.n	8005d5a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005d50:	68fa      	ldr	r2, [r7, #12]
 8005d52:	23ac      	movs	r3, #172	; 0xac
 8005d54:	009b      	lsls	r3, r3, #2
 8005d56:	68b9      	ldr	r1, [r7, #8]
 8005d58:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005d5a:	68fa      	ldr	r2, [r7, #12]
 8005d5c:	23a7      	movs	r3, #167	; 0xa7
 8005d5e:	009b      	lsls	r3, r3, #2
 8005d60:	2101      	movs	r1, #1
 8005d62:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	1dfa      	adds	r2, r7, #7
 8005d68:	7812      	ldrb	r2, [r2, #0]
 8005d6a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	0018      	movs	r0, r3
 8005d70:	f001 fbfe 	bl	8007570 <USBD_LL_Init>

  return USBD_OK;
 8005d74:	2300      	movs	r3, #0
}
 8005d76:	0018      	movs	r0, r3
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	b004      	add	sp, #16
 8005d7c:	bd80      	pop	{r7, pc}

08005d7e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005d7e:	b580      	push	{r7, lr}
 8005d80:	b084      	sub	sp, #16
 8005d82:	af00      	add	r7, sp, #0
 8005d84:	6078      	str	r0, [r7, #4]
 8005d86:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8005d88:	200f      	movs	r0, #15
 8005d8a:	183b      	adds	r3, r7, r0
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d008      	beq.n	8005da8 <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8005d96:	687a      	ldr	r2, [r7, #4]
 8005d98:	23ad      	movs	r3, #173	; 0xad
 8005d9a:	009b      	lsls	r3, r3, #2
 8005d9c:	6839      	ldr	r1, [r7, #0]
 8005d9e:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 8005da0:	183b      	adds	r3, r7, r0
 8005da2:	2200      	movs	r2, #0
 8005da4:	701a      	strb	r2, [r3, #0]
 8005da6:	e003      	b.n	8005db0 <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8005da8:	230f      	movs	r3, #15
 8005daa:	18fb      	adds	r3, r7, r3
 8005dac:	2202      	movs	r2, #2
 8005dae:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8005db0:	230f      	movs	r3, #15
 8005db2:	18fb      	adds	r3, r7, r3
 8005db4:	781b      	ldrb	r3, [r3, #0]
}
 8005db6:	0018      	movs	r0, r3
 8005db8:	46bd      	mov	sp, r7
 8005dba:	b004      	add	sp, #16
 8005dbc:	bd80      	pop	{r7, pc}

08005dbe <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005dbe:	b580      	push	{r7, lr}
 8005dc0:	b082      	sub	sp, #8
 8005dc2:	af00      	add	r7, sp, #0
 8005dc4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	0018      	movs	r0, r3
 8005dca:	f001 fc21 	bl	8007610 <USBD_LL_Start>

  return USBD_OK;
 8005dce:	2300      	movs	r3, #0
}
 8005dd0:	0018      	movs	r0, r3
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	b002      	add	sp, #8
 8005dd6:	bd80      	pop	{r7, pc}

08005dd8 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b082      	sub	sp, #8
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005de0:	2300      	movs	r3, #0
}
 8005de2:	0018      	movs	r0, r3
 8005de4:	46bd      	mov	sp, r7
 8005de6:	b002      	add	sp, #8
 8005de8:	bd80      	pop	{r7, pc}

08005dea <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005dea:	b590      	push	{r4, r7, lr}
 8005dec:	b085      	sub	sp, #20
 8005dee:	af00      	add	r7, sp, #0
 8005df0:	6078      	str	r0, [r7, #4]
 8005df2:	000a      	movs	r2, r1
 8005df4:	1cfb      	adds	r3, r7, #3
 8005df6:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005df8:	240f      	movs	r4, #15
 8005dfa:	193b      	adds	r3, r7, r4
 8005dfc:	2202      	movs	r2, #2
 8005dfe:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 8005e00:	687a      	ldr	r2, [r7, #4]
 8005e02:	23ad      	movs	r3, #173	; 0xad
 8005e04:	009b      	lsls	r3, r3, #2
 8005e06:	58d3      	ldr	r3, [r2, r3]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d00e      	beq.n	8005e2a <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8005e0c:	687a      	ldr	r2, [r7, #4]
 8005e0e:	23ad      	movs	r3, #173	; 0xad
 8005e10:	009b      	lsls	r3, r3, #2
 8005e12:	58d3      	ldr	r3, [r2, r3]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	1cfa      	adds	r2, r7, #3
 8005e18:	7811      	ldrb	r1, [r2, #0]
 8005e1a:	687a      	ldr	r2, [r7, #4]
 8005e1c:	0010      	movs	r0, r2
 8005e1e:	4798      	blx	r3
 8005e20:	1e03      	subs	r3, r0, #0
 8005e22:	d102      	bne.n	8005e2a <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 8005e24:	193b      	adds	r3, r7, r4
 8005e26:	2200      	movs	r2, #0
 8005e28:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 8005e2a:	230f      	movs	r3, #15
 8005e2c:	18fb      	adds	r3, r7, r3
 8005e2e:	781b      	ldrb	r3, [r3, #0]
}
 8005e30:	0018      	movs	r0, r3
 8005e32:	46bd      	mov	sp, r7
 8005e34:	b005      	add	sp, #20
 8005e36:	bd90      	pop	{r4, r7, pc}

08005e38 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b082      	sub	sp, #8
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
 8005e40:	000a      	movs	r2, r1
 8005e42:	1cfb      	adds	r3, r7, #3
 8005e44:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8005e46:	687a      	ldr	r2, [r7, #4]
 8005e48:	23ad      	movs	r3, #173	; 0xad
 8005e4a:	009b      	lsls	r3, r3, #2
 8005e4c:	58d3      	ldr	r3, [r2, r3]
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	1cfa      	adds	r2, r7, #3
 8005e52:	7811      	ldrb	r1, [r2, #0]
 8005e54:	687a      	ldr	r2, [r7, #4]
 8005e56:	0010      	movs	r0, r2
 8005e58:	4798      	blx	r3

  return USBD_OK;
 8005e5a:	2300      	movs	r3, #0
}
 8005e5c:	0018      	movs	r0, r3
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	b002      	add	sp, #8
 8005e62:	bd80      	pop	{r7, pc}

08005e64 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b082      	sub	sp, #8
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
 8005e6c:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	22aa      	movs	r2, #170	; 0xaa
 8005e72:	0092      	lsls	r2, r2, #2
 8005e74:	4694      	mov	ip, r2
 8005e76:	4463      	add	r3, ip
 8005e78:	683a      	ldr	r2, [r7, #0]
 8005e7a:	0011      	movs	r1, r2
 8005e7c:	0018      	movs	r0, r3
 8005e7e:	f001 f810 	bl	8006ea2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005e82:	687a      	ldr	r2, [r7, #4]
 8005e84:	23a5      	movs	r3, #165	; 0xa5
 8005e86:	009b      	lsls	r3, r3, #2
 8005e88:	2101      	movs	r1, #1
 8005e8a:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	4a23      	ldr	r2, [pc, #140]	; (8005f1c <USBD_LL_SetupStage+0xb8>)
 8005e90:	5a9b      	ldrh	r3, [r3, r2]
 8005e92:	0019      	movs	r1, r3
 8005e94:	687a      	ldr	r2, [r7, #4]
 8005e96:	23a6      	movs	r3, #166	; 0xa6
 8005e98:	009b      	lsls	r3, r3, #2
 8005e9a:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 8005e9c:	687a      	ldr	r2, [r7, #4]
 8005e9e:	23aa      	movs	r3, #170	; 0xaa
 8005ea0:	009b      	lsls	r3, r3, #2
 8005ea2:	5cd3      	ldrb	r3, [r2, r3]
 8005ea4:	001a      	movs	r2, r3
 8005ea6:	231f      	movs	r3, #31
 8005ea8:	4013      	ands	r3, r2
 8005eaa:	2b02      	cmp	r3, #2
 8005eac:	d019      	beq.n	8005ee2 <USBD_LL_SetupStage+0x7e>
 8005eae:	d822      	bhi.n	8005ef6 <USBD_LL_SetupStage+0x92>
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d002      	beq.n	8005eba <USBD_LL_SetupStage+0x56>
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	d00a      	beq.n	8005ece <USBD_LL_SetupStage+0x6a>
 8005eb8:	e01d      	b.n	8005ef6 <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	22aa      	movs	r2, #170	; 0xaa
 8005ebe:	0092      	lsls	r2, r2, #2
 8005ec0:	189a      	adds	r2, r3, r2
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	0011      	movs	r1, r2
 8005ec6:	0018      	movs	r0, r3
 8005ec8:	f000 fa10 	bl	80062ec <USBD_StdDevReq>
      break;
 8005ecc:	e020      	b.n	8005f10 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	22aa      	movs	r2, #170	; 0xaa
 8005ed2:	0092      	lsls	r2, r2, #2
 8005ed4:	189a      	adds	r2, r3, r2
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	0011      	movs	r1, r2
 8005eda:	0018      	movs	r0, r3
 8005edc:	f000 fa78 	bl	80063d0 <USBD_StdItfReq>
      break;
 8005ee0:	e016      	b.n	8005f10 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	22aa      	movs	r2, #170	; 0xaa
 8005ee6:	0092      	lsls	r2, r2, #2
 8005ee8:	189a      	adds	r2, r3, r2
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	0011      	movs	r1, r2
 8005eee:	0018      	movs	r0, r3
 8005ef0:	f000 fac5 	bl	800647e <USBD_StdEPReq>
      break;
 8005ef4:	e00c      	b.n	8005f10 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005ef6:	687a      	ldr	r2, [r7, #4]
 8005ef8:	23aa      	movs	r3, #170	; 0xaa
 8005efa:	009b      	lsls	r3, r3, #2
 8005efc:	5cd3      	ldrb	r3, [r2, r3]
 8005efe:	227f      	movs	r2, #127	; 0x7f
 8005f00:	4393      	bics	r3, r2
 8005f02:	b2da      	uxtb	r2, r3
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	0011      	movs	r1, r2
 8005f08:	0018      	movs	r0, r3
 8005f0a:	f001 fc08 	bl	800771e <USBD_LL_StallEP>
      break;
 8005f0e:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 8005f10:	2300      	movs	r3, #0
}
 8005f12:	0018      	movs	r0, r3
 8005f14:	46bd      	mov	sp, r7
 8005f16:	b002      	add	sp, #8
 8005f18:	bd80      	pop	{r7, pc}
 8005f1a:	46c0      	nop			; (mov r8, r8)
 8005f1c:	000002ae 	.word	0x000002ae

08005f20 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b086      	sub	sp, #24
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	60f8      	str	r0, [r7, #12]
 8005f28:	607a      	str	r2, [r7, #4]
 8005f2a:	200b      	movs	r0, #11
 8005f2c:	183b      	adds	r3, r7, r0
 8005f2e:	1c0a      	adds	r2, r1, #0
 8005f30:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005f32:	183b      	adds	r3, r7, r0
 8005f34:	781b      	ldrb	r3, [r3, #0]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d154      	bne.n	8005fe4 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	3355      	adds	r3, #85	; 0x55
 8005f3e:	33ff      	adds	r3, #255	; 0xff
 8005f40:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005f42:	68fa      	ldr	r2, [r7, #12]
 8005f44:	23a5      	movs	r3, #165	; 0xa5
 8005f46:	009b      	lsls	r3, r3, #2
 8005f48:	58d3      	ldr	r3, [r2, r3]
 8005f4a:	2b03      	cmp	r3, #3
 8005f4c:	d139      	bne.n	8005fc2 <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	68da      	ldr	r2, [r3, #12]
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	691b      	ldr	r3, [r3, #16]
 8005f56:	429a      	cmp	r2, r3
 8005f58:	d919      	bls.n	8005f8e <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	68da      	ldr	r2, [r3, #12]
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	691b      	ldr	r3, [r3, #16]
 8005f62:	1ad2      	subs	r2, r2, r3
 8005f64:	697b      	ldr	r3, [r7, #20]
 8005f66:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	68da      	ldr	r2, [r3, #12]
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005f70:	429a      	cmp	r2, r3
 8005f72:	d203      	bcs.n	8005f7c <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8005f78:	b29b      	uxth	r3, r3
 8005f7a:	e002      	b.n	8005f82 <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005f80:	b29b      	uxth	r3, r3
 8005f82:	6879      	ldr	r1, [r7, #4]
 8005f84:	68f8      	ldr	r0, [r7, #12]
 8005f86:	001a      	movs	r2, r3
 8005f88:	f001 f877 	bl	800707a <USBD_CtlContinueRx>
 8005f8c:	e045      	b.n	800601a <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005f8e:	68fa      	ldr	r2, [r7, #12]
 8005f90:	23ad      	movs	r3, #173	; 0xad
 8005f92:	009b      	lsls	r3, r3, #2
 8005f94:	58d3      	ldr	r3, [r2, r3]
 8005f96:	691b      	ldr	r3, [r3, #16]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d00d      	beq.n	8005fb8 <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005f9c:	68fa      	ldr	r2, [r7, #12]
 8005f9e:	23a7      	movs	r3, #167	; 0xa7
 8005fa0:	009b      	lsls	r3, r3, #2
 8005fa2:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005fa4:	2b03      	cmp	r3, #3
 8005fa6:	d107      	bne.n	8005fb8 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8005fa8:	68fa      	ldr	r2, [r7, #12]
 8005faa:	23ad      	movs	r3, #173	; 0xad
 8005fac:	009b      	lsls	r3, r3, #2
 8005fae:	58d3      	ldr	r3, [r2, r3]
 8005fb0:	691b      	ldr	r3, [r3, #16]
 8005fb2:	68fa      	ldr	r2, [r7, #12]
 8005fb4:	0010      	movs	r0, r2
 8005fb6:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	0018      	movs	r0, r3
 8005fbc:	f001 f870 	bl	80070a0 <USBD_CtlSendStatus>
 8005fc0:	e02b      	b.n	800601a <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8005fc2:	68fa      	ldr	r2, [r7, #12]
 8005fc4:	23a5      	movs	r3, #165	; 0xa5
 8005fc6:	009b      	lsls	r3, r3, #2
 8005fc8:	58d3      	ldr	r3, [r2, r3]
 8005fca:	2b05      	cmp	r3, #5
 8005fcc:	d125      	bne.n	800601a <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8005fce:	68fa      	ldr	r2, [r7, #12]
 8005fd0:	23a5      	movs	r3, #165	; 0xa5
 8005fd2:	009b      	lsls	r3, r3, #2
 8005fd4:	2100      	movs	r1, #0
 8005fd6:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	2100      	movs	r1, #0
 8005fdc:	0018      	movs	r0, r3
 8005fde:	f001 fb9e 	bl	800771e <USBD_LL_StallEP>
 8005fe2:	e01a      	b.n	800601a <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8005fe4:	68fa      	ldr	r2, [r7, #12]
 8005fe6:	23ad      	movs	r3, #173	; 0xad
 8005fe8:	009b      	lsls	r3, r3, #2
 8005fea:	58d3      	ldr	r3, [r2, r3]
 8005fec:	699b      	ldr	r3, [r3, #24]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d011      	beq.n	8006016 <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005ff2:	68fa      	ldr	r2, [r7, #12]
 8005ff4:	23a7      	movs	r3, #167	; 0xa7
 8005ff6:	009b      	lsls	r3, r3, #2
 8005ff8:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 8005ffa:	2b03      	cmp	r3, #3
 8005ffc:	d10b      	bne.n	8006016 <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8005ffe:	68fa      	ldr	r2, [r7, #12]
 8006000:	23ad      	movs	r3, #173	; 0xad
 8006002:	009b      	lsls	r3, r3, #2
 8006004:	58d3      	ldr	r3, [r2, r3]
 8006006:	699b      	ldr	r3, [r3, #24]
 8006008:	220b      	movs	r2, #11
 800600a:	18ba      	adds	r2, r7, r2
 800600c:	7811      	ldrb	r1, [r2, #0]
 800600e:	68fa      	ldr	r2, [r7, #12]
 8006010:	0010      	movs	r0, r2
 8006012:	4798      	blx	r3
 8006014:	e001      	b.n	800601a <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006016:	2302      	movs	r3, #2
 8006018:	e000      	b.n	800601c <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 800601a:	2300      	movs	r3, #0
}
 800601c:	0018      	movs	r0, r3
 800601e:	46bd      	mov	sp, r7
 8006020:	b006      	add	sp, #24
 8006022:	bd80      	pop	{r7, pc}

08006024 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b086      	sub	sp, #24
 8006028:	af00      	add	r7, sp, #0
 800602a:	60f8      	str	r0, [r7, #12]
 800602c:	607a      	str	r2, [r7, #4]
 800602e:	200b      	movs	r0, #11
 8006030:	183b      	adds	r3, r7, r0
 8006032:	1c0a      	adds	r2, r1, #0
 8006034:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006036:	183b      	adds	r3, r7, r0
 8006038:	781b      	ldrb	r3, [r3, #0]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d000      	beq.n	8006040 <USBD_LL_DataInStage+0x1c>
 800603e:	e08e      	b.n	800615e <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	3314      	adds	r3, #20
 8006044:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006046:	68fa      	ldr	r2, [r7, #12]
 8006048:	23a5      	movs	r3, #165	; 0xa5
 800604a:	009b      	lsls	r3, r3, #2
 800604c:	58d3      	ldr	r3, [r2, r3]
 800604e:	2b02      	cmp	r3, #2
 8006050:	d164      	bne.n	800611c <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	68da      	ldr	r2, [r3, #12]
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	691b      	ldr	r3, [r3, #16]
 800605a:	429a      	cmp	r2, r3
 800605c:	d915      	bls.n	800608a <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	68da      	ldr	r2, [r3, #12]
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	691b      	ldr	r3, [r3, #16]
 8006066:	1ad2      	subs	r2, r2, r3
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	68db      	ldr	r3, [r3, #12]
 8006070:	b29a      	uxth	r2, r3
 8006072:	6879      	ldr	r1, [r7, #4]
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	0018      	movs	r0, r3
 8006078:	f000 ffec 	bl	8007054 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800607c:	68f8      	ldr	r0, [r7, #12]
 800607e:	2300      	movs	r3, #0
 8006080:	2200      	movs	r2, #0
 8006082:	2100      	movs	r1, #0
 8006084:	f001 fc34 	bl	80078f0 <USBD_LL_PrepareReceive>
 8006088:	e059      	b.n	800613e <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	689a      	ldr	r2, [r3, #8]
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	691b      	ldr	r3, [r3, #16]
 8006092:	0019      	movs	r1, r3
 8006094:	0010      	movs	r0, r2
 8006096:	f7fa f8bd 	bl	8000214 <__aeabi_uidivmod>
 800609a:	1e0b      	subs	r3, r1, #0
 800609c:	d11f      	bne.n	80060de <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 800609e:	697b      	ldr	r3, [r7, #20]
 80060a0:	689a      	ldr	r2, [r3, #8]
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80060a6:	429a      	cmp	r2, r3
 80060a8:	d319      	bcc.n	80060de <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	689a      	ldr	r2, [r3, #8]
 80060ae:	68f9      	ldr	r1, [r7, #12]
 80060b0:	23a6      	movs	r3, #166	; 0xa6
 80060b2:	009b      	lsls	r3, r3, #2
 80060b4:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 80060b6:	429a      	cmp	r2, r3
 80060b8:	d211      	bcs.n	80060de <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2200      	movs	r2, #0
 80060be:	2100      	movs	r1, #0
 80060c0:	0018      	movs	r0, r3
 80060c2:	f000 ffc7 	bl	8007054 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80060c6:	68fa      	ldr	r2, [r7, #12]
 80060c8:	23a6      	movs	r3, #166	; 0xa6
 80060ca:	009b      	lsls	r3, r3, #2
 80060cc:	2100      	movs	r1, #0
 80060ce:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80060d0:	68f8      	ldr	r0, [r7, #12]
 80060d2:	2300      	movs	r3, #0
 80060d4:	2200      	movs	r2, #0
 80060d6:	2100      	movs	r1, #0
 80060d8:	f001 fc0a 	bl	80078f0 <USBD_LL_PrepareReceive>
 80060dc:	e02f      	b.n	800613e <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80060de:	68fa      	ldr	r2, [r7, #12]
 80060e0:	23ad      	movs	r3, #173	; 0xad
 80060e2:	009b      	lsls	r3, r3, #2
 80060e4:	58d3      	ldr	r3, [r2, r3]
 80060e6:	68db      	ldr	r3, [r3, #12]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d00d      	beq.n	8006108 <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80060ec:	68fa      	ldr	r2, [r7, #12]
 80060ee:	23a7      	movs	r3, #167	; 0xa7
 80060f0:	009b      	lsls	r3, r3, #2
 80060f2:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80060f4:	2b03      	cmp	r3, #3
 80060f6:	d107      	bne.n	8006108 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80060f8:	68fa      	ldr	r2, [r7, #12]
 80060fa:	23ad      	movs	r3, #173	; 0xad
 80060fc:	009b      	lsls	r3, r3, #2
 80060fe:	58d3      	ldr	r3, [r2, r3]
 8006100:	68db      	ldr	r3, [r3, #12]
 8006102:	68fa      	ldr	r2, [r7, #12]
 8006104:	0010      	movs	r0, r2
 8006106:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	2180      	movs	r1, #128	; 0x80
 800610c:	0018      	movs	r0, r3
 800610e:	f001 fb06 	bl	800771e <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	0018      	movs	r0, r3
 8006116:	f000 ffd7 	bl	80070c8 <USBD_CtlReceiveStatus>
 800611a:	e010      	b.n	800613e <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800611c:	68fa      	ldr	r2, [r7, #12]
 800611e:	23a5      	movs	r3, #165	; 0xa5
 8006120:	009b      	lsls	r3, r3, #2
 8006122:	58d3      	ldr	r3, [r2, r3]
 8006124:	2b04      	cmp	r3, #4
 8006126:	d005      	beq.n	8006134 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006128:	68fa      	ldr	r2, [r7, #12]
 800612a:	23a5      	movs	r3, #165	; 0xa5
 800612c:	009b      	lsls	r3, r3, #2
 800612e:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006130:	2b00      	cmp	r3, #0
 8006132:	d104      	bne.n	800613e <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2180      	movs	r1, #128	; 0x80
 8006138:	0018      	movs	r0, r3
 800613a:	f001 faf0 	bl	800771e <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800613e:	68fa      	ldr	r2, [r7, #12]
 8006140:	23a8      	movs	r3, #168	; 0xa8
 8006142:	009b      	lsls	r3, r3, #2
 8006144:	5cd3      	ldrb	r3, [r2, r3]
 8006146:	2b01      	cmp	r3, #1
 8006148:	d124      	bne.n	8006194 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	0018      	movs	r0, r3
 800614e:	f7ff fe43 	bl	8005dd8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006152:	68fa      	ldr	r2, [r7, #12]
 8006154:	23a8      	movs	r3, #168	; 0xa8
 8006156:	009b      	lsls	r3, r3, #2
 8006158:	2100      	movs	r1, #0
 800615a:	54d1      	strb	r1, [r2, r3]
 800615c:	e01a      	b.n	8006194 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800615e:	68fa      	ldr	r2, [r7, #12]
 8006160:	23ad      	movs	r3, #173	; 0xad
 8006162:	009b      	lsls	r3, r3, #2
 8006164:	58d3      	ldr	r3, [r2, r3]
 8006166:	695b      	ldr	r3, [r3, #20]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d011      	beq.n	8006190 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800616c:	68fa      	ldr	r2, [r7, #12]
 800616e:	23a7      	movs	r3, #167	; 0xa7
 8006170:	009b      	lsls	r3, r3, #2
 8006172:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 8006174:	2b03      	cmp	r3, #3
 8006176:	d10b      	bne.n	8006190 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006178:	68fa      	ldr	r2, [r7, #12]
 800617a:	23ad      	movs	r3, #173	; 0xad
 800617c:	009b      	lsls	r3, r3, #2
 800617e:	58d3      	ldr	r3, [r2, r3]
 8006180:	695b      	ldr	r3, [r3, #20]
 8006182:	220b      	movs	r2, #11
 8006184:	18ba      	adds	r2, r7, r2
 8006186:	7811      	ldrb	r1, [r2, #0]
 8006188:	68fa      	ldr	r2, [r7, #12]
 800618a:	0010      	movs	r0, r2
 800618c:	4798      	blx	r3
 800618e:	e001      	b.n	8006194 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006190:	2302      	movs	r3, #2
 8006192:	e000      	b.n	8006196 <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 8006194:	2300      	movs	r3, #0
}
 8006196:	0018      	movs	r0, r3
 8006198:	46bd      	mov	sp, r7
 800619a:	b006      	add	sp, #24
 800619c:	bd80      	pop	{r7, pc}

0800619e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800619e:	b580      	push	{r7, lr}
 80061a0:	b082      	sub	sp, #8
 80061a2:	af00      	add	r7, sp, #0
 80061a4:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	2340      	movs	r3, #64	; 0x40
 80061aa:	2200      	movs	r2, #0
 80061ac:	2100      	movs	r1, #0
 80061ae:	f001 fa54 	bl	800765a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80061b2:	687a      	ldr	r2, [r7, #4]
 80061b4:	23ac      	movs	r3, #172	; 0xac
 80061b6:	005b      	lsls	r3, r3, #1
 80061b8:	2101      	movs	r1, #1
 80061ba:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80061bc:	687a      	ldr	r2, [r7, #4]
 80061be:	23b2      	movs	r3, #178	; 0xb2
 80061c0:	005b      	lsls	r3, r3, #1
 80061c2:	2140      	movs	r1, #64	; 0x40
 80061c4:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	2340      	movs	r3, #64	; 0x40
 80061ca:	2200      	movs	r2, #0
 80061cc:	2180      	movs	r1, #128	; 0x80
 80061ce:	f001 fa44 	bl	800765a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2201      	movs	r2, #1
 80061d6:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2240      	movs	r2, #64	; 0x40
 80061dc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80061de:	687a      	ldr	r2, [r7, #4]
 80061e0:	23a7      	movs	r3, #167	; 0xa7
 80061e2:	009b      	lsls	r3, r3, #2
 80061e4:	2101      	movs	r1, #1
 80061e6:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 80061e8:	687a      	ldr	r2, [r7, #4]
 80061ea:	23a5      	movs	r3, #165	; 0xa5
 80061ec:	009b      	lsls	r3, r3, #2
 80061ee:	2100      	movs	r1, #0
 80061f0:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2200      	movs	r2, #0
 80061f6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80061f8:	687a      	ldr	r2, [r7, #4]
 80061fa:	23a9      	movs	r3, #169	; 0xa9
 80061fc:	009b      	lsls	r3, r3, #2
 80061fe:	2100      	movs	r1, #0
 8006200:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 8006202:	687a      	ldr	r2, [r7, #4]
 8006204:	23ae      	movs	r3, #174	; 0xae
 8006206:	009b      	lsls	r3, r3, #2
 8006208:	58d3      	ldr	r3, [r2, r3]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d00a      	beq.n	8006224 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800620e:	687a      	ldr	r2, [r7, #4]
 8006210:	23ad      	movs	r3, #173	; 0xad
 8006212:	009b      	lsls	r3, r3, #2
 8006214:	58d3      	ldr	r3, [r2, r3]
 8006216:	685a      	ldr	r2, [r3, #4]
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	b2d9      	uxtb	r1, r3
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	0018      	movs	r0, r3
 8006222:	4790      	blx	r2
  }

  return USBD_OK;
 8006224:	2300      	movs	r3, #0
}
 8006226:	0018      	movs	r0, r3
 8006228:	46bd      	mov	sp, r7
 800622a:	b002      	add	sp, #8
 800622c:	bd80      	pop	{r7, pc}

0800622e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800622e:	b580      	push	{r7, lr}
 8006230:	b082      	sub	sp, #8
 8006232:	af00      	add	r7, sp, #0
 8006234:	6078      	str	r0, [r7, #4]
 8006236:	000a      	movs	r2, r1
 8006238:	1cfb      	adds	r3, r7, #3
 800623a:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	1cfa      	adds	r2, r7, #3
 8006240:	7812      	ldrb	r2, [r2, #0]
 8006242:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006244:	2300      	movs	r3, #0
}
 8006246:	0018      	movs	r0, r3
 8006248:	46bd      	mov	sp, r7
 800624a:	b002      	add	sp, #8
 800624c:	bd80      	pop	{r7, pc}
	...

08006250 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b082      	sub	sp, #8
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006258:	687a      	ldr	r2, [r7, #4]
 800625a:	23a7      	movs	r3, #167	; 0xa7
 800625c:	009b      	lsls	r3, r3, #2
 800625e:	5cd1      	ldrb	r1, [r2, r3]
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	4a06      	ldr	r2, [pc, #24]	; (800627c <USBD_LL_Suspend+0x2c>)
 8006264:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006266:	687a      	ldr	r2, [r7, #4]
 8006268:	23a7      	movs	r3, #167	; 0xa7
 800626a:	009b      	lsls	r3, r3, #2
 800626c:	2104      	movs	r1, #4
 800626e:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 8006270:	2300      	movs	r3, #0
}
 8006272:	0018      	movs	r0, r3
 8006274:	46bd      	mov	sp, r7
 8006276:	b002      	add	sp, #8
 8006278:	bd80      	pop	{r7, pc}
 800627a:	46c0      	nop			; (mov r8, r8)
 800627c:	0000029d 	.word	0x0000029d

08006280 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b082      	sub	sp, #8
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006288:	687a      	ldr	r2, [r7, #4]
 800628a:	23a7      	movs	r3, #167	; 0xa7
 800628c:	009b      	lsls	r3, r3, #2
 800628e:	5cd3      	ldrb	r3, [r2, r3]
 8006290:	2b04      	cmp	r3, #4
 8006292:	d106      	bne.n	80062a2 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	4a05      	ldr	r2, [pc, #20]	; (80062ac <USBD_LL_Resume+0x2c>)
 8006298:	5c99      	ldrb	r1, [r3, r2]
 800629a:	687a      	ldr	r2, [r7, #4]
 800629c:	23a7      	movs	r3, #167	; 0xa7
 800629e:	009b      	lsls	r3, r3, #2
 80062a0:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 80062a2:	2300      	movs	r3, #0
}
 80062a4:	0018      	movs	r0, r3
 80062a6:	46bd      	mov	sp, r7
 80062a8:	b002      	add	sp, #8
 80062aa:	bd80      	pop	{r7, pc}
 80062ac:	0000029d 	.word	0x0000029d

080062b0 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b082      	sub	sp, #8
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062b8:	687a      	ldr	r2, [r7, #4]
 80062ba:	23a7      	movs	r3, #167	; 0xa7
 80062bc:	009b      	lsls	r3, r3, #2
 80062be:	5cd3      	ldrb	r3, [r2, r3]
 80062c0:	2b03      	cmp	r3, #3
 80062c2:	d10e      	bne.n	80062e2 <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 80062c4:	687a      	ldr	r2, [r7, #4]
 80062c6:	23ad      	movs	r3, #173	; 0xad
 80062c8:	009b      	lsls	r3, r3, #2
 80062ca:	58d3      	ldr	r3, [r2, r3]
 80062cc:	69db      	ldr	r3, [r3, #28]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d007      	beq.n	80062e2 <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 80062d2:	687a      	ldr	r2, [r7, #4]
 80062d4:	23ad      	movs	r3, #173	; 0xad
 80062d6:	009b      	lsls	r3, r3, #2
 80062d8:	58d3      	ldr	r3, [r2, r3]
 80062da:	69db      	ldr	r3, [r3, #28]
 80062dc:	687a      	ldr	r2, [r7, #4]
 80062de:	0010      	movs	r0, r2
 80062e0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80062e2:	2300      	movs	r3, #0
}
 80062e4:	0018      	movs	r0, r3
 80062e6:	46bd      	mov	sp, r7
 80062e8:	b002      	add	sp, #8
 80062ea:	bd80      	pop	{r7, pc}

080062ec <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b084      	sub	sp, #16
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
 80062f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80062f6:	230f      	movs	r3, #15
 80062f8:	18fb      	adds	r3, r7, r3
 80062fa:	2200      	movs	r2, #0
 80062fc:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	781b      	ldrb	r3, [r3, #0]
 8006302:	001a      	movs	r2, r3
 8006304:	2360      	movs	r3, #96	; 0x60
 8006306:	4013      	ands	r3, r2
 8006308:	2b40      	cmp	r3, #64	; 0x40
 800630a:	d004      	beq.n	8006316 <USBD_StdDevReq+0x2a>
 800630c:	d84f      	bhi.n	80063ae <USBD_StdDevReq+0xc2>
 800630e:	2b00      	cmp	r3, #0
 8006310:	d00b      	beq.n	800632a <USBD_StdDevReq+0x3e>
 8006312:	2b20      	cmp	r3, #32
 8006314:	d14b      	bne.n	80063ae <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006316:	687a      	ldr	r2, [r7, #4]
 8006318:	23ad      	movs	r3, #173	; 0xad
 800631a:	009b      	lsls	r3, r3, #2
 800631c:	58d3      	ldr	r3, [r2, r3]
 800631e:	689b      	ldr	r3, [r3, #8]
 8006320:	6839      	ldr	r1, [r7, #0]
 8006322:	687a      	ldr	r2, [r7, #4]
 8006324:	0010      	movs	r0, r2
 8006326:	4798      	blx	r3
      break;
 8006328:	e048      	b.n	80063bc <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	785b      	ldrb	r3, [r3, #1]
 800632e:	2b09      	cmp	r3, #9
 8006330:	d835      	bhi.n	800639e <USBD_StdDevReq+0xb2>
 8006332:	009a      	lsls	r2, r3, #2
 8006334:	4b25      	ldr	r3, [pc, #148]	; (80063cc <USBD_StdDevReq+0xe0>)
 8006336:	18d3      	adds	r3, r2, r3
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800633c:	683a      	ldr	r2, [r7, #0]
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	0011      	movs	r1, r2
 8006342:	0018      	movs	r0, r3
 8006344:	f000 fa52 	bl	80067ec <USBD_GetDescriptor>
          break;
 8006348:	e030      	b.n	80063ac <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800634a:	683a      	ldr	r2, [r7, #0]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	0011      	movs	r1, r2
 8006350:	0018      	movs	r0, r3
 8006352:	f000 fbfd 	bl	8006b50 <USBD_SetAddress>
          break;
 8006356:	e029      	b.n	80063ac <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8006358:	683a      	ldr	r2, [r7, #0]
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	0011      	movs	r1, r2
 800635e:	0018      	movs	r0, r3
 8006360:	f000 fc4a 	bl	8006bf8 <USBD_SetConfig>
          break;
 8006364:	e022      	b.n	80063ac <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006366:	683a      	ldr	r2, [r7, #0]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	0011      	movs	r1, r2
 800636c:	0018      	movs	r0, r3
 800636e:	f000 fce7 	bl	8006d40 <USBD_GetConfig>
          break;
 8006372:	e01b      	b.n	80063ac <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006374:	683a      	ldr	r2, [r7, #0]
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	0011      	movs	r1, r2
 800637a:	0018      	movs	r0, r3
 800637c:	f000 fd1b 	bl	8006db6 <USBD_GetStatus>
          break;
 8006380:	e014      	b.n	80063ac <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006382:	683a      	ldr	r2, [r7, #0]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	0011      	movs	r1, r2
 8006388:	0018      	movs	r0, r3
 800638a:	f000 fd4e 	bl	8006e2a <USBD_SetFeature>
          break;
 800638e:	e00d      	b.n	80063ac <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006390:	683a      	ldr	r2, [r7, #0]
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	0011      	movs	r1, r2
 8006396:	0018      	movs	r0, r3
 8006398:	f000 fd5d 	bl	8006e56 <USBD_ClrFeature>
          break;
 800639c:	e006      	b.n	80063ac <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800639e:	683a      	ldr	r2, [r7, #0]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	0011      	movs	r1, r2
 80063a4:	0018      	movs	r0, r3
 80063a6:	f000 fdb7 	bl	8006f18 <USBD_CtlError>
          break;
 80063aa:	46c0      	nop			; (mov r8, r8)
      }
      break;
 80063ac:	e006      	b.n	80063bc <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80063ae:	683a      	ldr	r2, [r7, #0]
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	0011      	movs	r1, r2
 80063b4:	0018      	movs	r0, r3
 80063b6:	f000 fdaf 	bl	8006f18 <USBD_CtlError>
      break;
 80063ba:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 80063bc:	230f      	movs	r3, #15
 80063be:	18fb      	adds	r3, r7, r3
 80063c0:	781b      	ldrb	r3, [r3, #0]
}
 80063c2:	0018      	movs	r0, r3
 80063c4:	46bd      	mov	sp, r7
 80063c6:	b004      	add	sp, #16
 80063c8:	bd80      	pop	{r7, pc}
 80063ca:	46c0      	nop			; (mov r8, r8)
 80063cc:	08007b2c 	.word	0x08007b2c

080063d0 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80063d0:	b5b0      	push	{r4, r5, r7, lr}
 80063d2:	b084      	sub	sp, #16
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
 80063d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80063da:	230f      	movs	r3, #15
 80063dc:	18fb      	adds	r3, r7, r3
 80063de:	2200      	movs	r2, #0
 80063e0:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	781b      	ldrb	r3, [r3, #0]
 80063e6:	001a      	movs	r2, r3
 80063e8:	2360      	movs	r3, #96	; 0x60
 80063ea:	4013      	ands	r3, r2
 80063ec:	2b40      	cmp	r3, #64	; 0x40
 80063ee:	d004      	beq.n	80063fa <USBD_StdItfReq+0x2a>
 80063f0:	d839      	bhi.n	8006466 <USBD_StdItfReq+0x96>
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d001      	beq.n	80063fa <USBD_StdItfReq+0x2a>
 80063f6:	2b20      	cmp	r3, #32
 80063f8:	d135      	bne.n	8006466 <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80063fa:	687a      	ldr	r2, [r7, #4]
 80063fc:	23a7      	movs	r3, #167	; 0xa7
 80063fe:	009b      	lsls	r3, r3, #2
 8006400:	5cd3      	ldrb	r3, [r2, r3]
 8006402:	3b01      	subs	r3, #1
 8006404:	2b02      	cmp	r3, #2
 8006406:	d825      	bhi.n	8006454 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	889b      	ldrh	r3, [r3, #4]
 800640c:	b2db      	uxtb	r3, r3
 800640e:	2b01      	cmp	r3, #1
 8006410:	d819      	bhi.n	8006446 <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006412:	687a      	ldr	r2, [r7, #4]
 8006414:	23ad      	movs	r3, #173	; 0xad
 8006416:	009b      	lsls	r3, r3, #2
 8006418:	58d3      	ldr	r3, [r2, r3]
 800641a:	689b      	ldr	r3, [r3, #8]
 800641c:	250f      	movs	r5, #15
 800641e:	197c      	adds	r4, r7, r5
 8006420:	6839      	ldr	r1, [r7, #0]
 8006422:	687a      	ldr	r2, [r7, #4]
 8006424:	0010      	movs	r0, r2
 8006426:	4798      	blx	r3
 8006428:	0003      	movs	r3, r0
 800642a:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	88db      	ldrh	r3, [r3, #6]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d116      	bne.n	8006462 <USBD_StdItfReq+0x92>
 8006434:	197b      	adds	r3, r7, r5
 8006436:	781b      	ldrb	r3, [r3, #0]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d112      	bne.n	8006462 <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	0018      	movs	r0, r3
 8006440:	f000 fe2e 	bl	80070a0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006444:	e00d      	b.n	8006462 <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 8006446:	683a      	ldr	r2, [r7, #0]
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	0011      	movs	r1, r2
 800644c:	0018      	movs	r0, r3
 800644e:	f000 fd63 	bl	8006f18 <USBD_CtlError>
          break;
 8006452:	e006      	b.n	8006462 <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 8006454:	683a      	ldr	r2, [r7, #0]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	0011      	movs	r1, r2
 800645a:	0018      	movs	r0, r3
 800645c:	f000 fd5c 	bl	8006f18 <USBD_CtlError>
          break;
 8006460:	e000      	b.n	8006464 <USBD_StdItfReq+0x94>
          break;
 8006462:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8006464:	e006      	b.n	8006474 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 8006466:	683a      	ldr	r2, [r7, #0]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	0011      	movs	r1, r2
 800646c:	0018      	movs	r0, r3
 800646e:	f000 fd53 	bl	8006f18 <USBD_CtlError>
      break;
 8006472:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 8006474:	2300      	movs	r3, #0
}
 8006476:	0018      	movs	r0, r3
 8006478:	46bd      	mov	sp, r7
 800647a:	b004      	add	sp, #16
 800647c:	bdb0      	pop	{r4, r5, r7, pc}

0800647e <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800647e:	b5b0      	push	{r4, r5, r7, lr}
 8006480:	b084      	sub	sp, #16
 8006482:	af00      	add	r7, sp, #0
 8006484:	6078      	str	r0, [r7, #4]
 8006486:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006488:	230f      	movs	r3, #15
 800648a:	18fb      	adds	r3, r7, r3
 800648c:	2200      	movs	r2, #0
 800648e:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	889a      	ldrh	r2, [r3, #4]
 8006494:	230e      	movs	r3, #14
 8006496:	18fb      	adds	r3, r7, r3
 8006498:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	781b      	ldrb	r3, [r3, #0]
 800649e:	001a      	movs	r2, r3
 80064a0:	2360      	movs	r3, #96	; 0x60
 80064a2:	4013      	ands	r3, r2
 80064a4:	2b40      	cmp	r3, #64	; 0x40
 80064a6:	d006      	beq.n	80064b6 <USBD_StdEPReq+0x38>
 80064a8:	d900      	bls.n	80064ac <USBD_StdEPReq+0x2e>
 80064aa:	e190      	b.n	80067ce <USBD_StdEPReq+0x350>
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d00c      	beq.n	80064ca <USBD_StdEPReq+0x4c>
 80064b0:	2b20      	cmp	r3, #32
 80064b2:	d000      	beq.n	80064b6 <USBD_StdEPReq+0x38>
 80064b4:	e18b      	b.n	80067ce <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80064b6:	687a      	ldr	r2, [r7, #4]
 80064b8:	23ad      	movs	r3, #173	; 0xad
 80064ba:	009b      	lsls	r3, r3, #2
 80064bc:	58d3      	ldr	r3, [r2, r3]
 80064be:	689b      	ldr	r3, [r3, #8]
 80064c0:	6839      	ldr	r1, [r7, #0]
 80064c2:	687a      	ldr	r2, [r7, #4]
 80064c4:	0010      	movs	r0, r2
 80064c6:	4798      	blx	r3
      break;
 80064c8:	e188      	b.n	80067dc <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	781b      	ldrb	r3, [r3, #0]
 80064ce:	001a      	movs	r2, r3
 80064d0:	2360      	movs	r3, #96	; 0x60
 80064d2:	4013      	ands	r3, r2
 80064d4:	2b20      	cmp	r3, #32
 80064d6:	d10f      	bne.n	80064f8 <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80064d8:	687a      	ldr	r2, [r7, #4]
 80064da:	23ad      	movs	r3, #173	; 0xad
 80064dc:	009b      	lsls	r3, r3, #2
 80064de:	58d3      	ldr	r3, [r2, r3]
 80064e0:	689b      	ldr	r3, [r3, #8]
 80064e2:	250f      	movs	r5, #15
 80064e4:	197c      	adds	r4, r7, r5
 80064e6:	6839      	ldr	r1, [r7, #0]
 80064e8:	687a      	ldr	r2, [r7, #4]
 80064ea:	0010      	movs	r0, r2
 80064ec:	4798      	blx	r3
 80064ee:	0003      	movs	r3, r0
 80064f0:	7023      	strb	r3, [r4, #0]

        return ret;
 80064f2:	197b      	adds	r3, r7, r5
 80064f4:	781b      	ldrb	r3, [r3, #0]
 80064f6:	e174      	b.n	80067e2 <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	785b      	ldrb	r3, [r3, #1]
 80064fc:	2b03      	cmp	r3, #3
 80064fe:	d007      	beq.n	8006510 <USBD_StdEPReq+0x92>
 8006500:	dd00      	ble.n	8006504 <USBD_StdEPReq+0x86>
 8006502:	e15c      	b.n	80067be <USBD_StdEPReq+0x340>
 8006504:	2b00      	cmp	r3, #0
 8006506:	d100      	bne.n	800650a <USBD_StdEPReq+0x8c>
 8006508:	e092      	b.n	8006630 <USBD_StdEPReq+0x1b2>
 800650a:	2b01      	cmp	r3, #1
 800650c:	d04b      	beq.n	80065a6 <USBD_StdEPReq+0x128>
 800650e:	e156      	b.n	80067be <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006510:	687a      	ldr	r2, [r7, #4]
 8006512:	23a7      	movs	r3, #167	; 0xa7
 8006514:	009b      	lsls	r3, r3, #2
 8006516:	5cd3      	ldrb	r3, [r2, r3]
 8006518:	2b02      	cmp	r3, #2
 800651a:	d002      	beq.n	8006522 <USBD_StdEPReq+0xa4>
 800651c:	2b03      	cmp	r3, #3
 800651e:	d01d      	beq.n	800655c <USBD_StdEPReq+0xde>
 8006520:	e039      	b.n	8006596 <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006522:	220e      	movs	r2, #14
 8006524:	18bb      	adds	r3, r7, r2
 8006526:	781b      	ldrb	r3, [r3, #0]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d010      	beq.n	800654e <USBD_StdEPReq+0xd0>
 800652c:	18bb      	adds	r3, r7, r2
 800652e:	781b      	ldrb	r3, [r3, #0]
 8006530:	2b80      	cmp	r3, #128	; 0x80
 8006532:	d00c      	beq.n	800654e <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006534:	18bb      	adds	r3, r7, r2
 8006536:	781a      	ldrb	r2, [r3, #0]
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	0011      	movs	r1, r2
 800653c:	0018      	movs	r0, r3
 800653e:	f001 f8ee 	bl	800771e <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2180      	movs	r1, #128	; 0x80
 8006546:	0018      	movs	r0, r3
 8006548:	f001 f8e9 	bl	800771e <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800654c:	e02a      	b.n	80065a4 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 800654e:	683a      	ldr	r2, [r7, #0]
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	0011      	movs	r1, r2
 8006554:	0018      	movs	r0, r3
 8006556:	f000 fcdf 	bl	8006f18 <USBD_CtlError>
              break;
 800655a:	e023      	b.n	80065a4 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	885b      	ldrh	r3, [r3, #2]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d113      	bne.n	800658c <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 8006564:	220e      	movs	r2, #14
 8006566:	18bb      	adds	r3, r7, r2
 8006568:	781b      	ldrb	r3, [r3, #0]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d00e      	beq.n	800658c <USBD_StdEPReq+0x10e>
 800656e:	18bb      	adds	r3, r7, r2
 8006570:	781b      	ldrb	r3, [r3, #0]
 8006572:	2b80      	cmp	r3, #128	; 0x80
 8006574:	d00a      	beq.n	800658c <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	88db      	ldrh	r3, [r3, #6]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d106      	bne.n	800658c <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800657e:	18bb      	adds	r3, r7, r2
 8006580:	781a      	ldrb	r2, [r3, #0]
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	0011      	movs	r1, r2
 8006586:	0018      	movs	r0, r3
 8006588:	f001 f8c9 	bl	800771e <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	0018      	movs	r0, r3
 8006590:	f000 fd86 	bl	80070a0 <USBD_CtlSendStatus>

              break;
 8006594:	e006      	b.n	80065a4 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 8006596:	683a      	ldr	r2, [r7, #0]
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	0011      	movs	r1, r2
 800659c:	0018      	movs	r0, r3
 800659e:	f000 fcbb 	bl	8006f18 <USBD_CtlError>
              break;
 80065a2:	46c0      	nop			; (mov r8, r8)
          }
          break;
 80065a4:	e112      	b.n	80067cc <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80065a6:	687a      	ldr	r2, [r7, #4]
 80065a8:	23a7      	movs	r3, #167	; 0xa7
 80065aa:	009b      	lsls	r3, r3, #2
 80065ac:	5cd3      	ldrb	r3, [r2, r3]
 80065ae:	2b02      	cmp	r3, #2
 80065b0:	d002      	beq.n	80065b8 <USBD_StdEPReq+0x13a>
 80065b2:	2b03      	cmp	r3, #3
 80065b4:	d01d      	beq.n	80065f2 <USBD_StdEPReq+0x174>
 80065b6:	e032      	b.n	800661e <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80065b8:	220e      	movs	r2, #14
 80065ba:	18bb      	adds	r3, r7, r2
 80065bc:	781b      	ldrb	r3, [r3, #0]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d010      	beq.n	80065e4 <USBD_StdEPReq+0x166>
 80065c2:	18bb      	adds	r3, r7, r2
 80065c4:	781b      	ldrb	r3, [r3, #0]
 80065c6:	2b80      	cmp	r3, #128	; 0x80
 80065c8:	d00c      	beq.n	80065e4 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80065ca:	18bb      	adds	r3, r7, r2
 80065cc:	781a      	ldrb	r2, [r3, #0]
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	0011      	movs	r1, r2
 80065d2:	0018      	movs	r0, r3
 80065d4:	f001 f8a3 	bl	800771e <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2180      	movs	r1, #128	; 0x80
 80065dc:	0018      	movs	r0, r3
 80065de:	f001 f89e 	bl	800771e <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80065e2:	e024      	b.n	800662e <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 80065e4:	683a      	ldr	r2, [r7, #0]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	0011      	movs	r1, r2
 80065ea:	0018      	movs	r0, r3
 80065ec:	f000 fc94 	bl	8006f18 <USBD_CtlError>
              break;
 80065f0:	e01d      	b.n	800662e <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	885b      	ldrh	r3, [r3, #2]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d118      	bne.n	800662c <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80065fa:	210e      	movs	r1, #14
 80065fc:	187b      	adds	r3, r7, r1
 80065fe:	781b      	ldrb	r3, [r3, #0]
 8006600:	227f      	movs	r2, #127	; 0x7f
 8006602:	4013      	ands	r3, r2
 8006604:	d006      	beq.n	8006614 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8006606:	187b      	adds	r3, r7, r1
 8006608:	781a      	ldrb	r2, [r3, #0]
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	0011      	movs	r1, r2
 800660e:	0018      	movs	r0, r3
 8006610:	f001 f8b0 	bl	8007774 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	0018      	movs	r0, r3
 8006618:	f000 fd42 	bl	80070a0 <USBD_CtlSendStatus>
              }
              break;
 800661c:	e006      	b.n	800662c <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 800661e:	683a      	ldr	r2, [r7, #0]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	0011      	movs	r1, r2
 8006624:	0018      	movs	r0, r3
 8006626:	f000 fc77 	bl	8006f18 <USBD_CtlError>
              break;
 800662a:	e000      	b.n	800662e <USBD_StdEPReq+0x1b0>
              break;
 800662c:	46c0      	nop			; (mov r8, r8)
          }
          break;
 800662e:	e0cd      	b.n	80067cc <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006630:	687a      	ldr	r2, [r7, #4]
 8006632:	23a7      	movs	r3, #167	; 0xa7
 8006634:	009b      	lsls	r3, r3, #2
 8006636:	5cd3      	ldrb	r3, [r2, r3]
 8006638:	2b02      	cmp	r3, #2
 800663a:	d002      	beq.n	8006642 <USBD_StdEPReq+0x1c4>
 800663c:	2b03      	cmp	r3, #3
 800663e:	d03c      	beq.n	80066ba <USBD_StdEPReq+0x23c>
 8006640:	e0b5      	b.n	80067ae <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006642:	220e      	movs	r2, #14
 8006644:	18bb      	adds	r3, r7, r2
 8006646:	781b      	ldrb	r3, [r3, #0]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d00a      	beq.n	8006662 <USBD_StdEPReq+0x1e4>
 800664c:	18bb      	adds	r3, r7, r2
 800664e:	781b      	ldrb	r3, [r3, #0]
 8006650:	2b80      	cmp	r3, #128	; 0x80
 8006652:	d006      	beq.n	8006662 <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 8006654:	683a      	ldr	r2, [r7, #0]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	0011      	movs	r1, r2
 800665a:	0018      	movs	r0, r3
 800665c:	f000 fc5c 	bl	8006f18 <USBD_CtlError>
                break;
 8006660:	e0ac      	b.n	80067bc <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006662:	220e      	movs	r2, #14
 8006664:	18bb      	adds	r3, r7, r2
 8006666:	781b      	ldrb	r3, [r3, #0]
 8006668:	b25b      	sxtb	r3, r3
 800666a:	2b00      	cmp	r3, #0
 800666c:	da0c      	bge.n	8006688 <USBD_StdEPReq+0x20a>
 800666e:	18bb      	adds	r3, r7, r2
 8006670:	781b      	ldrb	r3, [r3, #0]
 8006672:	227f      	movs	r2, #127	; 0x7f
 8006674:	401a      	ands	r2, r3
 8006676:	0013      	movs	r3, r2
 8006678:	009b      	lsls	r3, r3, #2
 800667a:	189b      	adds	r3, r3, r2
 800667c:	009b      	lsls	r3, r3, #2
 800667e:	3310      	adds	r3, #16
 8006680:	687a      	ldr	r2, [r7, #4]
 8006682:	18d3      	adds	r3, r2, r3
 8006684:	3304      	adds	r3, #4
 8006686:	e00d      	b.n	80066a4 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006688:	230e      	movs	r3, #14
 800668a:	18fb      	adds	r3, r7, r3
 800668c:	781b      	ldrb	r3, [r3, #0]
 800668e:	227f      	movs	r2, #127	; 0x7f
 8006690:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006692:	0013      	movs	r3, r2
 8006694:	009b      	lsls	r3, r3, #2
 8006696:	189b      	adds	r3, r3, r2
 8006698:	009b      	lsls	r3, r3, #2
 800669a:	3351      	adds	r3, #81	; 0x51
 800669c:	33ff      	adds	r3, #255	; 0xff
 800669e:	687a      	ldr	r2, [r7, #4]
 80066a0:	18d3      	adds	r3, r2, r3
 80066a2:	3304      	adds	r3, #4
 80066a4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	2200      	movs	r2, #0
 80066aa:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80066ac:	68b9      	ldr	r1, [r7, #8]
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2202      	movs	r2, #2
 80066b2:	0018      	movs	r0, r3
 80066b4:	f000 fcae 	bl	8007014 <USBD_CtlSendData>
              break;
 80066b8:	e080      	b.n	80067bc <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80066ba:	220e      	movs	r2, #14
 80066bc:	18bb      	adds	r3, r7, r2
 80066be:	781b      	ldrb	r3, [r3, #0]
 80066c0:	b25b      	sxtb	r3, r3
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	da14      	bge.n	80066f0 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80066c6:	18bb      	adds	r3, r7, r2
 80066c8:	781b      	ldrb	r3, [r3, #0]
 80066ca:	220f      	movs	r2, #15
 80066cc:	401a      	ands	r2, r3
 80066ce:	6879      	ldr	r1, [r7, #4]
 80066d0:	0013      	movs	r3, r2
 80066d2:	009b      	lsls	r3, r3, #2
 80066d4:	189b      	adds	r3, r3, r2
 80066d6:	009b      	lsls	r3, r3, #2
 80066d8:	18cb      	adds	r3, r1, r3
 80066da:	3318      	adds	r3, #24
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d11e      	bne.n	8006720 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 80066e2:	683a      	ldr	r2, [r7, #0]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	0011      	movs	r1, r2
 80066e8:	0018      	movs	r0, r3
 80066ea:	f000 fc15 	bl	8006f18 <USBD_CtlError>
                  break;
 80066ee:	e065      	b.n	80067bc <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80066f0:	230e      	movs	r3, #14
 80066f2:	18fb      	adds	r3, r7, r3
 80066f4:	781b      	ldrb	r3, [r3, #0]
 80066f6:	220f      	movs	r2, #15
 80066f8:	401a      	ands	r2, r3
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	23ac      	movs	r3, #172	; 0xac
 80066fe:	0059      	lsls	r1, r3, #1
 8006700:	0013      	movs	r3, r2
 8006702:	009b      	lsls	r3, r3, #2
 8006704:	189b      	adds	r3, r3, r2
 8006706:	009b      	lsls	r3, r3, #2
 8006708:	18c3      	adds	r3, r0, r3
 800670a:	185b      	adds	r3, r3, r1
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d106      	bne.n	8006720 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 8006712:	683a      	ldr	r2, [r7, #0]
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	0011      	movs	r1, r2
 8006718:	0018      	movs	r0, r3
 800671a:	f000 fbfd 	bl	8006f18 <USBD_CtlError>
                  break;
 800671e:	e04d      	b.n	80067bc <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006720:	220e      	movs	r2, #14
 8006722:	18bb      	adds	r3, r7, r2
 8006724:	781b      	ldrb	r3, [r3, #0]
 8006726:	b25b      	sxtb	r3, r3
 8006728:	2b00      	cmp	r3, #0
 800672a:	da0c      	bge.n	8006746 <USBD_StdEPReq+0x2c8>
 800672c:	18bb      	adds	r3, r7, r2
 800672e:	781b      	ldrb	r3, [r3, #0]
 8006730:	227f      	movs	r2, #127	; 0x7f
 8006732:	401a      	ands	r2, r3
 8006734:	0013      	movs	r3, r2
 8006736:	009b      	lsls	r3, r3, #2
 8006738:	189b      	adds	r3, r3, r2
 800673a:	009b      	lsls	r3, r3, #2
 800673c:	3310      	adds	r3, #16
 800673e:	687a      	ldr	r2, [r7, #4]
 8006740:	18d3      	adds	r3, r2, r3
 8006742:	3304      	adds	r3, #4
 8006744:	e00d      	b.n	8006762 <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006746:	230e      	movs	r3, #14
 8006748:	18fb      	adds	r3, r7, r3
 800674a:	781b      	ldrb	r3, [r3, #0]
 800674c:	227f      	movs	r2, #127	; 0x7f
 800674e:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006750:	0013      	movs	r3, r2
 8006752:	009b      	lsls	r3, r3, #2
 8006754:	189b      	adds	r3, r3, r2
 8006756:	009b      	lsls	r3, r3, #2
 8006758:	3351      	adds	r3, #81	; 0x51
 800675a:	33ff      	adds	r3, #255	; 0xff
 800675c:	687a      	ldr	r2, [r7, #4]
 800675e:	18d3      	adds	r3, r2, r3
 8006760:	3304      	adds	r3, #4
 8006762:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006764:	220e      	movs	r2, #14
 8006766:	18bb      	adds	r3, r7, r2
 8006768:	781b      	ldrb	r3, [r3, #0]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d003      	beq.n	8006776 <USBD_StdEPReq+0x2f8>
 800676e:	18bb      	adds	r3, r7, r2
 8006770:	781b      	ldrb	r3, [r3, #0]
 8006772:	2b80      	cmp	r3, #128	; 0x80
 8006774:	d103      	bne.n	800677e <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	2200      	movs	r2, #0
 800677a:	601a      	str	r2, [r3, #0]
 800677c:	e010      	b.n	80067a0 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800677e:	230e      	movs	r3, #14
 8006780:	18fb      	adds	r3, r7, r3
 8006782:	781a      	ldrb	r2, [r3, #0]
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	0011      	movs	r1, r2
 8006788:	0018      	movs	r0, r3
 800678a:	f001 f81e 	bl	80077ca <USBD_LL_IsStallEP>
 800678e:	1e03      	subs	r3, r0, #0
 8006790:	d003      	beq.n	800679a <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	2201      	movs	r2, #1
 8006796:	601a      	str	r2, [r3, #0]
 8006798:	e002      	b.n	80067a0 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 800679a:	68bb      	ldr	r3, [r7, #8]
 800679c:	2200      	movs	r2, #0
 800679e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80067a0:	68b9      	ldr	r1, [r7, #8]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2202      	movs	r2, #2
 80067a6:	0018      	movs	r0, r3
 80067a8:	f000 fc34 	bl	8007014 <USBD_CtlSendData>
              break;
 80067ac:	e006      	b.n	80067bc <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 80067ae:	683a      	ldr	r2, [r7, #0]
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	0011      	movs	r1, r2
 80067b4:	0018      	movs	r0, r3
 80067b6:	f000 fbaf 	bl	8006f18 <USBD_CtlError>
              break;
 80067ba:	46c0      	nop			; (mov r8, r8)
          }
          break;
 80067bc:	e006      	b.n	80067cc <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 80067be:	683a      	ldr	r2, [r7, #0]
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	0011      	movs	r1, r2
 80067c4:	0018      	movs	r0, r3
 80067c6:	f000 fba7 	bl	8006f18 <USBD_CtlError>
          break;
 80067ca:	46c0      	nop			; (mov r8, r8)
      }
      break;
 80067cc:	e006      	b.n	80067dc <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 80067ce:	683a      	ldr	r2, [r7, #0]
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	0011      	movs	r1, r2
 80067d4:	0018      	movs	r0, r3
 80067d6:	f000 fb9f 	bl	8006f18 <USBD_CtlError>
      break;
 80067da:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 80067dc:	230f      	movs	r3, #15
 80067de:	18fb      	adds	r3, r7, r3
 80067e0:	781b      	ldrb	r3, [r3, #0]
}
 80067e2:	0018      	movs	r0, r3
 80067e4:	46bd      	mov	sp, r7
 80067e6:	b004      	add	sp, #16
 80067e8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080067ec <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b084      	sub	sp, #16
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
 80067f4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80067f6:	2308      	movs	r3, #8
 80067f8:	18fb      	adds	r3, r7, r3
 80067fa:	2200      	movs	r2, #0
 80067fc:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 80067fe:	2300      	movs	r3, #0
 8006800:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006802:	230b      	movs	r3, #11
 8006804:	18fb      	adds	r3, r7, r3
 8006806:	2200      	movs	r2, #0
 8006808:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	885b      	ldrh	r3, [r3, #2]
 800680e:	0a1b      	lsrs	r3, r3, #8
 8006810:	b29b      	uxth	r3, r3
 8006812:	2b07      	cmp	r3, #7
 8006814:	d900      	bls.n	8006818 <USBD_GetDescriptor+0x2c>
 8006816:	e159      	b.n	8006acc <USBD_GetDescriptor+0x2e0>
 8006818:	009a      	lsls	r2, r3, #2
 800681a:	4bcb      	ldr	r3, [pc, #812]	; (8006b48 <USBD_GetDescriptor+0x35c>)
 800681c:	18d3      	adds	r3, r2, r3
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006822:	687a      	ldr	r2, [r7, #4]
 8006824:	23ac      	movs	r3, #172	; 0xac
 8006826:	009b      	lsls	r3, r3, #2
 8006828:	58d3      	ldr	r3, [r2, r3]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	687a      	ldr	r2, [r7, #4]
 800682e:	7c12      	ldrb	r2, [r2, #16]
 8006830:	2108      	movs	r1, #8
 8006832:	1879      	adds	r1, r7, r1
 8006834:	0010      	movs	r0, r2
 8006836:	4798      	blx	r3
 8006838:	0003      	movs	r3, r0
 800683a:	60fb      	str	r3, [r7, #12]
      break;
 800683c:	e153      	b.n	8006ae6 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	7c1b      	ldrb	r3, [r3, #16]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d10f      	bne.n	8006866 <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006846:	687a      	ldr	r2, [r7, #4]
 8006848:	23ad      	movs	r3, #173	; 0xad
 800684a:	009b      	lsls	r3, r3, #2
 800684c:	58d3      	ldr	r3, [r2, r3]
 800684e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006850:	2208      	movs	r2, #8
 8006852:	18ba      	adds	r2, r7, r2
 8006854:	0010      	movs	r0, r2
 8006856:	4798      	blx	r3
 8006858:	0003      	movs	r3, r0
 800685a:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	3301      	adds	r3, #1
 8006860:	2202      	movs	r2, #2
 8006862:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006864:	e13f      	b.n	8006ae6 <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006866:	687a      	ldr	r2, [r7, #4]
 8006868:	23ad      	movs	r3, #173	; 0xad
 800686a:	009b      	lsls	r3, r3, #2
 800686c:	58d3      	ldr	r3, [r2, r3]
 800686e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006870:	2208      	movs	r2, #8
 8006872:	18ba      	adds	r2, r7, r2
 8006874:	0010      	movs	r0, r2
 8006876:	4798      	blx	r3
 8006878:	0003      	movs	r3, r0
 800687a:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	3301      	adds	r3, #1
 8006880:	2202      	movs	r2, #2
 8006882:	701a      	strb	r2, [r3, #0]
      break;
 8006884:	e12f      	b.n	8006ae6 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	885b      	ldrh	r3, [r3, #2]
 800688a:	b2db      	uxtb	r3, r3
 800688c:	2b05      	cmp	r3, #5
 800688e:	d900      	bls.n	8006892 <USBD_GetDescriptor+0xa6>
 8006890:	e0d0      	b.n	8006a34 <USBD_GetDescriptor+0x248>
 8006892:	009a      	lsls	r2, r3, #2
 8006894:	4bad      	ldr	r3, [pc, #692]	; (8006b4c <USBD_GetDescriptor+0x360>)
 8006896:	18d3      	adds	r3, r2, r3
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800689c:	687a      	ldr	r2, [r7, #4]
 800689e:	23ac      	movs	r3, #172	; 0xac
 80068a0:	009b      	lsls	r3, r3, #2
 80068a2:	58d3      	ldr	r3, [r2, r3]
 80068a4:	685b      	ldr	r3, [r3, #4]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d00d      	beq.n	80068c6 <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80068aa:	687a      	ldr	r2, [r7, #4]
 80068ac:	23ac      	movs	r3, #172	; 0xac
 80068ae:	009b      	lsls	r3, r3, #2
 80068b0:	58d3      	ldr	r3, [r2, r3]
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	687a      	ldr	r2, [r7, #4]
 80068b6:	7c12      	ldrb	r2, [r2, #16]
 80068b8:	2108      	movs	r1, #8
 80068ba:	1879      	adds	r1, r7, r1
 80068bc:	0010      	movs	r0, r2
 80068be:	4798      	blx	r3
 80068c0:	0003      	movs	r3, r0
 80068c2:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80068c4:	e0c3      	b.n	8006a4e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80068c6:	683a      	ldr	r2, [r7, #0]
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	0011      	movs	r1, r2
 80068cc:	0018      	movs	r0, r3
 80068ce:	f000 fb23 	bl	8006f18 <USBD_CtlError>
            err++;
 80068d2:	210b      	movs	r1, #11
 80068d4:	187b      	adds	r3, r7, r1
 80068d6:	781a      	ldrb	r2, [r3, #0]
 80068d8:	187b      	adds	r3, r7, r1
 80068da:	3201      	adds	r2, #1
 80068dc:	701a      	strb	r2, [r3, #0]
          break;
 80068de:	e0b6      	b.n	8006a4e <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80068e0:	687a      	ldr	r2, [r7, #4]
 80068e2:	23ac      	movs	r3, #172	; 0xac
 80068e4:	009b      	lsls	r3, r3, #2
 80068e6:	58d3      	ldr	r3, [r2, r3]
 80068e8:	689b      	ldr	r3, [r3, #8]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d00d      	beq.n	800690a <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80068ee:	687a      	ldr	r2, [r7, #4]
 80068f0:	23ac      	movs	r3, #172	; 0xac
 80068f2:	009b      	lsls	r3, r3, #2
 80068f4:	58d3      	ldr	r3, [r2, r3]
 80068f6:	689b      	ldr	r3, [r3, #8]
 80068f8:	687a      	ldr	r2, [r7, #4]
 80068fa:	7c12      	ldrb	r2, [r2, #16]
 80068fc:	2108      	movs	r1, #8
 80068fe:	1879      	adds	r1, r7, r1
 8006900:	0010      	movs	r0, r2
 8006902:	4798      	blx	r3
 8006904:	0003      	movs	r3, r0
 8006906:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006908:	e0a1      	b.n	8006a4e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800690a:	683a      	ldr	r2, [r7, #0]
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	0011      	movs	r1, r2
 8006910:	0018      	movs	r0, r3
 8006912:	f000 fb01 	bl	8006f18 <USBD_CtlError>
            err++;
 8006916:	210b      	movs	r1, #11
 8006918:	187b      	adds	r3, r7, r1
 800691a:	781a      	ldrb	r2, [r3, #0]
 800691c:	187b      	adds	r3, r7, r1
 800691e:	3201      	adds	r2, #1
 8006920:	701a      	strb	r2, [r3, #0]
          break;
 8006922:	e094      	b.n	8006a4e <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006924:	687a      	ldr	r2, [r7, #4]
 8006926:	23ac      	movs	r3, #172	; 0xac
 8006928:	009b      	lsls	r3, r3, #2
 800692a:	58d3      	ldr	r3, [r2, r3]
 800692c:	68db      	ldr	r3, [r3, #12]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d00d      	beq.n	800694e <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006932:	687a      	ldr	r2, [r7, #4]
 8006934:	23ac      	movs	r3, #172	; 0xac
 8006936:	009b      	lsls	r3, r3, #2
 8006938:	58d3      	ldr	r3, [r2, r3]
 800693a:	68db      	ldr	r3, [r3, #12]
 800693c:	687a      	ldr	r2, [r7, #4]
 800693e:	7c12      	ldrb	r2, [r2, #16]
 8006940:	2108      	movs	r1, #8
 8006942:	1879      	adds	r1, r7, r1
 8006944:	0010      	movs	r0, r2
 8006946:	4798      	blx	r3
 8006948:	0003      	movs	r3, r0
 800694a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800694c:	e07f      	b.n	8006a4e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800694e:	683a      	ldr	r2, [r7, #0]
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	0011      	movs	r1, r2
 8006954:	0018      	movs	r0, r3
 8006956:	f000 fadf 	bl	8006f18 <USBD_CtlError>
            err++;
 800695a:	210b      	movs	r1, #11
 800695c:	187b      	adds	r3, r7, r1
 800695e:	781a      	ldrb	r2, [r3, #0]
 8006960:	187b      	adds	r3, r7, r1
 8006962:	3201      	adds	r2, #1
 8006964:	701a      	strb	r2, [r3, #0]
          break;
 8006966:	e072      	b.n	8006a4e <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006968:	687a      	ldr	r2, [r7, #4]
 800696a:	23ac      	movs	r3, #172	; 0xac
 800696c:	009b      	lsls	r3, r3, #2
 800696e:	58d3      	ldr	r3, [r2, r3]
 8006970:	691b      	ldr	r3, [r3, #16]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d00d      	beq.n	8006992 <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006976:	687a      	ldr	r2, [r7, #4]
 8006978:	23ac      	movs	r3, #172	; 0xac
 800697a:	009b      	lsls	r3, r3, #2
 800697c:	58d3      	ldr	r3, [r2, r3]
 800697e:	691b      	ldr	r3, [r3, #16]
 8006980:	687a      	ldr	r2, [r7, #4]
 8006982:	7c12      	ldrb	r2, [r2, #16]
 8006984:	2108      	movs	r1, #8
 8006986:	1879      	adds	r1, r7, r1
 8006988:	0010      	movs	r0, r2
 800698a:	4798      	blx	r3
 800698c:	0003      	movs	r3, r0
 800698e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006990:	e05d      	b.n	8006a4e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8006992:	683a      	ldr	r2, [r7, #0]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	0011      	movs	r1, r2
 8006998:	0018      	movs	r0, r3
 800699a:	f000 fabd 	bl	8006f18 <USBD_CtlError>
            err++;
 800699e:	210b      	movs	r1, #11
 80069a0:	187b      	adds	r3, r7, r1
 80069a2:	781a      	ldrb	r2, [r3, #0]
 80069a4:	187b      	adds	r3, r7, r1
 80069a6:	3201      	adds	r2, #1
 80069a8:	701a      	strb	r2, [r3, #0]
          break;
 80069aa:	e050      	b.n	8006a4e <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80069ac:	687a      	ldr	r2, [r7, #4]
 80069ae:	23ac      	movs	r3, #172	; 0xac
 80069b0:	009b      	lsls	r3, r3, #2
 80069b2:	58d3      	ldr	r3, [r2, r3]
 80069b4:	695b      	ldr	r3, [r3, #20]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d00d      	beq.n	80069d6 <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80069ba:	687a      	ldr	r2, [r7, #4]
 80069bc:	23ac      	movs	r3, #172	; 0xac
 80069be:	009b      	lsls	r3, r3, #2
 80069c0:	58d3      	ldr	r3, [r2, r3]
 80069c2:	695b      	ldr	r3, [r3, #20]
 80069c4:	687a      	ldr	r2, [r7, #4]
 80069c6:	7c12      	ldrb	r2, [r2, #16]
 80069c8:	2108      	movs	r1, #8
 80069ca:	1879      	adds	r1, r7, r1
 80069cc:	0010      	movs	r0, r2
 80069ce:	4798      	blx	r3
 80069d0:	0003      	movs	r3, r0
 80069d2:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80069d4:	e03b      	b.n	8006a4e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80069d6:	683a      	ldr	r2, [r7, #0]
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	0011      	movs	r1, r2
 80069dc:	0018      	movs	r0, r3
 80069de:	f000 fa9b 	bl	8006f18 <USBD_CtlError>
            err++;
 80069e2:	210b      	movs	r1, #11
 80069e4:	187b      	adds	r3, r7, r1
 80069e6:	781a      	ldrb	r2, [r3, #0]
 80069e8:	187b      	adds	r3, r7, r1
 80069ea:	3201      	adds	r2, #1
 80069ec:	701a      	strb	r2, [r3, #0]
          break;
 80069ee:	e02e      	b.n	8006a4e <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80069f0:	687a      	ldr	r2, [r7, #4]
 80069f2:	23ac      	movs	r3, #172	; 0xac
 80069f4:	009b      	lsls	r3, r3, #2
 80069f6:	58d3      	ldr	r3, [r2, r3]
 80069f8:	699b      	ldr	r3, [r3, #24]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d00d      	beq.n	8006a1a <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80069fe:	687a      	ldr	r2, [r7, #4]
 8006a00:	23ac      	movs	r3, #172	; 0xac
 8006a02:	009b      	lsls	r3, r3, #2
 8006a04:	58d3      	ldr	r3, [r2, r3]
 8006a06:	699b      	ldr	r3, [r3, #24]
 8006a08:	687a      	ldr	r2, [r7, #4]
 8006a0a:	7c12      	ldrb	r2, [r2, #16]
 8006a0c:	2108      	movs	r1, #8
 8006a0e:	1879      	adds	r1, r7, r1
 8006a10:	0010      	movs	r0, r2
 8006a12:	4798      	blx	r3
 8006a14:	0003      	movs	r3, r0
 8006a16:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a18:	e019      	b.n	8006a4e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8006a1a:	683a      	ldr	r2, [r7, #0]
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	0011      	movs	r1, r2
 8006a20:	0018      	movs	r0, r3
 8006a22:	f000 fa79 	bl	8006f18 <USBD_CtlError>
            err++;
 8006a26:	210b      	movs	r1, #11
 8006a28:	187b      	adds	r3, r7, r1
 8006a2a:	781a      	ldrb	r2, [r3, #0]
 8006a2c:	187b      	adds	r3, r7, r1
 8006a2e:	3201      	adds	r2, #1
 8006a30:	701a      	strb	r2, [r3, #0]
          break;
 8006a32:	e00c      	b.n	8006a4e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8006a34:	683a      	ldr	r2, [r7, #0]
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	0011      	movs	r1, r2
 8006a3a:	0018      	movs	r0, r3
 8006a3c:	f000 fa6c 	bl	8006f18 <USBD_CtlError>
          err++;
 8006a40:	210b      	movs	r1, #11
 8006a42:	187b      	adds	r3, r7, r1
 8006a44:	781a      	ldrb	r2, [r3, #0]
 8006a46:	187b      	adds	r3, r7, r1
 8006a48:	3201      	adds	r2, #1
 8006a4a:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 8006a4c:	e04b      	b.n	8006ae6 <USBD_GetDescriptor+0x2fa>
 8006a4e:	e04a      	b.n	8006ae6 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	7c1b      	ldrb	r3, [r3, #16]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d10b      	bne.n	8006a70 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006a58:	687a      	ldr	r2, [r7, #4]
 8006a5a:	23ad      	movs	r3, #173	; 0xad
 8006a5c:	009b      	lsls	r3, r3, #2
 8006a5e:	58d3      	ldr	r3, [r2, r3]
 8006a60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a62:	2208      	movs	r2, #8
 8006a64:	18ba      	adds	r2, r7, r2
 8006a66:	0010      	movs	r0, r2
 8006a68:	4798      	blx	r3
 8006a6a:	0003      	movs	r3, r0
 8006a6c:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006a6e:	e03a      	b.n	8006ae6 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8006a70:	683a      	ldr	r2, [r7, #0]
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	0011      	movs	r1, r2
 8006a76:	0018      	movs	r0, r3
 8006a78:	f000 fa4e 	bl	8006f18 <USBD_CtlError>
        err++;
 8006a7c:	210b      	movs	r1, #11
 8006a7e:	187b      	adds	r3, r7, r1
 8006a80:	781a      	ldrb	r2, [r3, #0]
 8006a82:	187b      	adds	r3, r7, r1
 8006a84:	3201      	adds	r2, #1
 8006a86:	701a      	strb	r2, [r3, #0]
      break;
 8006a88:	e02d      	b.n	8006ae6 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	7c1b      	ldrb	r3, [r3, #16]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d10f      	bne.n	8006ab2 <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006a92:	687a      	ldr	r2, [r7, #4]
 8006a94:	23ad      	movs	r3, #173	; 0xad
 8006a96:	009b      	lsls	r3, r3, #2
 8006a98:	58d3      	ldr	r3, [r2, r3]
 8006a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a9c:	2208      	movs	r2, #8
 8006a9e:	18ba      	adds	r2, r7, r2
 8006aa0:	0010      	movs	r0, r2
 8006aa2:	4798      	blx	r3
 8006aa4:	0003      	movs	r3, r0
 8006aa6:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	3301      	adds	r3, #1
 8006aac:	2207      	movs	r2, #7
 8006aae:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006ab0:	e019      	b.n	8006ae6 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8006ab2:	683a      	ldr	r2, [r7, #0]
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	0011      	movs	r1, r2
 8006ab8:	0018      	movs	r0, r3
 8006aba:	f000 fa2d 	bl	8006f18 <USBD_CtlError>
        err++;
 8006abe:	210b      	movs	r1, #11
 8006ac0:	187b      	adds	r3, r7, r1
 8006ac2:	781a      	ldrb	r2, [r3, #0]
 8006ac4:	187b      	adds	r3, r7, r1
 8006ac6:	3201      	adds	r2, #1
 8006ac8:	701a      	strb	r2, [r3, #0]
      break;
 8006aca:	e00c      	b.n	8006ae6 <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 8006acc:	683a      	ldr	r2, [r7, #0]
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	0011      	movs	r1, r2
 8006ad2:	0018      	movs	r0, r3
 8006ad4:	f000 fa20 	bl	8006f18 <USBD_CtlError>
      err++;
 8006ad8:	210b      	movs	r1, #11
 8006ada:	187b      	adds	r3, r7, r1
 8006adc:	781a      	ldrb	r2, [r3, #0]
 8006ade:	187b      	adds	r3, r7, r1
 8006ae0:	3201      	adds	r2, #1
 8006ae2:	701a      	strb	r2, [r3, #0]
      break;
 8006ae4:	46c0      	nop			; (mov r8, r8)
  }

  if (err != 0U)
 8006ae6:	230b      	movs	r3, #11
 8006ae8:	18fb      	adds	r3, r7, r3
 8006aea:	781b      	ldrb	r3, [r3, #0]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d127      	bne.n	8006b40 <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8006af0:	2108      	movs	r1, #8
 8006af2:	187b      	adds	r3, r7, r1
 8006af4:	881b      	ldrh	r3, [r3, #0]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d019      	beq.n	8006b2e <USBD_GetDescriptor+0x342>
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	88db      	ldrh	r3, [r3, #6]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d015      	beq.n	8006b2e <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	88da      	ldrh	r2, [r3, #6]
 8006b06:	187b      	adds	r3, r7, r1
 8006b08:	881b      	ldrh	r3, [r3, #0]
 8006b0a:	1c18      	adds	r0, r3, #0
 8006b0c:	1c11      	adds	r1, r2, #0
 8006b0e:	b28a      	uxth	r2, r1
 8006b10:	b283      	uxth	r3, r0
 8006b12:	429a      	cmp	r2, r3
 8006b14:	d900      	bls.n	8006b18 <USBD_GetDescriptor+0x32c>
 8006b16:	1c01      	adds	r1, r0, #0
 8006b18:	b28a      	uxth	r2, r1
 8006b1a:	2108      	movs	r1, #8
 8006b1c:	187b      	adds	r3, r7, r1
 8006b1e:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006b20:	187b      	adds	r3, r7, r1
 8006b22:	881a      	ldrh	r2, [r3, #0]
 8006b24:	68f9      	ldr	r1, [r7, #12]
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	0018      	movs	r0, r3
 8006b2a:	f000 fa73 	bl	8007014 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	88db      	ldrh	r3, [r3, #6]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d105      	bne.n	8006b42 <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	0018      	movs	r0, r3
 8006b3a:	f000 fab1 	bl	80070a0 <USBD_CtlSendStatus>
 8006b3e:	e000      	b.n	8006b42 <USBD_GetDescriptor+0x356>
    return;
 8006b40:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 8006b42:	46bd      	mov	sp, r7
 8006b44:	b004      	add	sp, #16
 8006b46:	bd80      	pop	{r7, pc}
 8006b48:	08007b54 	.word	0x08007b54
 8006b4c:	08007b74 	.word	0x08007b74

08006b50 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006b50:	b590      	push	{r4, r7, lr}
 8006b52:	b085      	sub	sp, #20
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
 8006b58:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	889b      	ldrh	r3, [r3, #4]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d13d      	bne.n	8006bde <USBD_SetAddress+0x8e>
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	88db      	ldrh	r3, [r3, #6]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d139      	bne.n	8006bde <USBD_SetAddress+0x8e>
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	885b      	ldrh	r3, [r3, #2]
 8006b6e:	2b7f      	cmp	r3, #127	; 0x7f
 8006b70:	d835      	bhi.n	8006bde <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	885b      	ldrh	r3, [r3, #2]
 8006b76:	b2da      	uxtb	r2, r3
 8006b78:	230f      	movs	r3, #15
 8006b7a:	18fb      	adds	r3, r7, r3
 8006b7c:	217f      	movs	r1, #127	; 0x7f
 8006b7e:	400a      	ands	r2, r1
 8006b80:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b82:	687a      	ldr	r2, [r7, #4]
 8006b84:	23a7      	movs	r3, #167	; 0xa7
 8006b86:	009b      	lsls	r3, r3, #2
 8006b88:	5cd3      	ldrb	r3, [r2, r3]
 8006b8a:	2b03      	cmp	r3, #3
 8006b8c:	d106      	bne.n	8006b9c <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 8006b8e:	683a      	ldr	r2, [r7, #0]
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	0011      	movs	r1, r2
 8006b94:	0018      	movs	r0, r3
 8006b96:	f000 f9bf 	bl	8006f18 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b9a:	e027      	b.n	8006bec <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	240f      	movs	r4, #15
 8006ba0:	193a      	adds	r2, r7, r4
 8006ba2:	4914      	ldr	r1, [pc, #80]	; (8006bf4 <USBD_SetAddress+0xa4>)
 8006ba4:	7812      	ldrb	r2, [r2, #0]
 8006ba6:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006ba8:	193b      	adds	r3, r7, r4
 8006baa:	781a      	ldrb	r2, [r3, #0]
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	0011      	movs	r1, r2
 8006bb0:	0018      	movs	r0, r3
 8006bb2:	f000 fe3b 	bl	800782c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	0018      	movs	r0, r3
 8006bba:	f000 fa71 	bl	80070a0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006bbe:	193b      	adds	r3, r7, r4
 8006bc0:	781b      	ldrb	r3, [r3, #0]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d005      	beq.n	8006bd2 <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006bc6:	687a      	ldr	r2, [r7, #4]
 8006bc8:	23a7      	movs	r3, #167	; 0xa7
 8006bca:	009b      	lsls	r3, r3, #2
 8006bcc:	2102      	movs	r1, #2
 8006bce:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bd0:	e00c      	b.n	8006bec <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006bd2:	687a      	ldr	r2, [r7, #4]
 8006bd4:	23a7      	movs	r3, #167	; 0xa7
 8006bd6:	009b      	lsls	r3, r3, #2
 8006bd8:	2101      	movs	r1, #1
 8006bda:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bdc:	e006      	b.n	8006bec <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006bde:	683a      	ldr	r2, [r7, #0]
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	0011      	movs	r1, r2
 8006be4:	0018      	movs	r0, r3
 8006be6:	f000 f997 	bl	8006f18 <USBD_CtlError>
  }
}
 8006bea:	46c0      	nop			; (mov r8, r8)
 8006bec:	46c0      	nop			; (mov r8, r8)
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	b005      	add	sp, #20
 8006bf2:	bd90      	pop	{r4, r7, pc}
 8006bf4:	0000029e 	.word	0x0000029e

08006bf8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b082      	sub	sp, #8
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
 8006c00:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	885b      	ldrh	r3, [r3, #2]
 8006c06:	b2da      	uxtb	r2, r3
 8006c08:	4b4c      	ldr	r3, [pc, #304]	; (8006d3c <USBD_SetConfig+0x144>)
 8006c0a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006c0c:	4b4b      	ldr	r3, [pc, #300]	; (8006d3c <USBD_SetConfig+0x144>)
 8006c0e:	781b      	ldrb	r3, [r3, #0]
 8006c10:	2b01      	cmp	r3, #1
 8006c12:	d906      	bls.n	8006c22 <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 8006c14:	683a      	ldr	r2, [r7, #0]
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	0011      	movs	r1, r2
 8006c1a:	0018      	movs	r0, r3
 8006c1c:	f000 f97c 	bl	8006f18 <USBD_CtlError>
 8006c20:	e088      	b.n	8006d34 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 8006c22:	687a      	ldr	r2, [r7, #4]
 8006c24:	23a7      	movs	r3, #167	; 0xa7
 8006c26:	009b      	lsls	r3, r3, #2
 8006c28:	5cd3      	ldrb	r3, [r2, r3]
 8006c2a:	2b02      	cmp	r3, #2
 8006c2c:	d002      	beq.n	8006c34 <USBD_SetConfig+0x3c>
 8006c2e:	2b03      	cmp	r3, #3
 8006c30:	d029      	beq.n	8006c86 <USBD_SetConfig+0x8e>
 8006c32:	e071      	b.n	8006d18 <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8006c34:	4b41      	ldr	r3, [pc, #260]	; (8006d3c <USBD_SetConfig+0x144>)
 8006c36:	781b      	ldrb	r3, [r3, #0]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d01f      	beq.n	8006c7c <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 8006c3c:	4b3f      	ldr	r3, [pc, #252]	; (8006d3c <USBD_SetConfig+0x144>)
 8006c3e:	781b      	ldrb	r3, [r3, #0]
 8006c40:	001a      	movs	r2, r3
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006c46:	687a      	ldr	r2, [r7, #4]
 8006c48:	23a7      	movs	r3, #167	; 0xa7
 8006c4a:	009b      	lsls	r3, r3, #2
 8006c4c:	2103      	movs	r1, #3
 8006c4e:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006c50:	4b3a      	ldr	r3, [pc, #232]	; (8006d3c <USBD_SetConfig+0x144>)
 8006c52:	781a      	ldrb	r2, [r3, #0]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	0011      	movs	r1, r2
 8006c58:	0018      	movs	r0, r3
 8006c5a:	f7ff f8c6 	bl	8005dea <USBD_SetClassConfig>
 8006c5e:	0003      	movs	r3, r0
 8006c60:	2b02      	cmp	r3, #2
 8006c62:	d106      	bne.n	8006c72 <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 8006c64:	683a      	ldr	r2, [r7, #0]
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	0011      	movs	r1, r2
 8006c6a:	0018      	movs	r0, r3
 8006c6c:	f000 f954 	bl	8006f18 <USBD_CtlError>
            return;
 8006c70:	e060      	b.n	8006d34 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	0018      	movs	r0, r3
 8006c76:	f000 fa13 	bl	80070a0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006c7a:	e05b      	b.n	8006d34 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	0018      	movs	r0, r3
 8006c80:	f000 fa0e 	bl	80070a0 <USBD_CtlSendStatus>
        break;
 8006c84:	e056      	b.n	8006d34 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8006c86:	4b2d      	ldr	r3, [pc, #180]	; (8006d3c <USBD_SetConfig+0x144>)
 8006c88:	781b      	ldrb	r3, [r3, #0]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d115      	bne.n	8006cba <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006c8e:	687a      	ldr	r2, [r7, #4]
 8006c90:	23a7      	movs	r3, #167	; 0xa7
 8006c92:	009b      	lsls	r3, r3, #2
 8006c94:	2102      	movs	r1, #2
 8006c96:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 8006c98:	4b28      	ldr	r3, [pc, #160]	; (8006d3c <USBD_SetConfig+0x144>)
 8006c9a:	781b      	ldrb	r3, [r3, #0]
 8006c9c:	001a      	movs	r2, r3
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8006ca2:	4b26      	ldr	r3, [pc, #152]	; (8006d3c <USBD_SetConfig+0x144>)
 8006ca4:	781a      	ldrb	r2, [r3, #0]
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	0011      	movs	r1, r2
 8006caa:	0018      	movs	r0, r3
 8006cac:	f7ff f8c4 	bl	8005e38 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	0018      	movs	r0, r3
 8006cb4:	f000 f9f4 	bl	80070a0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006cb8:	e03c      	b.n	8006d34 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 8006cba:	4b20      	ldr	r3, [pc, #128]	; (8006d3c <USBD_SetConfig+0x144>)
 8006cbc:	781b      	ldrb	r3, [r3, #0]
 8006cbe:	001a      	movs	r2, r3
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	685b      	ldr	r3, [r3, #4]
 8006cc4:	429a      	cmp	r2, r3
 8006cc6:	d022      	beq.n	8006d0e <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	685b      	ldr	r3, [r3, #4]
 8006ccc:	b2da      	uxtb	r2, r3
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	0011      	movs	r1, r2
 8006cd2:	0018      	movs	r0, r3
 8006cd4:	f7ff f8b0 	bl	8005e38 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8006cd8:	4b18      	ldr	r3, [pc, #96]	; (8006d3c <USBD_SetConfig+0x144>)
 8006cda:	781b      	ldrb	r3, [r3, #0]
 8006cdc:	001a      	movs	r2, r3
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006ce2:	4b16      	ldr	r3, [pc, #88]	; (8006d3c <USBD_SetConfig+0x144>)
 8006ce4:	781a      	ldrb	r2, [r3, #0]
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	0011      	movs	r1, r2
 8006cea:	0018      	movs	r0, r3
 8006cec:	f7ff f87d 	bl	8005dea <USBD_SetClassConfig>
 8006cf0:	0003      	movs	r3, r0
 8006cf2:	2b02      	cmp	r3, #2
 8006cf4:	d106      	bne.n	8006d04 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 8006cf6:	683a      	ldr	r2, [r7, #0]
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	0011      	movs	r1, r2
 8006cfc:	0018      	movs	r0, r3
 8006cfe:	f000 f90b 	bl	8006f18 <USBD_CtlError>
            return;
 8006d02:	e017      	b.n	8006d34 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	0018      	movs	r0, r3
 8006d08:	f000 f9ca 	bl	80070a0 <USBD_CtlSendStatus>
        break;
 8006d0c:	e012      	b.n	8006d34 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	0018      	movs	r0, r3
 8006d12:	f000 f9c5 	bl	80070a0 <USBD_CtlSendStatus>
        break;
 8006d16:	e00d      	b.n	8006d34 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 8006d18:	683a      	ldr	r2, [r7, #0]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	0011      	movs	r1, r2
 8006d1e:	0018      	movs	r0, r3
 8006d20:	f000 f8fa 	bl	8006f18 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8006d24:	4b05      	ldr	r3, [pc, #20]	; (8006d3c <USBD_SetConfig+0x144>)
 8006d26:	781a      	ldrb	r2, [r3, #0]
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	0011      	movs	r1, r2
 8006d2c:	0018      	movs	r0, r3
 8006d2e:	f7ff f883 	bl	8005e38 <USBD_ClrClassConfig>
        break;
 8006d32:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 8006d34:	46bd      	mov	sp, r7
 8006d36:	b002      	add	sp, #8
 8006d38:	bd80      	pop	{r7, pc}
 8006d3a:	46c0      	nop			; (mov r8, r8)
 8006d3c:	20000178 	.word	0x20000178

08006d40 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b082      	sub	sp, #8
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
 8006d48:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	88db      	ldrh	r3, [r3, #6]
 8006d4e:	2b01      	cmp	r3, #1
 8006d50:	d006      	beq.n	8006d60 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 8006d52:	683a      	ldr	r2, [r7, #0]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	0011      	movs	r1, r2
 8006d58:	0018      	movs	r0, r3
 8006d5a:	f000 f8dd 	bl	8006f18 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006d5e:	e026      	b.n	8006dae <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 8006d60:	687a      	ldr	r2, [r7, #4]
 8006d62:	23a7      	movs	r3, #167	; 0xa7
 8006d64:	009b      	lsls	r3, r3, #2
 8006d66:	5cd3      	ldrb	r3, [r2, r3]
 8006d68:	2b02      	cmp	r3, #2
 8006d6a:	dc02      	bgt.n	8006d72 <USBD_GetConfig+0x32>
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	dc03      	bgt.n	8006d78 <USBD_GetConfig+0x38>
 8006d70:	e016      	b.n	8006da0 <USBD_GetConfig+0x60>
 8006d72:	2b03      	cmp	r3, #3
 8006d74:	d00c      	beq.n	8006d90 <USBD_GetConfig+0x50>
 8006d76:	e013      	b.n	8006da0 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	3308      	adds	r3, #8
 8006d82:	0019      	movs	r1, r3
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2201      	movs	r2, #1
 8006d88:	0018      	movs	r0, r3
 8006d8a:	f000 f943 	bl	8007014 <USBD_CtlSendData>
        break;
 8006d8e:	e00e      	b.n	8006dae <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	1d19      	adds	r1, r3, #4
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2201      	movs	r2, #1
 8006d98:	0018      	movs	r0, r3
 8006d9a:	f000 f93b 	bl	8007014 <USBD_CtlSendData>
        break;
 8006d9e:	e006      	b.n	8006dae <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 8006da0:	683a      	ldr	r2, [r7, #0]
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	0011      	movs	r1, r2
 8006da6:	0018      	movs	r0, r3
 8006da8:	f000 f8b6 	bl	8006f18 <USBD_CtlError>
        break;
 8006dac:	46c0      	nop			; (mov r8, r8)
}
 8006dae:	46c0      	nop			; (mov r8, r8)
 8006db0:	46bd      	mov	sp, r7
 8006db2:	b002      	add	sp, #8
 8006db4:	bd80      	pop	{r7, pc}

08006db6 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006db6:	b580      	push	{r7, lr}
 8006db8:	b082      	sub	sp, #8
 8006dba:	af00      	add	r7, sp, #0
 8006dbc:	6078      	str	r0, [r7, #4]
 8006dbe:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006dc0:	687a      	ldr	r2, [r7, #4]
 8006dc2:	23a7      	movs	r3, #167	; 0xa7
 8006dc4:	009b      	lsls	r3, r3, #2
 8006dc6:	5cd3      	ldrb	r3, [r2, r3]
 8006dc8:	3b01      	subs	r3, #1
 8006dca:	2b02      	cmp	r3, #2
 8006dcc:	d822      	bhi.n	8006e14 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	88db      	ldrh	r3, [r3, #6]
 8006dd2:	2b02      	cmp	r3, #2
 8006dd4:	d006      	beq.n	8006de4 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 8006dd6:	683a      	ldr	r2, [r7, #0]
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	0011      	movs	r1, r2
 8006ddc:	0018      	movs	r0, r3
 8006dde:	f000 f89b 	bl	8006f18 <USBD_CtlError>
        break;
 8006de2:	e01e      	b.n	8006e22 <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2201      	movs	r2, #1
 8006de8:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8006dea:	687a      	ldr	r2, [r7, #4]
 8006dec:	23a9      	movs	r3, #169	; 0xa9
 8006dee:	009b      	lsls	r3, r3, #2
 8006df0:	58d3      	ldr	r3, [r2, r3]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d005      	beq.n	8006e02 <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	68db      	ldr	r3, [r3, #12]
 8006dfa:	2202      	movs	r2, #2
 8006dfc:	431a      	orrs	r2, r3
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	330c      	adds	r3, #12
 8006e06:	0019      	movs	r1, r3
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2202      	movs	r2, #2
 8006e0c:	0018      	movs	r0, r3
 8006e0e:	f000 f901 	bl	8007014 <USBD_CtlSendData>
      break;
 8006e12:	e006      	b.n	8006e22 <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 8006e14:	683a      	ldr	r2, [r7, #0]
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	0011      	movs	r1, r2
 8006e1a:	0018      	movs	r0, r3
 8006e1c:	f000 f87c 	bl	8006f18 <USBD_CtlError>
      break;
 8006e20:	46c0      	nop			; (mov r8, r8)
  }
}
 8006e22:	46c0      	nop			; (mov r8, r8)
 8006e24:	46bd      	mov	sp, r7
 8006e26:	b002      	add	sp, #8
 8006e28:	bd80      	pop	{r7, pc}

08006e2a <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006e2a:	b580      	push	{r7, lr}
 8006e2c:	b082      	sub	sp, #8
 8006e2e:	af00      	add	r7, sp, #0
 8006e30:	6078      	str	r0, [r7, #4]
 8006e32:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	885b      	ldrh	r3, [r3, #2]
 8006e38:	2b01      	cmp	r3, #1
 8006e3a:	d108      	bne.n	8006e4e <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 8006e3c:	687a      	ldr	r2, [r7, #4]
 8006e3e:	23a9      	movs	r3, #169	; 0xa9
 8006e40:	009b      	lsls	r3, r3, #2
 8006e42:	2101      	movs	r1, #1
 8006e44:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	0018      	movs	r0, r3
 8006e4a:	f000 f929 	bl	80070a0 <USBD_CtlSendStatus>
  }
}
 8006e4e:	46c0      	nop			; (mov r8, r8)
 8006e50:	46bd      	mov	sp, r7
 8006e52:	b002      	add	sp, #8
 8006e54:	bd80      	pop	{r7, pc}

08006e56 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006e56:	b580      	push	{r7, lr}
 8006e58:	b082      	sub	sp, #8
 8006e5a:	af00      	add	r7, sp, #0
 8006e5c:	6078      	str	r0, [r7, #4]
 8006e5e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006e60:	687a      	ldr	r2, [r7, #4]
 8006e62:	23a7      	movs	r3, #167	; 0xa7
 8006e64:	009b      	lsls	r3, r3, #2
 8006e66:	5cd3      	ldrb	r3, [r2, r3]
 8006e68:	3b01      	subs	r3, #1
 8006e6a:	2b02      	cmp	r3, #2
 8006e6c:	d80d      	bhi.n	8006e8a <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	885b      	ldrh	r3, [r3, #2]
 8006e72:	2b01      	cmp	r3, #1
 8006e74:	d110      	bne.n	8006e98 <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 8006e76:	687a      	ldr	r2, [r7, #4]
 8006e78:	23a9      	movs	r3, #169	; 0xa9
 8006e7a:	009b      	lsls	r3, r3, #2
 8006e7c:	2100      	movs	r1, #0
 8006e7e:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	0018      	movs	r0, r3
 8006e84:	f000 f90c 	bl	80070a0 <USBD_CtlSendStatus>
      }
      break;
 8006e88:	e006      	b.n	8006e98 <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 8006e8a:	683a      	ldr	r2, [r7, #0]
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	0011      	movs	r1, r2
 8006e90:	0018      	movs	r0, r3
 8006e92:	f000 f841 	bl	8006f18 <USBD_CtlError>
      break;
 8006e96:	e000      	b.n	8006e9a <USBD_ClrFeature+0x44>
      break;
 8006e98:	46c0      	nop			; (mov r8, r8)
  }
}
 8006e9a:	46c0      	nop			; (mov r8, r8)
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	b002      	add	sp, #8
 8006ea0:	bd80      	pop	{r7, pc}

08006ea2 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006ea2:	b580      	push	{r7, lr}
 8006ea4:	b082      	sub	sp, #8
 8006ea6:	af00      	add	r7, sp, #0
 8006ea8:	6078      	str	r0, [r7, #4]
 8006eaa:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	781a      	ldrb	r2, [r3, #0]
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	785a      	ldrb	r2, [r3, #1]
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	3302      	adds	r3, #2
 8006ec0:	781b      	ldrb	r3, [r3, #0]
 8006ec2:	b29a      	uxth	r2, r3
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	3303      	adds	r3, #3
 8006ec8:	781b      	ldrb	r3, [r3, #0]
 8006eca:	b29b      	uxth	r3, r3
 8006ecc:	021b      	lsls	r3, r3, #8
 8006ece:	b29b      	uxth	r3, r3
 8006ed0:	18d3      	adds	r3, r2, r3
 8006ed2:	b29a      	uxth	r2, r3
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	3304      	adds	r3, #4
 8006edc:	781b      	ldrb	r3, [r3, #0]
 8006ede:	b29a      	uxth	r2, r3
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	3305      	adds	r3, #5
 8006ee4:	781b      	ldrb	r3, [r3, #0]
 8006ee6:	b29b      	uxth	r3, r3
 8006ee8:	021b      	lsls	r3, r3, #8
 8006eea:	b29b      	uxth	r3, r3
 8006eec:	18d3      	adds	r3, r2, r3
 8006eee:	b29a      	uxth	r2, r3
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	3306      	adds	r3, #6
 8006ef8:	781b      	ldrb	r3, [r3, #0]
 8006efa:	b29a      	uxth	r2, r3
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	3307      	adds	r3, #7
 8006f00:	781b      	ldrb	r3, [r3, #0]
 8006f02:	b29b      	uxth	r3, r3
 8006f04:	021b      	lsls	r3, r3, #8
 8006f06:	b29b      	uxth	r3, r3
 8006f08:	18d3      	adds	r3, r2, r3
 8006f0a:	b29a      	uxth	r2, r3
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	80da      	strh	r2, [r3, #6]

}
 8006f10:	46c0      	nop			; (mov r8, r8)
 8006f12:	46bd      	mov	sp, r7
 8006f14:	b002      	add	sp, #8
 8006f16:	bd80      	pop	{r7, pc}

08006f18 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b082      	sub	sp, #8
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
 8006f20:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2180      	movs	r1, #128	; 0x80
 8006f26:	0018      	movs	r0, r3
 8006f28:	f000 fbf9 	bl	800771e <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2100      	movs	r1, #0
 8006f30:	0018      	movs	r0, r3
 8006f32:	f000 fbf4 	bl	800771e <USBD_LL_StallEP>
}
 8006f36:	46c0      	nop			; (mov r8, r8)
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	b002      	add	sp, #8
 8006f3c:	bd80      	pop	{r7, pc}

08006f3e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006f3e:	b590      	push	{r4, r7, lr}
 8006f40:	b087      	sub	sp, #28
 8006f42:	af00      	add	r7, sp, #0
 8006f44:	60f8      	str	r0, [r7, #12]
 8006f46:	60b9      	str	r1, [r7, #8]
 8006f48:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006f4a:	2417      	movs	r4, #23
 8006f4c:	193b      	adds	r3, r7, r4
 8006f4e:	2200      	movs	r2, #0
 8006f50:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d03c      	beq.n	8006fd2 <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	0018      	movs	r0, r3
 8006f5c:	f000 f83d 	bl	8006fda <USBD_GetLen>
 8006f60:	0003      	movs	r3, r0
 8006f62:	3301      	adds	r3, #1
 8006f64:	b29b      	uxth	r3, r3
 8006f66:	18db      	adds	r3, r3, r3
 8006f68:	b29a      	uxth	r2, r3
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8006f6e:	193b      	adds	r3, r7, r4
 8006f70:	781b      	ldrb	r3, [r3, #0]
 8006f72:	193a      	adds	r2, r7, r4
 8006f74:	1c59      	adds	r1, r3, #1
 8006f76:	7011      	strb	r1, [r2, #0]
 8006f78:	001a      	movs	r2, r3
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	189b      	adds	r3, r3, r2
 8006f7e:	687a      	ldr	r2, [r7, #4]
 8006f80:	7812      	ldrb	r2, [r2, #0]
 8006f82:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8006f84:	193b      	adds	r3, r7, r4
 8006f86:	781b      	ldrb	r3, [r3, #0]
 8006f88:	193a      	adds	r2, r7, r4
 8006f8a:	1c59      	adds	r1, r3, #1
 8006f8c:	7011      	strb	r1, [r2, #0]
 8006f8e:	001a      	movs	r2, r3
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	189b      	adds	r3, r3, r2
 8006f94:	2203      	movs	r2, #3
 8006f96:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8006f98:	e017      	b.n	8006fca <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	1c5a      	adds	r2, r3, #1
 8006f9e:	60fa      	str	r2, [r7, #12]
 8006fa0:	2417      	movs	r4, #23
 8006fa2:	193a      	adds	r2, r7, r4
 8006fa4:	7812      	ldrb	r2, [r2, #0]
 8006fa6:	1939      	adds	r1, r7, r4
 8006fa8:	1c50      	adds	r0, r2, #1
 8006faa:	7008      	strb	r0, [r1, #0]
 8006fac:	0011      	movs	r1, r2
 8006fae:	68ba      	ldr	r2, [r7, #8]
 8006fb0:	1852      	adds	r2, r2, r1
 8006fb2:	781b      	ldrb	r3, [r3, #0]
 8006fb4:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8006fb6:	193b      	adds	r3, r7, r4
 8006fb8:	781b      	ldrb	r3, [r3, #0]
 8006fba:	193a      	adds	r2, r7, r4
 8006fbc:	1c59      	adds	r1, r3, #1
 8006fbe:	7011      	strb	r1, [r2, #0]
 8006fc0:	001a      	movs	r2, r3
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	189b      	adds	r3, r3, r2
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	781b      	ldrb	r3, [r3, #0]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d1e3      	bne.n	8006f9a <USBD_GetString+0x5c>
    }
  }
}
 8006fd2:	46c0      	nop			; (mov r8, r8)
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	b007      	add	sp, #28
 8006fd8:	bd90      	pop	{r4, r7, pc}

08006fda <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006fda:	b580      	push	{r7, lr}
 8006fdc:	b084      	sub	sp, #16
 8006fde:	af00      	add	r7, sp, #0
 8006fe0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006fe2:	230f      	movs	r3, #15
 8006fe4:	18fb      	adds	r3, r7, r3
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 8006fea:	e008      	b.n	8006ffe <USBD_GetLen+0x24>
  {
    len++;
 8006fec:	210f      	movs	r1, #15
 8006fee:	187b      	adds	r3, r7, r1
 8006ff0:	781a      	ldrb	r2, [r3, #0]
 8006ff2:	187b      	adds	r3, r7, r1
 8006ff4:	3201      	adds	r2, #1
 8006ff6:	701a      	strb	r2, [r3, #0]
    buf++;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	3301      	adds	r3, #1
 8006ffc:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	781b      	ldrb	r3, [r3, #0]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d1f2      	bne.n	8006fec <USBD_GetLen+0x12>
  }

  return len;
 8007006:	230f      	movs	r3, #15
 8007008:	18fb      	adds	r3, r7, r3
 800700a:	781b      	ldrb	r3, [r3, #0]
}
 800700c:	0018      	movs	r0, r3
 800700e:	46bd      	mov	sp, r7
 8007010:	b004      	add	sp, #16
 8007012:	bd80      	pop	{r7, pc}

08007014 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b084      	sub	sp, #16
 8007018:	af00      	add	r7, sp, #0
 800701a:	60f8      	str	r0, [r7, #12]
 800701c:	60b9      	str	r1, [r7, #8]
 800701e:	1dbb      	adds	r3, r7, #6
 8007020:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007022:	68fa      	ldr	r2, [r7, #12]
 8007024:	23a5      	movs	r3, #165	; 0xa5
 8007026:	009b      	lsls	r3, r3, #2
 8007028:	2102      	movs	r1, #2
 800702a:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 800702c:	1dbb      	adds	r3, r7, #6
 800702e:	881a      	ldrh	r2, [r3, #0]
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007034:	1dbb      	adds	r3, r7, #6
 8007036:	881a      	ldrh	r2, [r3, #0]
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800703c:	1dbb      	adds	r3, r7, #6
 800703e:	881b      	ldrh	r3, [r3, #0]
 8007040:	68ba      	ldr	r2, [r7, #8]
 8007042:	68f8      	ldr	r0, [r7, #12]
 8007044:	2100      	movs	r1, #0
 8007046:	f000 fc1c 	bl	8007882 <USBD_LL_Transmit>

  return USBD_OK;
 800704a:	2300      	movs	r3, #0
}
 800704c:	0018      	movs	r0, r3
 800704e:	46bd      	mov	sp, r7
 8007050:	b004      	add	sp, #16
 8007052:	bd80      	pop	{r7, pc}

08007054 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b084      	sub	sp, #16
 8007058:	af00      	add	r7, sp, #0
 800705a:	60f8      	str	r0, [r7, #12]
 800705c:	60b9      	str	r1, [r7, #8]
 800705e:	1dbb      	adds	r3, r7, #6
 8007060:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007062:	1dbb      	adds	r3, r7, #6
 8007064:	881b      	ldrh	r3, [r3, #0]
 8007066:	68ba      	ldr	r2, [r7, #8]
 8007068:	68f8      	ldr	r0, [r7, #12]
 800706a:	2100      	movs	r1, #0
 800706c:	f000 fc09 	bl	8007882 <USBD_LL_Transmit>

  return USBD_OK;
 8007070:	2300      	movs	r3, #0
}
 8007072:	0018      	movs	r0, r3
 8007074:	46bd      	mov	sp, r7
 8007076:	b004      	add	sp, #16
 8007078:	bd80      	pop	{r7, pc}

0800707a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800707a:	b580      	push	{r7, lr}
 800707c:	b084      	sub	sp, #16
 800707e:	af00      	add	r7, sp, #0
 8007080:	60f8      	str	r0, [r7, #12]
 8007082:	60b9      	str	r1, [r7, #8]
 8007084:	1dbb      	adds	r3, r7, #6
 8007086:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007088:	1dbb      	adds	r3, r7, #6
 800708a:	881b      	ldrh	r3, [r3, #0]
 800708c:	68ba      	ldr	r2, [r7, #8]
 800708e:	68f8      	ldr	r0, [r7, #12]
 8007090:	2100      	movs	r1, #0
 8007092:	f000 fc2d 	bl	80078f0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007096:	2300      	movs	r3, #0
}
 8007098:	0018      	movs	r0, r3
 800709a:	46bd      	mov	sp, r7
 800709c:	b004      	add	sp, #16
 800709e:	bd80      	pop	{r7, pc}

080070a0 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b082      	sub	sp, #8
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80070a8:	687a      	ldr	r2, [r7, #4]
 80070aa:	23a5      	movs	r3, #165	; 0xa5
 80070ac:	009b      	lsls	r3, r3, #2
 80070ae:	2104      	movs	r1, #4
 80070b0:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	2300      	movs	r3, #0
 80070b6:	2200      	movs	r2, #0
 80070b8:	2100      	movs	r1, #0
 80070ba:	f000 fbe2 	bl	8007882 <USBD_LL_Transmit>

  return USBD_OK;
 80070be:	2300      	movs	r3, #0
}
 80070c0:	0018      	movs	r0, r3
 80070c2:	46bd      	mov	sp, r7
 80070c4:	b002      	add	sp, #8
 80070c6:	bd80      	pop	{r7, pc}

080070c8 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b082      	sub	sp, #8
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80070d0:	687a      	ldr	r2, [r7, #4]
 80070d2:	23a5      	movs	r3, #165	; 0xa5
 80070d4:	009b      	lsls	r3, r3, #2
 80070d6:	2105      	movs	r1, #5
 80070d8:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	2300      	movs	r3, #0
 80070de:	2200      	movs	r2, #0
 80070e0:	2100      	movs	r1, #0
 80070e2:	f000 fc05 	bl	80078f0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80070e6:	2300      	movs	r3, #0
}
 80070e8:	0018      	movs	r0, r3
 80070ea:	46bd      	mov	sp, r7
 80070ec:	b002      	add	sp, #8
 80070ee:	bd80      	pop	{r7, pc}

080070f0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80070f4:	490f      	ldr	r1, [pc, #60]	; (8007134 <MX_USB_DEVICE_Init+0x44>)
 80070f6:	4b10      	ldr	r3, [pc, #64]	; (8007138 <MX_USB_DEVICE_Init+0x48>)
 80070f8:	2200      	movs	r2, #0
 80070fa:	0018      	movs	r0, r3
 80070fc:	f7fe fe0e 	bl	8005d1c <USBD_Init>
 8007100:	1e03      	subs	r3, r0, #0
 8007102:	d001      	beq.n	8007108 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007104:	f7f9 fa08 	bl	8000518 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8007108:	4a0c      	ldr	r2, [pc, #48]	; (800713c <MX_USB_DEVICE_Init+0x4c>)
 800710a:	4b0b      	ldr	r3, [pc, #44]	; (8007138 <MX_USB_DEVICE_Init+0x48>)
 800710c:	0011      	movs	r1, r2
 800710e:	0018      	movs	r0, r3
 8007110:	f7fe fe35 	bl	8005d7e <USBD_RegisterClass>
 8007114:	1e03      	subs	r3, r0, #0
 8007116:	d001      	beq.n	800711c <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 8007118:	f7f9 f9fe 	bl	8000518 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800711c:	4b06      	ldr	r3, [pc, #24]	; (8007138 <MX_USB_DEVICE_Init+0x48>)
 800711e:	0018      	movs	r0, r3
 8007120:	f7fe fe4d 	bl	8005dbe <USBD_Start>
 8007124:	1e03      	subs	r3, r0, #0
 8007126:	d001      	beq.n	800712c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007128:	f7f9 f9f6 	bl	8000518 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800712c:	46c0      	nop			; (mov r8, r8)
 800712e:	46bd      	mov	sp, r7
 8007130:	bd80      	pop	{r7, pc}
 8007132:	46c0      	nop			; (mov r8, r8)
 8007134:	20000108 	.word	0x20000108
 8007138:	200001d8 	.word	0x200001d8
 800713c:	2000000c 	.word	0x2000000c

08007140 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b082      	sub	sp, #8
 8007144:	af00      	add	r7, sp, #0
 8007146:	0002      	movs	r2, r0
 8007148:	6039      	str	r1, [r7, #0]
 800714a:	1dfb      	adds	r3, r7, #7
 800714c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	2212      	movs	r2, #18
 8007152:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007154:	4b02      	ldr	r3, [pc, #8]	; (8007160 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007156:	0018      	movs	r0, r3
 8007158:	46bd      	mov	sp, r7
 800715a:	b002      	add	sp, #8
 800715c:	bd80      	pop	{r7, pc}
 800715e:	46c0      	nop			; (mov r8, r8)
 8007160:	20000124 	.word	0x20000124

08007164 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b082      	sub	sp, #8
 8007168:	af00      	add	r7, sp, #0
 800716a:	0002      	movs	r2, r0
 800716c:	6039      	str	r1, [r7, #0]
 800716e:	1dfb      	adds	r3, r7, #7
 8007170:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	2204      	movs	r2, #4
 8007176:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007178:	4b02      	ldr	r3, [pc, #8]	; (8007184 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800717a:	0018      	movs	r0, r3
 800717c:	46bd      	mov	sp, r7
 800717e:	b002      	add	sp, #8
 8007180:	bd80      	pop	{r7, pc}
 8007182:	46c0      	nop			; (mov r8, r8)
 8007184:	20000138 	.word	0x20000138

08007188 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b082      	sub	sp, #8
 800718c:	af00      	add	r7, sp, #0
 800718e:	0002      	movs	r2, r0
 8007190:	6039      	str	r1, [r7, #0]
 8007192:	1dfb      	adds	r3, r7, #7
 8007194:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8007196:	1dfb      	adds	r3, r7, #7
 8007198:	781b      	ldrb	r3, [r3, #0]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d106      	bne.n	80071ac <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800719e:	683a      	ldr	r2, [r7, #0]
 80071a0:	4908      	ldr	r1, [pc, #32]	; (80071c4 <USBD_FS_ProductStrDescriptor+0x3c>)
 80071a2:	4b09      	ldr	r3, [pc, #36]	; (80071c8 <USBD_FS_ProductStrDescriptor+0x40>)
 80071a4:	0018      	movs	r0, r3
 80071a6:	f7ff feca 	bl	8006f3e <USBD_GetString>
 80071aa:	e005      	b.n	80071b8 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80071ac:	683a      	ldr	r2, [r7, #0]
 80071ae:	4905      	ldr	r1, [pc, #20]	; (80071c4 <USBD_FS_ProductStrDescriptor+0x3c>)
 80071b0:	4b05      	ldr	r3, [pc, #20]	; (80071c8 <USBD_FS_ProductStrDescriptor+0x40>)
 80071b2:	0018      	movs	r0, r3
 80071b4:	f7ff fec3 	bl	8006f3e <USBD_GetString>
  }
  return USBD_StrDesc;
 80071b8:	4b02      	ldr	r3, [pc, #8]	; (80071c4 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 80071ba:	0018      	movs	r0, r3
 80071bc:	46bd      	mov	sp, r7
 80071be:	b002      	add	sp, #8
 80071c0:	bd80      	pop	{r7, pc}
 80071c2:	46c0      	nop			; (mov r8, r8)
 80071c4:	2000049c 	.word	0x2000049c
 80071c8:	08007a94 	.word	0x08007a94

080071cc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b082      	sub	sp, #8
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	0002      	movs	r2, r0
 80071d4:	6039      	str	r1, [r7, #0]
 80071d6:	1dfb      	adds	r3, r7, #7
 80071d8:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80071da:	683a      	ldr	r2, [r7, #0]
 80071dc:	4904      	ldr	r1, [pc, #16]	; (80071f0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80071de:	4b05      	ldr	r3, [pc, #20]	; (80071f4 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 80071e0:	0018      	movs	r0, r3
 80071e2:	f7ff feac 	bl	8006f3e <USBD_GetString>
  return USBD_StrDesc;
 80071e6:	4b02      	ldr	r3, [pc, #8]	; (80071f0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 80071e8:	0018      	movs	r0, r3
 80071ea:	46bd      	mov	sp, r7
 80071ec:	b002      	add	sp, #8
 80071ee:	bd80      	pop	{r7, pc}
 80071f0:	2000049c 	.word	0x2000049c
 80071f4:	08007aac 	.word	0x08007aac

080071f8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b082      	sub	sp, #8
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	0002      	movs	r2, r0
 8007200:	6039      	str	r1, [r7, #0]
 8007202:	1dfb      	adds	r3, r7, #7
 8007204:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	221a      	movs	r2, #26
 800720a:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800720c:	f000 f84c 	bl	80072a8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007210:	4b02      	ldr	r3, [pc, #8]	; (800721c <USBD_FS_SerialStrDescriptor+0x24>)
}
 8007212:	0018      	movs	r0, r3
 8007214:	46bd      	mov	sp, r7
 8007216:	b002      	add	sp, #8
 8007218:	bd80      	pop	{r7, pc}
 800721a:	46c0      	nop			; (mov r8, r8)
 800721c:	2000013c 	.word	0x2000013c

08007220 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b082      	sub	sp, #8
 8007224:	af00      	add	r7, sp, #0
 8007226:	0002      	movs	r2, r0
 8007228:	6039      	str	r1, [r7, #0]
 800722a:	1dfb      	adds	r3, r7, #7
 800722c:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 800722e:	1dfb      	adds	r3, r7, #7
 8007230:	781b      	ldrb	r3, [r3, #0]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d106      	bne.n	8007244 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007236:	683a      	ldr	r2, [r7, #0]
 8007238:	4908      	ldr	r1, [pc, #32]	; (800725c <USBD_FS_ConfigStrDescriptor+0x3c>)
 800723a:	4b09      	ldr	r3, [pc, #36]	; (8007260 <USBD_FS_ConfigStrDescriptor+0x40>)
 800723c:	0018      	movs	r0, r3
 800723e:	f7ff fe7e 	bl	8006f3e <USBD_GetString>
 8007242:	e005      	b.n	8007250 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007244:	683a      	ldr	r2, [r7, #0]
 8007246:	4905      	ldr	r1, [pc, #20]	; (800725c <USBD_FS_ConfigStrDescriptor+0x3c>)
 8007248:	4b05      	ldr	r3, [pc, #20]	; (8007260 <USBD_FS_ConfigStrDescriptor+0x40>)
 800724a:	0018      	movs	r0, r3
 800724c:	f7ff fe77 	bl	8006f3e <USBD_GetString>
  }
  return USBD_StrDesc;
 8007250:	4b02      	ldr	r3, [pc, #8]	; (800725c <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 8007252:	0018      	movs	r0, r3
 8007254:	46bd      	mov	sp, r7
 8007256:	b002      	add	sp, #8
 8007258:	bd80      	pop	{r7, pc}
 800725a:	46c0      	nop			; (mov r8, r8)
 800725c:	2000049c 	.word	0x2000049c
 8007260:	08007ac0 	.word	0x08007ac0

08007264 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b082      	sub	sp, #8
 8007268:	af00      	add	r7, sp, #0
 800726a:	0002      	movs	r2, r0
 800726c:	6039      	str	r1, [r7, #0]
 800726e:	1dfb      	adds	r3, r7, #7
 8007270:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8007272:	1dfb      	adds	r3, r7, #7
 8007274:	781b      	ldrb	r3, [r3, #0]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d106      	bne.n	8007288 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800727a:	683a      	ldr	r2, [r7, #0]
 800727c:	4908      	ldr	r1, [pc, #32]	; (80072a0 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800727e:	4b09      	ldr	r3, [pc, #36]	; (80072a4 <USBD_FS_InterfaceStrDescriptor+0x40>)
 8007280:	0018      	movs	r0, r3
 8007282:	f7ff fe5c 	bl	8006f3e <USBD_GetString>
 8007286:	e005      	b.n	8007294 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007288:	683a      	ldr	r2, [r7, #0]
 800728a:	4905      	ldr	r1, [pc, #20]	; (80072a0 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800728c:	4b05      	ldr	r3, [pc, #20]	; (80072a4 <USBD_FS_InterfaceStrDescriptor+0x40>)
 800728e:	0018      	movs	r0, r3
 8007290:	f7ff fe55 	bl	8006f3e <USBD_GetString>
  }
  return USBD_StrDesc;
 8007294:	4b02      	ldr	r3, [pc, #8]	; (80072a0 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 8007296:	0018      	movs	r0, r3
 8007298:	46bd      	mov	sp, r7
 800729a:	b002      	add	sp, #8
 800729c:	bd80      	pop	{r7, pc}
 800729e:	46c0      	nop			; (mov r8, r8)
 80072a0:	2000049c 	.word	0x2000049c
 80072a4:	08007acc 	.word	0x08007acc

080072a8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b084      	sub	sp, #16
 80072ac:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80072ae:	4b10      	ldr	r3, [pc, #64]	; (80072f0 <Get_SerialNum+0x48>)
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80072b4:	4b0f      	ldr	r3, [pc, #60]	; (80072f4 <Get_SerialNum+0x4c>)
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80072ba:	4b0f      	ldr	r3, [pc, #60]	; (80072f8 <Get_SerialNum+0x50>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80072c0:	68fa      	ldr	r2, [r7, #12]
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	18d3      	adds	r3, r2, r3
 80072c6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d00b      	beq.n	80072e6 <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80072ce:	490b      	ldr	r1, [pc, #44]	; (80072fc <Get_SerialNum+0x54>)
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	2208      	movs	r2, #8
 80072d4:	0018      	movs	r0, r3
 80072d6:	f000 f815 	bl	8007304 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80072da:	4909      	ldr	r1, [pc, #36]	; (8007300 <Get_SerialNum+0x58>)
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	2204      	movs	r2, #4
 80072e0:	0018      	movs	r0, r3
 80072e2:	f000 f80f 	bl	8007304 <IntToUnicode>
  }
}
 80072e6:	46c0      	nop			; (mov r8, r8)
 80072e8:	46bd      	mov	sp, r7
 80072ea:	b004      	add	sp, #16
 80072ec:	bd80      	pop	{r7, pc}
 80072ee:	46c0      	nop			; (mov r8, r8)
 80072f0:	1ffff7ac 	.word	0x1ffff7ac
 80072f4:	1ffff7b0 	.word	0x1ffff7b0
 80072f8:	1ffff7b4 	.word	0x1ffff7b4
 80072fc:	2000013e 	.word	0x2000013e
 8007300:	2000014e 	.word	0x2000014e

08007304 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b086      	sub	sp, #24
 8007308:	af00      	add	r7, sp, #0
 800730a:	60f8      	str	r0, [r7, #12]
 800730c:	60b9      	str	r1, [r7, #8]
 800730e:	1dfb      	adds	r3, r7, #7
 8007310:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 8007312:	2117      	movs	r1, #23
 8007314:	187b      	adds	r3, r7, r1
 8007316:	2200      	movs	r2, #0
 8007318:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 800731a:	187b      	adds	r3, r7, r1
 800731c:	2200      	movs	r2, #0
 800731e:	701a      	strb	r2, [r3, #0]
 8007320:	e02f      	b.n	8007382 <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	0f1b      	lsrs	r3, r3, #28
 8007326:	2b09      	cmp	r3, #9
 8007328:	d80d      	bhi.n	8007346 <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	0f1b      	lsrs	r3, r3, #28
 800732e:	b2da      	uxtb	r2, r3
 8007330:	2317      	movs	r3, #23
 8007332:	18fb      	adds	r3, r7, r3
 8007334:	781b      	ldrb	r3, [r3, #0]
 8007336:	005b      	lsls	r3, r3, #1
 8007338:	0019      	movs	r1, r3
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	185b      	adds	r3, r3, r1
 800733e:	3230      	adds	r2, #48	; 0x30
 8007340:	b2d2      	uxtb	r2, r2
 8007342:	701a      	strb	r2, [r3, #0]
 8007344:	e00c      	b.n	8007360 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	0f1b      	lsrs	r3, r3, #28
 800734a:	b2da      	uxtb	r2, r3
 800734c:	2317      	movs	r3, #23
 800734e:	18fb      	adds	r3, r7, r3
 8007350:	781b      	ldrb	r3, [r3, #0]
 8007352:	005b      	lsls	r3, r3, #1
 8007354:	0019      	movs	r1, r3
 8007356:	68bb      	ldr	r3, [r7, #8]
 8007358:	185b      	adds	r3, r3, r1
 800735a:	3237      	adds	r2, #55	; 0x37
 800735c:	b2d2      	uxtb	r2, r2
 800735e:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	011b      	lsls	r3, r3, #4
 8007364:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007366:	2117      	movs	r1, #23
 8007368:	187b      	adds	r3, r7, r1
 800736a:	781b      	ldrb	r3, [r3, #0]
 800736c:	005b      	lsls	r3, r3, #1
 800736e:	3301      	adds	r3, #1
 8007370:	68ba      	ldr	r2, [r7, #8]
 8007372:	18d3      	adds	r3, r2, r3
 8007374:	2200      	movs	r2, #0
 8007376:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007378:	187b      	adds	r3, r7, r1
 800737a:	781a      	ldrb	r2, [r3, #0]
 800737c:	187b      	adds	r3, r7, r1
 800737e:	3201      	adds	r2, #1
 8007380:	701a      	strb	r2, [r3, #0]
 8007382:	2317      	movs	r3, #23
 8007384:	18fa      	adds	r2, r7, r3
 8007386:	1dfb      	adds	r3, r7, #7
 8007388:	7812      	ldrb	r2, [r2, #0]
 800738a:	781b      	ldrb	r3, [r3, #0]
 800738c:	429a      	cmp	r2, r3
 800738e:	d3c8      	bcc.n	8007322 <IntToUnicode+0x1e>
  }
}
 8007390:	46c0      	nop			; (mov r8, r8)
 8007392:	46c0      	nop			; (mov r8, r8)
 8007394:	46bd      	mov	sp, r7
 8007396:	b006      	add	sp, #24
 8007398:	bd80      	pop	{r7, pc}
	...

0800739c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b084      	sub	sp, #16
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4a0e      	ldr	r2, [pc, #56]	; (80073e4 <HAL_PCD_MspInit+0x48>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d115      	bne.n	80073da <HAL_PCD_MspInit+0x3e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80073ae:	4b0e      	ldr	r3, [pc, #56]	; (80073e8 <HAL_PCD_MspInit+0x4c>)
 80073b0:	69da      	ldr	r2, [r3, #28]
 80073b2:	4b0d      	ldr	r3, [pc, #52]	; (80073e8 <HAL_PCD_MspInit+0x4c>)
 80073b4:	2180      	movs	r1, #128	; 0x80
 80073b6:	0409      	lsls	r1, r1, #16
 80073b8:	430a      	orrs	r2, r1
 80073ba:	61da      	str	r2, [r3, #28]
 80073bc:	4b0a      	ldr	r3, [pc, #40]	; (80073e8 <HAL_PCD_MspInit+0x4c>)
 80073be:	69da      	ldr	r2, [r3, #28]
 80073c0:	2380      	movs	r3, #128	; 0x80
 80073c2:	041b      	lsls	r3, r3, #16
 80073c4:	4013      	ands	r3, r2
 80073c6:	60fb      	str	r3, [r7, #12]
 80073c8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 80073ca:	2200      	movs	r2, #0
 80073cc:	2100      	movs	r1, #0
 80073ce:	201f      	movs	r0, #31
 80073d0:	f7f9 fca2 	bl	8000d18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 80073d4:	201f      	movs	r0, #31
 80073d6:	f7f9 fcb4 	bl	8000d42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80073da:	46c0      	nop			; (mov r8, r8)
 80073dc:	46bd      	mov	sp, r7
 80073de:	b004      	add	sp, #16
 80073e0:	bd80      	pop	{r7, pc}
 80073e2:	46c0      	nop			; (mov r8, r8)
 80073e4:	40005c00 	.word	0x40005c00
 80073e8:	40021000 	.word	0x40021000

080073ec <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b082      	sub	sp, #8
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80073f4:	687a      	ldr	r2, [r7, #4]
 80073f6:	23bc      	movs	r3, #188	; 0xbc
 80073f8:	009b      	lsls	r3, r3, #2
 80073fa:	58d2      	ldr	r2, [r2, r3]
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	21ac      	movs	r1, #172	; 0xac
 8007400:	0089      	lsls	r1, r1, #2
 8007402:	468c      	mov	ip, r1
 8007404:	4463      	add	r3, ip
 8007406:	0019      	movs	r1, r3
 8007408:	0010      	movs	r0, r2
 800740a:	f7fe fd2b 	bl	8005e64 <USBD_LL_SetupStage>
}
 800740e:	46c0      	nop			; (mov r8, r8)
 8007410:	46bd      	mov	sp, r7
 8007412:	b002      	add	sp, #8
 8007414:	bd80      	pop	{r7, pc}

08007416 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007416:	b590      	push	{r4, r7, lr}
 8007418:	b083      	sub	sp, #12
 800741a:	af00      	add	r7, sp, #0
 800741c:	6078      	str	r0, [r7, #4]
 800741e:	000a      	movs	r2, r1
 8007420:	1cfb      	adds	r3, r7, #3
 8007422:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007424:	687a      	ldr	r2, [r7, #4]
 8007426:	23bc      	movs	r3, #188	; 0xbc
 8007428:	009b      	lsls	r3, r3, #2
 800742a:	58d4      	ldr	r4, [r2, r3]
 800742c:	1cfb      	adds	r3, r7, #3
 800742e:	781a      	ldrb	r2, [r3, #0]
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	23be      	movs	r3, #190	; 0xbe
 8007434:	0059      	lsls	r1, r3, #1
 8007436:	0013      	movs	r3, r2
 8007438:	009b      	lsls	r3, r3, #2
 800743a:	189b      	adds	r3, r3, r2
 800743c:	00db      	lsls	r3, r3, #3
 800743e:	18c3      	adds	r3, r0, r3
 8007440:	185b      	adds	r3, r3, r1
 8007442:	681a      	ldr	r2, [r3, #0]
 8007444:	1cfb      	adds	r3, r7, #3
 8007446:	781b      	ldrb	r3, [r3, #0]
 8007448:	0019      	movs	r1, r3
 800744a:	0020      	movs	r0, r4
 800744c:	f7fe fd68 	bl	8005f20 <USBD_LL_DataOutStage>
}
 8007450:	46c0      	nop			; (mov r8, r8)
 8007452:	46bd      	mov	sp, r7
 8007454:	b003      	add	sp, #12
 8007456:	bd90      	pop	{r4, r7, pc}

08007458 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b082      	sub	sp, #8
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
 8007460:	000a      	movs	r2, r1
 8007462:	1cfb      	adds	r3, r7, #3
 8007464:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007466:	687a      	ldr	r2, [r7, #4]
 8007468:	23bc      	movs	r3, #188	; 0xbc
 800746a:	009b      	lsls	r3, r3, #2
 800746c:	58d0      	ldr	r0, [r2, r3]
 800746e:	1cfb      	adds	r3, r7, #3
 8007470:	781a      	ldrb	r2, [r3, #0]
 8007472:	6879      	ldr	r1, [r7, #4]
 8007474:	0013      	movs	r3, r2
 8007476:	009b      	lsls	r3, r3, #2
 8007478:	189b      	adds	r3, r3, r2
 800747a:	00db      	lsls	r3, r3, #3
 800747c:	18cb      	adds	r3, r1, r3
 800747e:	333c      	adds	r3, #60	; 0x3c
 8007480:	681a      	ldr	r2, [r3, #0]
 8007482:	1cfb      	adds	r3, r7, #3
 8007484:	781b      	ldrb	r3, [r3, #0]
 8007486:	0019      	movs	r1, r3
 8007488:	f7fe fdcc 	bl	8006024 <USBD_LL_DataInStage>
}
 800748c:	46c0      	nop			; (mov r8, r8)
 800748e:	46bd      	mov	sp, r7
 8007490:	b002      	add	sp, #8
 8007492:	bd80      	pop	{r7, pc}

08007494 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b082      	sub	sp, #8
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800749c:	687a      	ldr	r2, [r7, #4]
 800749e:	23bc      	movs	r3, #188	; 0xbc
 80074a0:	009b      	lsls	r3, r3, #2
 80074a2:	58d3      	ldr	r3, [r2, r3]
 80074a4:	0018      	movs	r0, r3
 80074a6:	f7fe ff03 	bl	80062b0 <USBD_LL_SOF>
}
 80074aa:	46c0      	nop			; (mov r8, r8)
 80074ac:	46bd      	mov	sp, r7
 80074ae:	b002      	add	sp, #8
 80074b0:	bd80      	pop	{r7, pc}

080074b2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074b2:	b580      	push	{r7, lr}
 80074b4:	b084      	sub	sp, #16
 80074b6:	af00      	add	r7, sp, #0
 80074b8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80074ba:	230f      	movs	r3, #15
 80074bc:	18fb      	adds	r3, r7, r3
 80074be:	2201      	movs	r2, #1
 80074c0:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	689b      	ldr	r3, [r3, #8]
 80074c6:	2b02      	cmp	r3, #2
 80074c8:	d001      	beq.n	80074ce <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 80074ca:	f7f9 f825 	bl	8000518 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80074ce:	687a      	ldr	r2, [r7, #4]
 80074d0:	23bc      	movs	r3, #188	; 0xbc
 80074d2:	009b      	lsls	r3, r3, #2
 80074d4:	58d2      	ldr	r2, [r2, r3]
 80074d6:	230f      	movs	r3, #15
 80074d8:	18fb      	adds	r3, r7, r3
 80074da:	781b      	ldrb	r3, [r3, #0]
 80074dc:	0019      	movs	r1, r3
 80074de:	0010      	movs	r0, r2
 80074e0:	f7fe fea5 	bl	800622e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80074e4:	687a      	ldr	r2, [r7, #4]
 80074e6:	23bc      	movs	r3, #188	; 0xbc
 80074e8:	009b      	lsls	r3, r3, #2
 80074ea:	58d3      	ldr	r3, [r2, r3]
 80074ec:	0018      	movs	r0, r3
 80074ee:	f7fe fe56 	bl	800619e <USBD_LL_Reset>
}
 80074f2:	46c0      	nop			; (mov r8, r8)
 80074f4:	46bd      	mov	sp, r7
 80074f6:	b004      	add	sp, #16
 80074f8:	bd80      	pop	{r7, pc}
	...

080074fc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b082      	sub	sp, #8
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007504:	687a      	ldr	r2, [r7, #4]
 8007506:	23bc      	movs	r3, #188	; 0xbc
 8007508:	009b      	lsls	r3, r3, #2
 800750a:	58d3      	ldr	r3, [r2, r3]
 800750c:	0018      	movs	r0, r3
 800750e:	f7fe fe9f 	bl	8006250 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	699b      	ldr	r3, [r3, #24]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d005      	beq.n	8007526 <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800751a:	4b05      	ldr	r3, [pc, #20]	; (8007530 <HAL_PCD_SuspendCallback+0x34>)
 800751c:	691a      	ldr	r2, [r3, #16]
 800751e:	4b04      	ldr	r3, [pc, #16]	; (8007530 <HAL_PCD_SuspendCallback+0x34>)
 8007520:	2106      	movs	r1, #6
 8007522:	430a      	orrs	r2, r1
 8007524:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 8007526:	46c0      	nop			; (mov r8, r8)
 8007528:	46bd      	mov	sp, r7
 800752a:	b002      	add	sp, #8
 800752c:	bd80      	pop	{r7, pc}
 800752e:	46c0      	nop			; (mov r8, r8)
 8007530:	e000ed00 	.word	0xe000ed00

08007534 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b082      	sub	sp, #8
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	699b      	ldr	r3, [r3, #24]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d007      	beq.n	8007554 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007544:	4b09      	ldr	r3, [pc, #36]	; (800756c <HAL_PCD_ResumeCallback+0x38>)
 8007546:	691a      	ldr	r2, [r3, #16]
 8007548:	4b08      	ldr	r3, [pc, #32]	; (800756c <HAL_PCD_ResumeCallback+0x38>)
 800754a:	2106      	movs	r1, #6
 800754c:	438a      	bics	r2, r1
 800754e:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 8007550:	f000 fa1a 	bl	8007988 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007554:	687a      	ldr	r2, [r7, #4]
 8007556:	23bc      	movs	r3, #188	; 0xbc
 8007558:	009b      	lsls	r3, r3, #2
 800755a:	58d3      	ldr	r3, [r2, r3]
 800755c:	0018      	movs	r0, r3
 800755e:	f7fe fe8f 	bl	8006280 <USBD_LL_Resume>
}
 8007562:	46c0      	nop			; (mov r8, r8)
 8007564:	46bd      	mov	sp, r7
 8007566:	b002      	add	sp, #8
 8007568:	bd80      	pop	{r7, pc}
 800756a:	46c0      	nop			; (mov r8, r8)
 800756c:	e000ed00 	.word	0xe000ed00

08007570 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b082      	sub	sp, #8
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8007578:	4a23      	ldr	r2, [pc, #140]	; (8007608 <USBD_LL_Init+0x98>)
 800757a:	23bc      	movs	r3, #188	; 0xbc
 800757c:	009b      	lsls	r3, r3, #2
 800757e:	6879      	ldr	r1, [r7, #4]
 8007580:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 8007582:	687a      	ldr	r2, [r7, #4]
 8007584:	23b0      	movs	r3, #176	; 0xb0
 8007586:	009b      	lsls	r3, r3, #2
 8007588:	491f      	ldr	r1, [pc, #124]	; (8007608 <USBD_LL_Init+0x98>)
 800758a:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 800758c:	4b1e      	ldr	r3, [pc, #120]	; (8007608 <USBD_LL_Init+0x98>)
 800758e:	4a1f      	ldr	r2, [pc, #124]	; (800760c <USBD_LL_Init+0x9c>)
 8007590:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007592:	4b1d      	ldr	r3, [pc, #116]	; (8007608 <USBD_LL_Init+0x98>)
 8007594:	2208      	movs	r2, #8
 8007596:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007598:	4b1b      	ldr	r3, [pc, #108]	; (8007608 <USBD_LL_Init+0x98>)
 800759a:	2202      	movs	r2, #2
 800759c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800759e:	4b1a      	ldr	r3, [pc, #104]	; (8007608 <USBD_LL_Init+0x98>)
 80075a0:	2202      	movs	r2, #2
 80075a2:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80075a4:	4b18      	ldr	r3, [pc, #96]	; (8007608 <USBD_LL_Init+0x98>)
 80075a6:	2200      	movs	r2, #0
 80075a8:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80075aa:	4b17      	ldr	r3, [pc, #92]	; (8007608 <USBD_LL_Init+0x98>)
 80075ac:	2200      	movs	r2, #0
 80075ae:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80075b0:	4b15      	ldr	r3, [pc, #84]	; (8007608 <USBD_LL_Init+0x98>)
 80075b2:	2200      	movs	r2, #0
 80075b4:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80075b6:	4b14      	ldr	r3, [pc, #80]	; (8007608 <USBD_LL_Init+0x98>)
 80075b8:	0018      	movs	r0, r3
 80075ba:	f7f9 fd91 	bl	80010e0 <HAL_PCD_Init>
 80075be:	1e03      	subs	r3, r0, #0
 80075c0:	d001      	beq.n	80075c6 <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 80075c2:	f7f8 ffa9 	bl	8000518 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80075c6:	687a      	ldr	r2, [r7, #4]
 80075c8:	23b0      	movs	r3, #176	; 0xb0
 80075ca:	009b      	lsls	r3, r3, #2
 80075cc:	58d0      	ldr	r0, [r2, r3]
 80075ce:	2318      	movs	r3, #24
 80075d0:	2200      	movs	r2, #0
 80075d2:	2100      	movs	r1, #0
 80075d4:	f7fb fb5a 	bl	8002c8c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80075d8:	687a      	ldr	r2, [r7, #4]
 80075da:	23b0      	movs	r3, #176	; 0xb0
 80075dc:	009b      	lsls	r3, r3, #2
 80075de:	58d0      	ldr	r0, [r2, r3]
 80075e0:	2358      	movs	r3, #88	; 0x58
 80075e2:	2200      	movs	r2, #0
 80075e4:	2180      	movs	r1, #128	; 0x80
 80075e6:	f7fb fb51 	bl	8002c8c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 80075ea:	687a      	ldr	r2, [r7, #4]
 80075ec:	23b0      	movs	r3, #176	; 0xb0
 80075ee:	009b      	lsls	r3, r3, #2
 80075f0:	58d0      	ldr	r0, [r2, r3]
 80075f2:	2380      	movs	r3, #128	; 0x80
 80075f4:	005b      	lsls	r3, r3, #1
 80075f6:	2200      	movs	r2, #0
 80075f8:	2181      	movs	r1, #129	; 0x81
 80075fa:	f7fb fb47 	bl	8002c8c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 80075fe:	2300      	movs	r3, #0
}
 8007600:	0018      	movs	r0, r3
 8007602:	46bd      	mov	sp, r7
 8007604:	b002      	add	sp, #8
 8007606:	bd80      	pop	{r7, pc}
 8007608:	2000069c 	.word	0x2000069c
 800760c:	40005c00 	.word	0x40005c00

08007610 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007610:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007612:	b085      	sub	sp, #20
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007618:	210f      	movs	r1, #15
 800761a:	187b      	adds	r3, r7, r1
 800761c:	2200      	movs	r2, #0
 800761e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007620:	260e      	movs	r6, #14
 8007622:	19bb      	adds	r3, r7, r6
 8007624:	2200      	movs	r2, #0
 8007626:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007628:	687a      	ldr	r2, [r7, #4]
 800762a:	23b0      	movs	r3, #176	; 0xb0
 800762c:	009b      	lsls	r3, r3, #2
 800762e:	58d3      	ldr	r3, [r2, r3]
 8007630:	000d      	movs	r5, r1
 8007632:	187c      	adds	r4, r7, r1
 8007634:	0018      	movs	r0, r3
 8007636:	f7f9 fe63 	bl	8001300 <HAL_PCD_Start>
 800763a:	0003      	movs	r3, r0
 800763c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800763e:	19bc      	adds	r4, r7, r6
 8007640:	197b      	adds	r3, r7, r5
 8007642:	781b      	ldrb	r3, [r3, #0]
 8007644:	0018      	movs	r0, r3
 8007646:	f000 f9a6 	bl	8007996 <USBD_Get_USB_Status>
 800764a:	0003      	movs	r3, r0
 800764c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800764e:	19bb      	adds	r3, r7, r6
 8007650:	781b      	ldrb	r3, [r3, #0]
}
 8007652:	0018      	movs	r0, r3
 8007654:	46bd      	mov	sp, r7
 8007656:	b005      	add	sp, #20
 8007658:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800765a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800765a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800765c:	b085      	sub	sp, #20
 800765e:	af00      	add	r7, sp, #0
 8007660:	6078      	str	r0, [r7, #4]
 8007662:	000c      	movs	r4, r1
 8007664:	0010      	movs	r0, r2
 8007666:	0019      	movs	r1, r3
 8007668:	1cfb      	adds	r3, r7, #3
 800766a:	1c22      	adds	r2, r4, #0
 800766c:	701a      	strb	r2, [r3, #0]
 800766e:	1cbb      	adds	r3, r7, #2
 8007670:	1c02      	adds	r2, r0, #0
 8007672:	701a      	strb	r2, [r3, #0]
 8007674:	003b      	movs	r3, r7
 8007676:	1c0a      	adds	r2, r1, #0
 8007678:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800767a:	260f      	movs	r6, #15
 800767c:	19bb      	adds	r3, r7, r6
 800767e:	2200      	movs	r2, #0
 8007680:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007682:	250e      	movs	r5, #14
 8007684:	197b      	adds	r3, r7, r5
 8007686:	2200      	movs	r2, #0
 8007688:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800768a:	687a      	ldr	r2, [r7, #4]
 800768c:	23b0      	movs	r3, #176	; 0xb0
 800768e:	009b      	lsls	r3, r3, #2
 8007690:	58d0      	ldr	r0, [r2, r3]
 8007692:	19bc      	adds	r4, r7, r6
 8007694:	1cbb      	adds	r3, r7, #2
 8007696:	781d      	ldrb	r5, [r3, #0]
 8007698:	003b      	movs	r3, r7
 800769a:	881a      	ldrh	r2, [r3, #0]
 800769c:	1cfb      	adds	r3, r7, #3
 800769e:	7819      	ldrb	r1, [r3, #0]
 80076a0:	002b      	movs	r3, r5
 80076a2:	f7f9 fffa 	bl	800169a <HAL_PCD_EP_Open>
 80076a6:	0003      	movs	r3, r0
 80076a8:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80076aa:	250e      	movs	r5, #14
 80076ac:	197c      	adds	r4, r7, r5
 80076ae:	19bb      	adds	r3, r7, r6
 80076b0:	781b      	ldrb	r3, [r3, #0]
 80076b2:	0018      	movs	r0, r3
 80076b4:	f000 f96f 	bl	8007996 <USBD_Get_USB_Status>
 80076b8:	0003      	movs	r3, r0
 80076ba:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80076bc:	197b      	adds	r3, r7, r5
 80076be:	781b      	ldrb	r3, [r3, #0]
}
 80076c0:	0018      	movs	r0, r3
 80076c2:	46bd      	mov	sp, r7
 80076c4:	b005      	add	sp, #20
 80076c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080076c8 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80076c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80076ca:	b085      	sub	sp, #20
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
 80076d0:	000a      	movs	r2, r1
 80076d2:	1cfb      	adds	r3, r7, #3
 80076d4:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076d6:	210f      	movs	r1, #15
 80076d8:	187b      	adds	r3, r7, r1
 80076da:	2200      	movs	r2, #0
 80076dc:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80076de:	260e      	movs	r6, #14
 80076e0:	19bb      	adds	r3, r7, r6
 80076e2:	2200      	movs	r2, #0
 80076e4:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80076e6:	687a      	ldr	r2, [r7, #4]
 80076e8:	23b0      	movs	r3, #176	; 0xb0
 80076ea:	009b      	lsls	r3, r3, #2
 80076ec:	58d2      	ldr	r2, [r2, r3]
 80076ee:	000d      	movs	r5, r1
 80076f0:	187c      	adds	r4, r7, r1
 80076f2:	1cfb      	adds	r3, r7, #3
 80076f4:	781b      	ldrb	r3, [r3, #0]
 80076f6:	0019      	movs	r1, r3
 80076f8:	0010      	movs	r0, r2
 80076fa:	f7fa f846 	bl	800178a <HAL_PCD_EP_Close>
 80076fe:	0003      	movs	r3, r0
 8007700:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007702:	19bc      	adds	r4, r7, r6
 8007704:	197b      	adds	r3, r7, r5
 8007706:	781b      	ldrb	r3, [r3, #0]
 8007708:	0018      	movs	r0, r3
 800770a:	f000 f944 	bl	8007996 <USBD_Get_USB_Status>
 800770e:	0003      	movs	r3, r0
 8007710:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8007712:	19bb      	adds	r3, r7, r6
 8007714:	781b      	ldrb	r3, [r3, #0]
}
 8007716:	0018      	movs	r0, r3
 8007718:	46bd      	mov	sp, r7
 800771a:	b005      	add	sp, #20
 800771c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800771e <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800771e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007720:	b085      	sub	sp, #20
 8007722:	af00      	add	r7, sp, #0
 8007724:	6078      	str	r0, [r7, #4]
 8007726:	000a      	movs	r2, r1
 8007728:	1cfb      	adds	r3, r7, #3
 800772a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800772c:	210f      	movs	r1, #15
 800772e:	187b      	adds	r3, r7, r1
 8007730:	2200      	movs	r2, #0
 8007732:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007734:	260e      	movs	r6, #14
 8007736:	19bb      	adds	r3, r7, r6
 8007738:	2200      	movs	r2, #0
 800773a:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800773c:	687a      	ldr	r2, [r7, #4]
 800773e:	23b0      	movs	r3, #176	; 0xb0
 8007740:	009b      	lsls	r3, r3, #2
 8007742:	58d2      	ldr	r2, [r2, r3]
 8007744:	000d      	movs	r5, r1
 8007746:	187c      	adds	r4, r7, r1
 8007748:	1cfb      	adds	r3, r7, #3
 800774a:	781b      	ldrb	r3, [r3, #0]
 800774c:	0019      	movs	r1, r3
 800774e:	0010      	movs	r0, r2
 8007750:	f7fa f8f9 	bl	8001946 <HAL_PCD_EP_SetStall>
 8007754:	0003      	movs	r3, r0
 8007756:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007758:	19bc      	adds	r4, r7, r6
 800775a:	197b      	adds	r3, r7, r5
 800775c:	781b      	ldrb	r3, [r3, #0]
 800775e:	0018      	movs	r0, r3
 8007760:	f000 f919 	bl	8007996 <USBD_Get_USB_Status>
 8007764:	0003      	movs	r3, r0
 8007766:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8007768:	19bb      	adds	r3, r7, r6
 800776a:	781b      	ldrb	r3, [r3, #0]
}
 800776c:	0018      	movs	r0, r3
 800776e:	46bd      	mov	sp, r7
 8007770:	b005      	add	sp, #20
 8007772:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007774 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007774:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007776:	b085      	sub	sp, #20
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
 800777c:	000a      	movs	r2, r1
 800777e:	1cfb      	adds	r3, r7, #3
 8007780:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007782:	210f      	movs	r1, #15
 8007784:	187b      	adds	r3, r7, r1
 8007786:	2200      	movs	r2, #0
 8007788:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800778a:	260e      	movs	r6, #14
 800778c:	19bb      	adds	r3, r7, r6
 800778e:	2200      	movs	r2, #0
 8007790:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007792:	687a      	ldr	r2, [r7, #4]
 8007794:	23b0      	movs	r3, #176	; 0xb0
 8007796:	009b      	lsls	r3, r3, #2
 8007798:	58d2      	ldr	r2, [r2, r3]
 800779a:	000d      	movs	r5, r1
 800779c:	187c      	adds	r4, r7, r1
 800779e:	1cfb      	adds	r3, r7, #3
 80077a0:	781b      	ldrb	r3, [r3, #0]
 80077a2:	0019      	movs	r1, r3
 80077a4:	0010      	movs	r0, r2
 80077a6:	f7fa f92a 	bl	80019fe <HAL_PCD_EP_ClrStall>
 80077aa:	0003      	movs	r3, r0
 80077ac:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80077ae:	19bc      	adds	r4, r7, r6
 80077b0:	197b      	adds	r3, r7, r5
 80077b2:	781b      	ldrb	r3, [r3, #0]
 80077b4:	0018      	movs	r0, r3
 80077b6:	f000 f8ee 	bl	8007996 <USBD_Get_USB_Status>
 80077ba:	0003      	movs	r3, r0
 80077bc:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80077be:	19bb      	adds	r3, r7, r6
 80077c0:	781b      	ldrb	r3, [r3, #0]
}
 80077c2:	0018      	movs	r0, r3
 80077c4:	46bd      	mov	sp, r7
 80077c6:	b005      	add	sp, #20
 80077c8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080077ca <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80077ca:	b580      	push	{r7, lr}
 80077cc:	b084      	sub	sp, #16
 80077ce:	af00      	add	r7, sp, #0
 80077d0:	6078      	str	r0, [r7, #4]
 80077d2:	000a      	movs	r2, r1
 80077d4:	1cfb      	adds	r3, r7, #3
 80077d6:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80077d8:	687a      	ldr	r2, [r7, #4]
 80077da:	23b0      	movs	r3, #176	; 0xb0
 80077dc:	009b      	lsls	r3, r3, #2
 80077de:	58d3      	ldr	r3, [r2, r3]
 80077e0:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80077e2:	1cfb      	adds	r3, r7, #3
 80077e4:	781b      	ldrb	r3, [r3, #0]
 80077e6:	b25b      	sxtb	r3, r3
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	da0d      	bge.n	8007808 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80077ec:	1cfb      	adds	r3, r7, #3
 80077ee:	781b      	ldrb	r3, [r3, #0]
 80077f0:	227f      	movs	r2, #127	; 0x7f
 80077f2:	4013      	ands	r3, r2
 80077f4:	68f9      	ldr	r1, [r7, #12]
 80077f6:	1c5a      	adds	r2, r3, #1
 80077f8:	0013      	movs	r3, r2
 80077fa:	009b      	lsls	r3, r3, #2
 80077fc:	189b      	adds	r3, r3, r2
 80077fe:	00db      	lsls	r3, r3, #3
 8007800:	18cb      	adds	r3, r1, r3
 8007802:	3302      	adds	r3, #2
 8007804:	781b      	ldrb	r3, [r3, #0]
 8007806:	e00d      	b.n	8007824 <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007808:	1cfb      	adds	r3, r7, #3
 800780a:	781b      	ldrb	r3, [r3, #0]
 800780c:	227f      	movs	r2, #127	; 0x7f
 800780e:	401a      	ands	r2, r3
 8007810:	68f8      	ldr	r0, [r7, #12]
 8007812:	23b5      	movs	r3, #181	; 0xb5
 8007814:	0059      	lsls	r1, r3, #1
 8007816:	0013      	movs	r3, r2
 8007818:	009b      	lsls	r3, r3, #2
 800781a:	189b      	adds	r3, r3, r2
 800781c:	00db      	lsls	r3, r3, #3
 800781e:	18c3      	adds	r3, r0, r3
 8007820:	185b      	adds	r3, r3, r1
 8007822:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007824:	0018      	movs	r0, r3
 8007826:	46bd      	mov	sp, r7
 8007828:	b004      	add	sp, #16
 800782a:	bd80      	pop	{r7, pc}

0800782c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800782c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800782e:	b085      	sub	sp, #20
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
 8007834:	000a      	movs	r2, r1
 8007836:	1cfb      	adds	r3, r7, #3
 8007838:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800783a:	210f      	movs	r1, #15
 800783c:	187b      	adds	r3, r7, r1
 800783e:	2200      	movs	r2, #0
 8007840:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007842:	260e      	movs	r6, #14
 8007844:	19bb      	adds	r3, r7, r6
 8007846:	2200      	movs	r2, #0
 8007848:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800784a:	687a      	ldr	r2, [r7, #4]
 800784c:	23b0      	movs	r3, #176	; 0xb0
 800784e:	009b      	lsls	r3, r3, #2
 8007850:	58d2      	ldr	r2, [r2, r3]
 8007852:	000d      	movs	r5, r1
 8007854:	187c      	adds	r4, r7, r1
 8007856:	1cfb      	adds	r3, r7, #3
 8007858:	781b      	ldrb	r3, [r3, #0]
 800785a:	0019      	movs	r1, r3
 800785c:	0010      	movs	r0, r2
 800785e:	f7f9 fef1 	bl	8001644 <HAL_PCD_SetAddress>
 8007862:	0003      	movs	r3, r0
 8007864:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007866:	19bc      	adds	r4, r7, r6
 8007868:	197b      	adds	r3, r7, r5
 800786a:	781b      	ldrb	r3, [r3, #0]
 800786c:	0018      	movs	r0, r3
 800786e:	f000 f892 	bl	8007996 <USBD_Get_USB_Status>
 8007872:	0003      	movs	r3, r0
 8007874:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8007876:	19bb      	adds	r3, r7, r6
 8007878:	781b      	ldrb	r3, [r3, #0]
}
 800787a:	0018      	movs	r0, r3
 800787c:	46bd      	mov	sp, r7
 800787e:	b005      	add	sp, #20
 8007880:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007882 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007882:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007884:	b087      	sub	sp, #28
 8007886:	af00      	add	r7, sp, #0
 8007888:	60f8      	str	r0, [r7, #12]
 800788a:	0008      	movs	r0, r1
 800788c:	607a      	str	r2, [r7, #4]
 800788e:	0019      	movs	r1, r3
 8007890:	230b      	movs	r3, #11
 8007892:	18fb      	adds	r3, r7, r3
 8007894:	1c02      	adds	r2, r0, #0
 8007896:	701a      	strb	r2, [r3, #0]
 8007898:	2408      	movs	r4, #8
 800789a:	193b      	adds	r3, r7, r4
 800789c:	1c0a      	adds	r2, r1, #0
 800789e:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80078a0:	2117      	movs	r1, #23
 80078a2:	187b      	adds	r3, r7, r1
 80078a4:	2200      	movs	r2, #0
 80078a6:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80078a8:	2516      	movs	r5, #22
 80078aa:	197b      	adds	r3, r7, r5
 80078ac:	2200      	movs	r2, #0
 80078ae:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80078b0:	68fa      	ldr	r2, [r7, #12]
 80078b2:	23b0      	movs	r3, #176	; 0xb0
 80078b4:	009b      	lsls	r3, r3, #2
 80078b6:	58d0      	ldr	r0, [r2, r3]
 80078b8:	193b      	adds	r3, r7, r4
 80078ba:	881d      	ldrh	r5, [r3, #0]
 80078bc:	000e      	movs	r6, r1
 80078be:	187c      	adds	r4, r7, r1
 80078c0:	687a      	ldr	r2, [r7, #4]
 80078c2:	230b      	movs	r3, #11
 80078c4:	18fb      	adds	r3, r7, r3
 80078c6:	7819      	ldrb	r1, [r3, #0]
 80078c8:	002b      	movs	r3, r5
 80078ca:	f7f9 fff3 	bl	80018b4 <HAL_PCD_EP_Transmit>
 80078ce:	0003      	movs	r3, r0
 80078d0:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80078d2:	2516      	movs	r5, #22
 80078d4:	197c      	adds	r4, r7, r5
 80078d6:	19bb      	adds	r3, r7, r6
 80078d8:	781b      	ldrb	r3, [r3, #0]
 80078da:	0018      	movs	r0, r3
 80078dc:	f000 f85b 	bl	8007996 <USBD_Get_USB_Status>
 80078e0:	0003      	movs	r3, r0
 80078e2:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80078e4:	197b      	adds	r3, r7, r5
 80078e6:	781b      	ldrb	r3, [r3, #0]
}
 80078e8:	0018      	movs	r0, r3
 80078ea:	46bd      	mov	sp, r7
 80078ec:	b007      	add	sp, #28
 80078ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

080078f0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80078f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80078f2:	b087      	sub	sp, #28
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	60f8      	str	r0, [r7, #12]
 80078f8:	0008      	movs	r0, r1
 80078fa:	607a      	str	r2, [r7, #4]
 80078fc:	0019      	movs	r1, r3
 80078fe:	230b      	movs	r3, #11
 8007900:	18fb      	adds	r3, r7, r3
 8007902:	1c02      	adds	r2, r0, #0
 8007904:	701a      	strb	r2, [r3, #0]
 8007906:	2408      	movs	r4, #8
 8007908:	193b      	adds	r3, r7, r4
 800790a:	1c0a      	adds	r2, r1, #0
 800790c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800790e:	2117      	movs	r1, #23
 8007910:	187b      	adds	r3, r7, r1
 8007912:	2200      	movs	r2, #0
 8007914:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007916:	2516      	movs	r5, #22
 8007918:	197b      	adds	r3, r7, r5
 800791a:	2200      	movs	r2, #0
 800791c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800791e:	68fa      	ldr	r2, [r7, #12]
 8007920:	23b0      	movs	r3, #176	; 0xb0
 8007922:	009b      	lsls	r3, r3, #2
 8007924:	58d0      	ldr	r0, [r2, r3]
 8007926:	193b      	adds	r3, r7, r4
 8007928:	881d      	ldrh	r5, [r3, #0]
 800792a:	000e      	movs	r6, r1
 800792c:	187c      	adds	r4, r7, r1
 800792e:	687a      	ldr	r2, [r7, #4]
 8007930:	230b      	movs	r3, #11
 8007932:	18fb      	adds	r3, r7, r3
 8007934:	7819      	ldrb	r1, [r3, #0]
 8007936:	002b      	movs	r3, r5
 8007938:	f7f9 ff78 	bl	800182c <HAL_PCD_EP_Receive>
 800793c:	0003      	movs	r3, r0
 800793e:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007940:	2516      	movs	r5, #22
 8007942:	197c      	adds	r4, r7, r5
 8007944:	19bb      	adds	r3, r7, r6
 8007946:	781b      	ldrb	r3, [r3, #0]
 8007948:	0018      	movs	r0, r3
 800794a:	f000 f824 	bl	8007996 <USBD_Get_USB_Status>
 800794e:	0003      	movs	r3, r0
 8007950:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8007952:	197b      	adds	r3, r7, r5
 8007954:	781b      	ldrb	r3, [r3, #0]
}
 8007956:	0018      	movs	r0, r3
 8007958:	46bd      	mov	sp, r7
 800795a:	b007      	add	sp, #28
 800795c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08007960 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b082      	sub	sp, #8
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007968:	4b02      	ldr	r3, [pc, #8]	; (8007974 <USBD_static_malloc+0x14>)
}
 800796a:	0018      	movs	r0, r3
 800796c:	46bd      	mov	sp, r7
 800796e:	b002      	add	sp, #8
 8007970:	bd80      	pop	{r7, pc}
 8007972:	46c0      	nop			; (mov r8, r8)
 8007974:	2000017c 	.word	0x2000017c

08007978 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b082      	sub	sp, #8
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]

}
 8007980:	46c0      	nop			; (mov r8, r8)
 8007982:	46bd      	mov	sp, r7
 8007984:	b002      	add	sp, #8
 8007986:	bd80      	pop	{r7, pc}

08007988 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB Resume CallBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800798c:	f7f8 fd58 	bl	8000440 <SystemClock_Config>
}
 8007990:	46c0      	nop			; (mov r8, r8)
 8007992:	46bd      	mov	sp, r7
 8007994:	bd80      	pop	{r7, pc}

08007996 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007996:	b580      	push	{r7, lr}
 8007998:	b084      	sub	sp, #16
 800799a:	af00      	add	r7, sp, #0
 800799c:	0002      	movs	r2, r0
 800799e:	1dfb      	adds	r3, r7, #7
 80079a0:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80079a2:	230f      	movs	r3, #15
 80079a4:	18fb      	adds	r3, r7, r3
 80079a6:	2200      	movs	r2, #0
 80079a8:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 80079aa:	1dfb      	adds	r3, r7, #7
 80079ac:	781b      	ldrb	r3, [r3, #0]
 80079ae:	2b03      	cmp	r3, #3
 80079b0:	d017      	beq.n	80079e2 <USBD_Get_USB_Status+0x4c>
 80079b2:	dc1b      	bgt.n	80079ec <USBD_Get_USB_Status+0x56>
 80079b4:	2b02      	cmp	r3, #2
 80079b6:	d00f      	beq.n	80079d8 <USBD_Get_USB_Status+0x42>
 80079b8:	dc18      	bgt.n	80079ec <USBD_Get_USB_Status+0x56>
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d002      	beq.n	80079c4 <USBD_Get_USB_Status+0x2e>
 80079be:	2b01      	cmp	r3, #1
 80079c0:	d005      	beq.n	80079ce <USBD_Get_USB_Status+0x38>
 80079c2:	e013      	b.n	80079ec <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80079c4:	230f      	movs	r3, #15
 80079c6:	18fb      	adds	r3, r7, r3
 80079c8:	2200      	movs	r2, #0
 80079ca:	701a      	strb	r2, [r3, #0]
    break;
 80079cc:	e013      	b.n	80079f6 <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80079ce:	230f      	movs	r3, #15
 80079d0:	18fb      	adds	r3, r7, r3
 80079d2:	2202      	movs	r2, #2
 80079d4:	701a      	strb	r2, [r3, #0]
    break;
 80079d6:	e00e      	b.n	80079f6 <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80079d8:	230f      	movs	r3, #15
 80079da:	18fb      	adds	r3, r7, r3
 80079dc:	2201      	movs	r2, #1
 80079de:	701a      	strb	r2, [r3, #0]
    break;
 80079e0:	e009      	b.n	80079f6 <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80079e2:	230f      	movs	r3, #15
 80079e4:	18fb      	adds	r3, r7, r3
 80079e6:	2202      	movs	r2, #2
 80079e8:	701a      	strb	r2, [r3, #0]
    break;
 80079ea:	e004      	b.n	80079f6 <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 80079ec:	230f      	movs	r3, #15
 80079ee:	18fb      	adds	r3, r7, r3
 80079f0:	2202      	movs	r2, #2
 80079f2:	701a      	strb	r2, [r3, #0]
    break;
 80079f4:	46c0      	nop			; (mov r8, r8)
  }
  return usb_status;
 80079f6:	230f      	movs	r3, #15
 80079f8:	18fb      	adds	r3, r7, r3
 80079fa:	781b      	ldrb	r3, [r3, #0]
}
 80079fc:	0018      	movs	r0, r3
 80079fe:	46bd      	mov	sp, r7
 8007a00:	b004      	add	sp, #16
 8007a02:	bd80      	pop	{r7, pc}

08007a04 <__libc_init_array>:
 8007a04:	b570      	push	{r4, r5, r6, lr}
 8007a06:	2600      	movs	r6, #0
 8007a08:	4d0c      	ldr	r5, [pc, #48]	; (8007a3c <__libc_init_array+0x38>)
 8007a0a:	4c0d      	ldr	r4, [pc, #52]	; (8007a40 <__libc_init_array+0x3c>)
 8007a0c:	1b64      	subs	r4, r4, r5
 8007a0e:	10a4      	asrs	r4, r4, #2
 8007a10:	42a6      	cmp	r6, r4
 8007a12:	d109      	bne.n	8007a28 <__libc_init_array+0x24>
 8007a14:	2600      	movs	r6, #0
 8007a16:	f000 f821 	bl	8007a5c <_init>
 8007a1a:	4d0a      	ldr	r5, [pc, #40]	; (8007a44 <__libc_init_array+0x40>)
 8007a1c:	4c0a      	ldr	r4, [pc, #40]	; (8007a48 <__libc_init_array+0x44>)
 8007a1e:	1b64      	subs	r4, r4, r5
 8007a20:	10a4      	asrs	r4, r4, #2
 8007a22:	42a6      	cmp	r6, r4
 8007a24:	d105      	bne.n	8007a32 <__libc_init_array+0x2e>
 8007a26:	bd70      	pop	{r4, r5, r6, pc}
 8007a28:	00b3      	lsls	r3, r6, #2
 8007a2a:	58eb      	ldr	r3, [r5, r3]
 8007a2c:	4798      	blx	r3
 8007a2e:	3601      	adds	r6, #1
 8007a30:	e7ee      	b.n	8007a10 <__libc_init_array+0xc>
 8007a32:	00b3      	lsls	r3, r6, #2
 8007a34:	58eb      	ldr	r3, [r5, r3]
 8007a36:	4798      	blx	r3
 8007a38:	3601      	adds	r6, #1
 8007a3a:	e7f2      	b.n	8007a22 <__libc_init_array+0x1e>
 8007a3c:	08007b8c 	.word	0x08007b8c
 8007a40:	08007b8c 	.word	0x08007b8c
 8007a44:	08007b8c 	.word	0x08007b8c
 8007a48:	08007b90 	.word	0x08007b90

08007a4c <memset>:
 8007a4c:	0003      	movs	r3, r0
 8007a4e:	1882      	adds	r2, r0, r2
 8007a50:	4293      	cmp	r3, r2
 8007a52:	d100      	bne.n	8007a56 <memset+0xa>
 8007a54:	4770      	bx	lr
 8007a56:	7019      	strb	r1, [r3, #0]
 8007a58:	3301      	adds	r3, #1
 8007a5a:	e7f9      	b.n	8007a50 <memset+0x4>

08007a5c <_init>:
 8007a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a5e:	46c0      	nop			; (mov r8, r8)
 8007a60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a62:	bc08      	pop	{r3}
 8007a64:	469e      	mov	lr, r3
 8007a66:	4770      	bx	lr

08007a68 <_fini>:
 8007a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a6a:	46c0      	nop			; (mov r8, r8)
 8007a6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a6e:	bc08      	pop	{r3}
 8007a70:	469e      	mov	lr, r3
 8007a72:	4770      	bx	lr
